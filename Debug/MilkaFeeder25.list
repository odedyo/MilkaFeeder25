
MilkaFeeder25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005234  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08005340  08005340  00006340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005510  08005510  00007018  2**0
                  CONTENTS
  4 .ARM          00000000  08005510  08005510  00007018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005510  08005510  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005510  08005510  00006510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005514  08005514  00006514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005518  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000018  08005530  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08005530  000071a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ebe  00000000  00000000  00007041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc7  00000000  00000000  00018eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0001bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4f  00000000  00000000  0001ccf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183b6  00000000  00000000  0001db47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001573b  00000000  00000000  00035efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f63a  00000000  00000000  0004b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dac72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd4  00000000  00000000  000dacb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000df88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08005328 	.word	0x08005328

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08005328 	.word	0x08005328

0800014c <delayUS_DWT>:

/* Clock signal need to be at least 1 micro second wide, those delays are generated with DWT		*/
/* More info:  https://www.carminenoviello.com/2015/09/04/precisely-measure-microseconds-stm32/ */
//#pragma push
//#pragma O3
static void delayUS_DWT(uint32_t us) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000154:	4b0c      	ldr	r3, [pc, #48]	@ (8000188 <delayUS_DWT+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a0c      	ldr	r2, [pc, #48]	@ (800018c <delayUS_DWT+0x40>)
 800015a:	fba2 2303 	umull	r2, r3, r2, r3
 800015e:	0c9b      	lsrs	r3, r3, #18
 8000160:	687a      	ldr	r2, [r7, #4]
 8000162:	fb02 f303 	mul.w	r3, r2, r3
 8000166:	60fb      	str	r3, [r7, #12]
	volatile uint32_t start = DWT->CYCCNT;
 8000168:	4b09      	ldr	r3, [pc, #36]	@ (8000190 <delayUS_DWT+0x44>)
 800016a:	685b      	ldr	r3, [r3, #4]
 800016c:	60bb      	str	r3, [r7, #8]
	do  {
	} while(DWT->CYCCNT - start < cycles);
 800016e:	4b08      	ldr	r3, [pc, #32]	@ (8000190 <delayUS_DWT+0x44>)
 8000170:	685a      	ldr	r2, [r3, #4]
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	1ad2      	subs	r2, r2, r3
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	429a      	cmp	r2, r3
 800017a:	d3f8      	bcc.n	800016e <delayUS_DWT+0x22>
}
 800017c:	bf00      	nop
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000000c 	.word	0x2000000c
 800018c:	431bde83 	.word	0x431bde83
 8000190:	e0001000 	.word	0xe0001000

08000194 <dwt_init>:
//#pragma pop

void dwt_init(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
    // Enable TRC
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000198:	4b09      	ldr	r3, [pc, #36]	@ (80001c0 <dwt_init+0x2c>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	4a08      	ldr	r2, [pc, #32]	@ (80001c0 <dwt_init+0x2c>)
 800019e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001a2:	60d3      	str	r3, [r2, #12]
    // Reset the cycle counter
    DWT->CYCCNT = 0;
 80001a4:	4b07      	ldr	r3, [pc, #28]	@ (80001c4 <dwt_init+0x30>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	605a      	str	r2, [r3, #4]
    // Enable the cycle counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80001aa:	4b06      	ldr	r3, [pc, #24]	@ (80001c4 <dwt_init+0x30>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a05      	ldr	r2, [pc, #20]	@ (80001c4 <dwt_init+0x30>)
 80001b0:	f043 0301 	orr.w	r3, r3, #1
 80001b4:	6013      	str	r3, [r2, #0]
}
 80001b6:	bf00      	nop
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	e000edf0 	.word	0xe000edf0
 80001c4:	e0001000 	.word	0xe0001000

080001c8 <writeSDA>:

// SDA Write(output) Mode
static void writeSDA(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80001ce:	2320      	movs	r3, #32
 80001d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 80001d2:	2301      	movs	r3, #1
 80001d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80001d6:	2303      	movs	r3, #3
 80001d8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 80001da:	463b      	mov	r3, r7
 80001dc:	4619      	mov	r1, r3
 80001de:	4803      	ldr	r0, [pc, #12]	@ (80001ec <writeSDA+0x24>)
 80001e0:	f002 f9d6 	bl	8002590 <HAL_GPIO_Init>
	
}
 80001e4:	bf00      	nop
 80001e6:	3710      	adds	r7, #16
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40011000 	.word	0x40011000

080001f0 <readSDA>:

// SDA Read(input) Mode
static void readSDA(void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80001f6:	2320      	movs	r3, #32
 80001f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80001fe:	2302      	movs	r3, #2
 8000200:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000202:	2303      	movs	r3, #3
 8000204:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);	
 8000206:	463b      	mov	r3, r7
 8000208:	4619      	mov	r1, r3
 800020a:	4803      	ldr	r0, [pc, #12]	@ (8000218 <readSDA+0x28>)
 800020c:	f002 f9c0 	bl	8002590 <HAL_GPIO_Init>
}
 8000210:	bf00      	nop
 8000212:	3710      	adds	r7, #16
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40011000 	.word	0x40011000

0800021c <DS1302_SendCmd>:

/* Sends an address or command */
static void DS1302_SendCmd(uint8_t cmd) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i ++) 
 8000226:	2300      	movs	r3, #0
 8000228:	73fb      	strb	r3, [r7, #15]
 800022a:	e01e      	b.n	800026a <DS1302_SendCmd+0x4e>
	{	
//		DS1302_SDA = (bit)(addr & 1); 
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (cmd & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	f003 0301 	and.w	r3, r3, #1
 8000232:	b2db      	uxtb	r3, r3
 8000234:	461a      	mov	r2, r3
 8000236:	2120      	movs	r1, #32
 8000238:	4810      	ldr	r0, [pc, #64]	@ (800027c <DS1302_SendCmd+0x60>)
 800023a:	f002 fb44 	bl	80028c6 <HAL_GPIO_WritePin>
//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	2140      	movs	r1, #64	@ 0x40
 8000242:	480e      	ldr	r0, [pc, #56]	@ (800027c <DS1302_SendCmd+0x60>)
 8000244:	f002 fb3f 	bl	80028c6 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000248:	2001      	movs	r0, #1
 800024a:	f7ff ff7f 	bl	800014c <delayUS_DWT>
//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2140      	movs	r1, #64	@ 0x40
 8000252:	480a      	ldr	r0, [pc, #40]	@ (800027c <DS1302_SendCmd+0x60>)
 8000254:	f002 fb37 	bl	80028c6 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f7ff ff77 	bl	800014c <delayUS_DWT>
		cmd >>= 1;
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	085b      	lsrs	r3, r3, #1
 8000262:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i ++) 
 8000264:	7bfb      	ldrb	r3, [r7, #15]
 8000266:	3301      	adds	r3, #1
 8000268:	73fb      	strb	r3, [r7, #15]
 800026a:	7bfb      	ldrb	r3, [r7, #15]
 800026c:	2b07      	cmp	r3, #7
 800026e:	d9dd      	bls.n	800022c <DS1302_SendCmd+0x10>
	}
}
 8000270:	bf00      	nop
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40011000 	.word	0x40011000

08000280 <DS1302_ReadByte>:
}


/* Reads a byte from addr */
static uint8_t DS1302_ReadByte(uint8_t addr) 
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t temp = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	73bb      	strb	r3, [r7, #14]

//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 800028e:	2201      	movs	r2, #1
 8000290:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000294:	4822      	ldr	r0, [pc, #136]	@ (8000320 <DS1302_ReadByte+0xa0>)
 8000296:	f002 fb16 	bl	80028c6 <HAL_GPIO_WritePin>
	addr = addr | 0x01; // Generate Read Address
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	71fb      	strb	r3, [r7, #7]
	DS1302_SendCmd(addr);	// Sends address
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f7ff ffb9 	bl	800021c <DS1302_SendCmd>
	readSDA();
 80002aa:	f7ff ffa1 	bl	80001f0 <readSDA>
	for (i = 0; i < 8; i ++) 
 80002ae:	2300      	movs	r3, #0
 80002b0:	73fb      	strb	r3, [r7, #15]
 80002b2:	e020      	b.n	80002f6 <DS1302_ReadByte+0x76>
	{
		temp >>= 1;
 80002b4:	7bbb      	ldrb	r3, [r7, #14]
 80002b6:	085b      	lsrs	r3, r3, #1
 80002b8:	73bb      	strb	r3, [r7, #14]
//		if(DS1302_SDA)
		if(HAL_GPIO_ReadPin(DS1302_GPIO, DS1302_SDA))
 80002ba:	2120      	movs	r1, #32
 80002bc:	4818      	ldr	r0, [pc, #96]	@ (8000320 <DS1302_ReadByte+0xa0>)
 80002be:	f002 faeb 	bl	8002898 <HAL_GPIO_ReadPin>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d003      	beq.n	80002d0 <DS1302_ReadByte+0x50>
			temp |= 0x80;
 80002c8:	7bbb      	ldrb	r3, [r7, #14]
 80002ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002ce:	73bb      	strb	r3, [r7, #14]
//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2140      	movs	r1, #64	@ 0x40
 80002d4:	4812      	ldr	r0, [pc, #72]	@ (8000320 <DS1302_ReadByte+0xa0>)
 80002d6:	f002 faf6 	bl	80028c6 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80002da:	2001      	movs	r0, #1
 80002dc:	f7ff ff36 	bl	800014c <delayUS_DWT>
//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2140      	movs	r1, #64	@ 0x40
 80002e4:	480e      	ldr	r0, [pc, #56]	@ (8000320 <DS1302_ReadByte+0xa0>)
 80002e6:	f002 faee 	bl	80028c6 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f7ff ff2e 	bl	800014c <delayUS_DWT>
	for (i = 0; i < 8; i ++) 
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
 80002f2:	3301      	adds	r3, #1
 80002f4:	73fb      	strb	r3, [r7, #15]
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	2b07      	cmp	r3, #7
 80002fa:	d9db      	bls.n	80002b4 <DS1302_ReadByte+0x34>
	}
	writeSDA();
 80002fc:	f7ff ff64 	bl	80001c8 <writeSDA>
//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000306:	4806      	ldr	r0, [pc, #24]	@ (8000320 <DS1302_ReadByte+0xa0>)
 8000308:	f002 fadd 	bl	80028c6 <HAL_GPIO_WritePin>
//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2120      	movs	r1, #32
 8000310:	4803      	ldr	r0, [pc, #12]	@ (8000320 <DS1302_ReadByte+0xa0>)
 8000312:	f002 fad8 	bl	80028c6 <HAL_GPIO_WritePin>
	return temp;
 8000316:	7bbb      	ldrb	r3, [r7, #14]
}
 8000318:	4618      	mov	r0, r3
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40011000 	.word	0x40011000

08000324 <DS1302_ReadTime>:
}


/* Reads time byte by byte to 'buf' */
void DS1302_ReadTime(uint8_t *buf)  
{ 
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
   	uint8_t tmp;
	tmp = DS1302_ReadByte(DS1302_YEAR); 	
 800032c:	208c      	movs	r0, #140	@ 0x8c
 800032e:	f7ff ffa7 	bl	8000280 <DS1302_ReadByte>
 8000332:	4603      	mov	r3, r0
 8000334:	73fb      	strb	r3, [r7, #15]
	buf[1] = BCD2HEX(tmp);		 
 8000336:	7bfb      	ldrb	r3, [r7, #15]
 8000338:	f003 030f 	and.w	r3, r3, #15
 800033c:	b2d9      	uxtb	r1, r3
 800033e:	7bfb      	ldrb	r3, [r7, #15]
 8000340:	091b      	lsrs	r3, r3, #4
 8000342:	b2db      	uxtb	r3, r3
 8000344:	461a      	mov	r2, r3
 8000346:	0092      	lsls	r2, r2, #2
 8000348:	4413      	add	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	b2da      	uxtb	r2, r3
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	3301      	adds	r3, #1
 8000352:	440a      	add	r2, r1
 8000354:	b2d2      	uxtb	r2, r2
 8000356:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MONTH); 	
 8000358:	2088      	movs	r0, #136	@ 0x88
 800035a:	f7ff ff91 	bl	8000280 <DS1302_ReadByte>
 800035e:	4603      	mov	r3, r0
 8000360:	73fb      	strb	r3, [r7, #15]
	buf[2] = BCD2HEX(tmp);	 
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	f003 030f 	and.w	r3, r3, #15
 8000368:	b2d9      	uxtb	r1, r3
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	091b      	lsrs	r3, r3, #4
 800036e:	b2db      	uxtb	r3, r3
 8000370:	461a      	mov	r2, r3
 8000372:	0092      	lsls	r2, r2, #2
 8000374:	4413      	add	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	b2da      	uxtb	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3302      	adds	r3, #2
 800037e:	440a      	add	r2, r1
 8000380:	b2d2      	uxtb	r2, r2
 8000382:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DATE); 	
 8000384:	2086      	movs	r0, #134	@ 0x86
 8000386:	f7ff ff7b 	bl	8000280 <DS1302_ReadByte>
 800038a:	4603      	mov	r3, r0
 800038c:	73fb      	strb	r3, [r7, #15]
	buf[3] = BCD2HEX(tmp);
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	f003 030f 	and.w	r3, r3, #15
 8000394:	b2d9      	uxtb	r1, r3
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	091b      	lsrs	r3, r3, #4
 800039a:	b2db      	uxtb	r3, r3
 800039c:	461a      	mov	r2, r3
 800039e:	0092      	lsls	r2, r2, #2
 80003a0:	4413      	add	r3, r2
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3303      	adds	r3, #3
 80003aa:	440a      	add	r2, r1
 80003ac:	b2d2      	uxtb	r2, r2
 80003ae:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_HOUR);		
 80003b0:	2084      	movs	r0, #132	@ 0x84
 80003b2:	f7ff ff65 	bl	8000280 <DS1302_ReadByte>
 80003b6:	4603      	mov	r3, r0
 80003b8:	73fb      	strb	r3, [r7, #15]
	buf[4] = BCD2HEX(tmp);
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	f003 030f 	and.w	r3, r3, #15
 80003c0:	b2d9      	uxtb	r1, r3
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	091b      	lsrs	r3, r3, #4
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	461a      	mov	r2, r3
 80003ca:	0092      	lsls	r2, r2, #2
 80003cc:	4413      	add	r3, r2
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3304      	adds	r3, #4
 80003d6:	440a      	add	r2, r1
 80003d8:	b2d2      	uxtb	r2, r2
 80003da:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MIN);		
 80003dc:	2082      	movs	r0, #130	@ 0x82
 80003de:	f7ff ff4f 	bl	8000280 <DS1302_ReadByte>
 80003e2:	4603      	mov	r3, r0
 80003e4:	73fb      	strb	r3, [r7, #15]
	buf[5] = BCD2HEX(tmp); 
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	f003 030f 	and.w	r3, r3, #15
 80003ec:	b2d9      	uxtb	r1, r3
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	091b      	lsrs	r3, r3, #4
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	461a      	mov	r2, r3
 80003f6:	0092      	lsls	r2, r2, #2
 80003f8:	4413      	add	r3, r2
 80003fa:	005b      	lsls	r3, r3, #1
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	3305      	adds	r3, #5
 8000402:	440a      	add	r2, r1
 8000404:	b2d2      	uxtb	r2, r2
 8000406:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte((DS1302_SEC))&0x7F; 
 8000408:	2080      	movs	r0, #128	@ 0x80
 800040a:	f7ff ff39 	bl	8000280 <DS1302_ReadByte>
 800040e:	4603      	mov	r3, r0
 8000410:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000414:	73fb      	strb	r3, [r7, #15]
	buf[6] = BCD2HEX(tmp);
 8000416:	7bfb      	ldrb	r3, [r7, #15]
 8000418:	f003 030f 	and.w	r3, r3, #15
 800041c:	b2d9      	uxtb	r1, r3
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	091b      	lsrs	r3, r3, #4
 8000422:	b2db      	uxtb	r3, r3
 8000424:	461a      	mov	r2, r3
 8000426:	0092      	lsls	r2, r2, #2
 8000428:	4413      	add	r3, r2
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	b2da      	uxtb	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3306      	adds	r3, #6
 8000432:	440a      	add	r2, r1
 8000434:	b2d2      	uxtb	r2, r2
 8000436:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DAY);		
 8000438:	208a      	movs	r0, #138	@ 0x8a
 800043a:	f7ff ff21 	bl	8000280 <DS1302_ReadByte>
 800043e:	4603      	mov	r3, r0
 8000440:	73fb      	strb	r3, [r7, #15]
	buf[7] = BCD2HEX(tmp);
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	f003 030f 	and.w	r3, r3, #15
 8000448:	b2d9      	uxtb	r1, r3
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	b2db      	uxtb	r3, r3
 8000450:	461a      	mov	r2, r3
 8000452:	0092      	lsls	r2, r2, #2
 8000454:	4413      	add	r3, r2
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	b2da      	uxtb	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3307      	adds	r3, #7
 800045e:	440a      	add	r2, r1
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	701a      	strb	r2, [r3, #0]
}
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <DS1302_Init>:

/* Initialization */
void DS1302_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
//	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
	
//	DS1302_WriteByte(DS1302_CHARGER,0x00);			// Disable Trickle Charger
		
//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000476:	4808      	ldr	r0, [pc, #32]	@ (8000498 <DS1302_Init+0x2c>)
 8000478:	f002 fa25 	bl	80028c6 <HAL_GPIO_WritePin>
//	DS1302_SCK = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2140      	movs	r1, #64	@ 0x40
 8000480:	4805      	ldr	r0, [pc, #20]	@ (8000498 <DS1302_Init+0x2c>)
 8000482:	f002 fa20 	bl	80028c6 <HAL_GPIO_WritePin>

	DWT->CTRL |= 1 ; // enable the counter for microsecond delay, see "void delayUS_DWT(uint32_t us)"
 8000486:	4b05      	ldr	r3, [pc, #20]	@ (800049c <DS1302_Init+0x30>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a04      	ldr	r2, [pc, #16]	@ (800049c <DS1302_Init+0x30>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6013      	str	r3, [r2, #0]
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40011000 	.word	0x40011000
 800049c:	e0001000 	.word	0xe0001000

080004a0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E  // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af02      	add	r7, sp, #8
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	f023 030f 	bic.w	r3, r3, #15
 80004b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	011b      	lsls	r3, r3, #4
 80004b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
 80004ba:	f043 030c 	orr.w	r3, r3, #12
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	f043 0308 	orr.w	r3, r3, #8
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004cc:	7bbb      	ldrb	r3, [r7, #14]
 80004ce:	f043 030c 	orr.w	r3, r3, #12
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004d6:	7bbb      	ldrb	r3, [r7, #14]
 80004d8:	f043 0308 	orr.w	r3, r3, #8
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004e0:	f107 0208 	add.w	r2, r7, #8
 80004e4:	2364      	movs	r3, #100	@ 0x64
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	2304      	movs	r3, #4
 80004ea:	214e      	movs	r1, #78	@ 0x4e
 80004ec:	4803      	ldr	r0, [pc, #12]	@ (80004fc <lcd_send_cmd+0x5c>)
 80004ee:	f002 fb69 	bl	8002bc4 <HAL_I2C_Master_Transmit>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000034 	.word	0x20000034

08000500 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af02      	add	r7, sp, #8
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	f023 030f 	bic.w	r3, r3, #15
 8000510:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	f043 030d 	orr.w	r3, r3, #13
 800051e:	b2db      	uxtb	r3, r3
 8000520:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	f043 0309 	orr.w	r3, r3, #9
 8000528:	b2db      	uxtb	r3, r3
 800052a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 800052c:	7bbb      	ldrb	r3, [r7, #14]
 800052e:	f043 030d 	orr.w	r3, r3, #13
 8000532:	b2db      	uxtb	r3, r3
 8000534:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000536:	7bbb      	ldrb	r3, [r7, #14]
 8000538:	f043 0309 	orr.w	r3, r3, #9
 800053c:	b2db      	uxtb	r3, r3
 800053e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000540:	f107 0208 	add.w	r2, r7, #8
 8000544:	2364      	movs	r3, #100	@ 0x64
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2304      	movs	r3, #4
 800054a:	214e      	movs	r1, #78	@ 0x4e
 800054c:	4803      	ldr	r0, [pc, #12]	@ (800055c <lcd_send_data+0x5c>)
 800054e:	f002 fb39 	bl	8002bc4 <HAL_I2C_Master_Transmit>
}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000034 	.word	0x20000034

08000560 <lcd_clear>:

void lcd_clear (void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ff9a 	bl	80004a0 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	e005      	b.n	800057e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000572:	2020      	movs	r0, #32
 8000574:	f7ff ffc4 	bl	8000500 <lcd_send_data>
	for (int i=0; i<100; i++)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b63      	cmp	r3, #99	@ 0x63
 8000582:	ddf6      	ble.n	8000572 <lcd_clear+0x12>
	}
}
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <lcd_init>:

void lcd_init (void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000592:	2032      	movs	r0, #50	@ 0x32
 8000594:	f001 feca 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000598:	2030      	movs	r0, #48	@ 0x30
 800059a:	f7ff ff81 	bl	80004a0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800059e:	2005      	movs	r0, #5
 80005a0:	f001 fec4 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x30);
 80005a4:	2030      	movs	r0, #48	@ 0x30
 80005a6:	f7ff ff7b 	bl	80004a0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005aa:	2001      	movs	r0, #1
 80005ac:	f001 febe 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x30);
 80005b0:	2030      	movs	r0, #48	@ 0x30
 80005b2:	f7ff ff75 	bl	80004a0 <lcd_send_cmd>
	HAL_Delay(10);
 80005b6:	200a      	movs	r0, #10
 80005b8:	f001 feb8 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80005bc:	2020      	movs	r0, #32
 80005be:	f7ff ff6f 	bl	80004a0 <lcd_send_cmd>
	HAL_Delay(10);
 80005c2:	200a      	movs	r0, #10
 80005c4:	f001 feb2 	bl	800232c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005c8:	2028      	movs	r0, #40	@ 0x28
 80005ca:	f7ff ff69 	bl	80004a0 <lcd_send_cmd>
	HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f001 feac 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80005d4:	2008      	movs	r0, #8
 80005d6:	f7ff ff63 	bl	80004a0 <lcd_send_cmd>
	HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f001 fea6 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80005e0:	2001      	movs	r0, #1
 80005e2:	f7ff ff5d 	bl	80004a0 <lcd_send_cmd>
	HAL_Delay(1);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f001 fea0 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80005ec:	2006      	movs	r0, #6
 80005ee:	f7ff ff57 	bl	80004a0 <lcd_send_cmd>
	HAL_Delay(1);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f001 fe9a 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80005f8:	200c      	movs	r0, #12
 80005fa:	f7ff ff51 	bl	80004a0 <lcd_send_cmd>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}

08000602 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800060a:	e006      	b.n	800061a <lcd_send_string+0x18>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	607a      	str	r2, [r7, #4]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff73 	bl	8000500 <lcd_send_data>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1f4      	bne.n	800060c <lcd_send_string+0xa>
}
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f001 fe1a 	bl	8002268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f822 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f9b6 	bl	80009a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800063c:	f000 f878 	bl	8000730 <MX_I2C1_Init>
  MX_RTC_Init();
 8000640:	f000 f8a4 	bl	800078c <MX_RTC_Init>
  MX_TIM2_Init();
 8000644:	f000 f8ec 	bl	8000820 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000648:	f000 f984 	bl	8000954 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800064c:	f000 f934 	bl	80008b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  dwt_init();
 8000650:	f7ff fda0 	bl	8000194 <dwt_init>
  lcd_init();
 8000654:	f7ff ff9b 	bl	800058e <lcd_init>
  lcd_clear();
 8000658:	f7ff ff82 	bl	8000560 <lcd_clear>
  HAL_TIM_Base_Start_IT(&htim2);
 800065c:	4806      	ldr	r0, [pc, #24]	@ (8000678 <main+0x4c>)
 800065e:	f004 f989 	bl	8004974 <HAL_TIM_Base_Start_IT>
  DS1302_Init();
 8000662:	f7ff ff03 	bl	800046c <DS1302_Init>
  /* use this code for set the time of DS1302
  uint8_t buf[8] = {0, 25, 1, 8, 14, 51, 0, 3};
  DS1302_WriteTime(buf);
  */
  setTimeDateFromExtRTC();
 8000666:	f000 fe77 	bl	8001358 <setTimeDateFromExtRTC>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  handleLCDMonitor();
 800066a:	f001 f99b 	bl	80019a4 <handleLCDMonitor>
	  checkIfIsTimeToFeed();
 800066e:	f001 fd83 	bl	8002178 <checkIfIsTimeToFeed>
	  handleLCDMonitor();
 8000672:	bf00      	nop
 8000674:	e7f9      	b.n	800066a <main+0x3e>
 8000676:	bf00      	nop
 8000678:	2000009c 	.word	0x2000009c

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000686:	2228      	movs	r2, #40	@ 0x28
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fe20 	bl	80052d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006ac:	2306      	movs	r3, #6
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006c0:	2300      	movs	r3, #0
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006c4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80006c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fddc 	bl	800328c <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006da:	f000 fab9 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2302      	movs	r3, #2
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2102      	movs	r1, #2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 f848 	bl	8003790 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000706:	f000 faa3 	bl	8000c50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800070a:	2301      	movs	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800070e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000712:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f003 f9c8 	bl	8003aac <HAL_RCCEx_PeriphCLKConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000722:	f000 fa95 	bl	8000c50 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	@ 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000736:	4a13      	ldr	r2, [pc, #76]	@ (8000784 <MX_I2C1_Init+0x54>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_I2C1_Init+0x50>)
 800073c:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <MX_I2C1_Init+0x58>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_I2C1_Init+0x50>)
 800074e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000752:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_I2C1_Init+0x50>)
 800076e:	f002 f8e5 	bl	800293c <HAL_I2C_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000778:	f000 fa6a 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000034 	.word	0x20000034
 8000784:	40005400 	.word	0x40005400
 8000788:	000186a0 	.word	0x000186a0

0800078c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2100      	movs	r1, #0
 8000796:	460a      	mov	r2, r1
 8000798:	801a      	strh	r2, [r3, #0]
 800079a:	460a      	mov	r2, r1
 800079c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <MX_RTC_Init+0x8c>)
 80007a4:	4a1d      	ldr	r2, [pc, #116]	@ (800081c <MX_RTC_Init+0x90>)
 80007a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <MX_RTC_Init+0x8c>)
 80007aa:	f04f 32ff 	mov.w	r2, #4294967295
 80007ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_RTC_Init+0x8c>)
 80007b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007b6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b8:	4817      	ldr	r0, [pc, #92]	@ (8000818 <MX_RTC_Init+0x8c>)
 80007ba:	f003 fae3 	bl	8003d84 <HAL_RTC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80007c4:	f000 fa44 	bl	8000c50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2201      	movs	r2, #1
 80007d8:	4619      	mov	r1, r3
 80007da:	480f      	ldr	r0, [pc, #60]	@ (8000818 <MX_RTC_Init+0x8c>)
 80007dc:	f003 fb5e 	bl	8003e9c <HAL_RTC_SetTime>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80007e6:	f000 fa33 	bl	8000c50 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007ea:	2301      	movs	r3, #1
 80007ec:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80007ee:	2301      	movs	r3, #1
 80007f0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_RTC_Init+0x8c>)
 8000802:	f003 fcbb 	bl	800417c <HAL_RTC_SetDate>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800080c:	f000 fa20 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000088 	.word	0x20000088
 800081c:	40002800 	.word	0x40002800

08000820 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_TIM2_Init+0x94>)
 800083e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000842:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 8000844:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_TIM2_Init+0x94>)
 8000846:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800084a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_TIM2_Init+0x94>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_TIM2_Init+0x94>)
 8000854:	220a      	movs	r2, #10
 8000856:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_TIM2_Init+0x94>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_TIM2_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000864:	4813      	ldr	r0, [pc, #76]	@ (80008b4 <MX_TIM2_Init+0x94>)
 8000866:	f004 f835 	bl	80048d4 <HAL_TIM_Base_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000870:	f000 f9ee 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000878:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	4619      	mov	r1, r3
 8000880:	480c      	ldr	r0, [pc, #48]	@ (80008b4 <MX_TIM2_Init+0x94>)
 8000882:	f004 f9e7 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800088c:	f000 f9e0 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_TIM2_Init+0x94>)
 800089e:	f004 fbc9 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f000 f9d2 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000009c 	.word	0x2000009c

080008b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_TIM3_Init+0x94>)
 80008d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000950 <MX_TIM3_Init+0x98>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000 - 1;
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <MX_TIM3_Init+0x94>)
 80008dc:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80008e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_TIM3_Init+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2001;
 80008e8:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_TIM3_Init+0x94>)
 80008ea:	f240 72d1 	movw	r2, #2001	@ 0x7d1
 80008ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_TIM3_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_TIM3_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008fc:	4813      	ldr	r0, [pc, #76]	@ (800094c <MX_TIM3_Init+0x94>)
 80008fe:	f003 ffe9 	bl	80048d4 <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000908:	f000 f9a2 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4619      	mov	r1, r3
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <MX_TIM3_Init+0x94>)
 800091a:	f004 f99b 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000924:	f000 f994 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_TIM3_Init+0x94>)
 8000936:	f004 fb7d 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f986 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000e4 	.word	0x200000e4
 8000950:	40000400 	.word	0x40000400

08000954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800095a:	4a12      	ldr	r2, [pc, #72]	@ (80009a4 <MX_USART2_UART_Init+0x50>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800098c:	f004 fbc2 	bl	8005114 <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000996:	f000 f95b 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000012c 	.word	0x2000012c
 80009a4:	40004400 	.word	0x40004400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009bc:	4b38      	ldr	r3, [pc, #224]	@ (8000aa0 <MX_GPIO_Init+0xf8>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a37      	ldr	r2, [pc, #220]	@ (8000aa0 <MX_GPIO_Init+0xf8>)
 80009c2:	f043 0310 	orr.w	r3, r3, #16
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b35      	ldr	r3, [pc, #212]	@ (8000aa0 <MX_GPIO_Init+0xf8>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0310 	and.w	r3, r3, #16
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b32      	ldr	r3, [pc, #200]	@ (8000aa0 <MX_GPIO_Init+0xf8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a31      	ldr	r2, [pc, #196]	@ (8000aa0 <MX_GPIO_Init+0xf8>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa0 <MX_GPIO_Init+0xf8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ec:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa0 <MX_GPIO_Init+0xf8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a2b      	ldr	r2, [pc, #172]	@ (8000aa0 <MX_GPIO_Init+0xf8>)
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b29      	ldr	r3, [pc, #164]	@ (8000aa0 <MX_GPIO_Init+0xf8>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0308 	and.w	r3, r3, #8
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_Enable_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2121      	movs	r1, #33	@ 0x21
 8000a08:	4826      	ldr	r0, [pc, #152]	@ (8000aa4 <MX_GPIO_Init+0xfc>)
 8000a0a:	f001 ff5c 	bl	80028c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DS1302_SDA_Pin|DS1302_SCLK_Pin|DS1302_RST_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8000a14:	4824      	ldr	r0, [pc, #144]	@ (8000aa8 <MX_GPIO_Init+0x100>)
 8000a16:	f001 ff56 	bl	80028c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a20:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <MX_GPIO_Init+0x104>)
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0x100>)
 8000a30:	f001 fdae 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_Enable_Pin LD2_Pin */
  GPIO_InitStruct.Pin = MOTOR_Enable_Pin|LD2_Pin;
 8000a34:	2321      	movs	r3, #33	@ 0x21
 8000a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4816      	ldr	r0, [pc, #88]	@ (8000aa4 <MX_GPIO_Init+0xfc>)
 8000a4c:	f001 fda0 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pins : DS1302_SDA_Pin DS1302_SCLK_Pin DS1302_RST_Pin */
  GPIO_InitStruct.Pin = DS1302_SDA_Pin|DS1302_SCLK_Pin|DS1302_RST_Pin;
 8000a50:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8000a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	4619      	mov	r1, r3
 8000a68:	480f      	ldr	r0, [pc, #60]	@ (8000aa8 <MX_GPIO_Init+0x100>)
 8000a6a:	f001 fd91 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_Button_Pin UP_Button_Pin DOWN_Button_Pin ENTER_Button_Pin */
  GPIO_InitStruct.Pin = SET_Button_Pin|UP_Button_Pin|DOWN_Button_Pin|ENTER_Button_Pin;
 8000a6e:	2378      	movs	r3, #120	@ 0x78
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <MX_GPIO_Init+0x108>)
 8000a82:	f001 fd85 	bl	8002590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2028      	movs	r0, #40	@ 0x28
 8000a8c:	f001 fd49 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a90:	2028      	movs	r0, #40	@ 0x28
 8000a92:	f001 fd62 	bl	800255a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a96:	bf00      	nop
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010800 	.word	0x40010800
 8000aa8:	40011000 	.word	0x40011000
 8000aac:	10210000 	.word	0x10210000
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <triggerOnce>:

/* USER CODE BEGIN 4 */
void triggerOnce(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    // 1. Stop the timer (in case it's still running or flagged)
    HAL_TIM_Base_Stop_IT(&htim3);
 8000ab8:	4808      	ldr	r0, [pc, #32]	@ (8000adc <triggerOnce+0x28>)
 8000aba:	f003 ffad 	bl	8004a18 <HAL_TIM_Base_Stop_IT>

    // 2. Clear any pending update flags
    __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000abe:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <triggerOnce+0x28>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f06f 0201 	mvn.w	r2, #1
 8000ac6:	611a      	str	r2, [r3, #16]

    // 3. Reset the counter
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000ac8:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <triggerOnce+0x28>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	@ 0x24

    // 4. (Re)Start the timer in interrupt mode
    HAL_TIM_Base_Start_IT(&htim3);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <triggerOnce+0x28>)
 8000ad2:	f003 ff4f 	bl	8004974 <HAL_TIM_Base_Start_IT>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000e4 	.word	0x200000e4

08000ae0 <setTimerInterval>:

void setTimerInterval(uint32_t newPeriod)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    // 1. Stop the timer first
    HAL_TIM_Base_Stop_IT(&htim3);
 8000ae8:	480b      	ldr	r0, [pc, #44]	@ (8000b18 <setTimerInterval+0x38>)
 8000aea:	f003 ff95 	bl	8004a18 <HAL_TIM_Base_Stop_IT>

    // 2. Update auto-reload (ARR)
    __HAL_TIM_SET_AUTORELOAD(&htim3, newPeriod);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <setTimerInterval+0x38>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000af6:	4a08      	ldr	r2, [pc, #32]	@ (8000b18 <setTimerInterval+0x38>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	60d3      	str	r3, [r2, #12]

    // 3. Reset the counter to 0 for a clean start
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <setTimerInterval+0x38>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2200      	movs	r2, #0
 8000b02:	625a      	str	r2, [r3, #36]	@ 0x24

    // 4. Clear any pending update flag
    __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000b04:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <setTimerInterval+0x38>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f06f 0201 	mvn.w	r2, #1
 8000b0c:	611a      	str	r2, [r3, #16]
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000e4 	.word	0x200000e4

08000b1c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b2c:	d102      	bne.n	8000b34 <HAL_TIM_PeriodElapsedCallback+0x18>
    	debounce_buttons();
 8000b2e:	f000 f847 	bl	8000bc0 <debounce_buttons>
    else if (htim->Instance == TIM3)
    {
    	stopFeeding();
    	HAL_TIM_Base_Stop_IT(&htim3);
    }
}
 8000b32:	e009      	b.n	8000b48 <HAL_TIM_PeriodElapsedCallback+0x2c>
    else if (htim->Instance == TIM3)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d104      	bne.n	8000b48 <HAL_TIM_PeriodElapsedCallback+0x2c>
    	stopFeeding();
 8000b3e:	f001 fb5f 	bl	8002200 <stopFeeding>
    	HAL_TIM_Base_Stop_IT(&htim3);
 8000b42:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b44:	f003 ff68 	bl	8004a18 <HAL_TIM_Base_Stop_IT>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40000400 	.word	0x40000400
 8000b54:	200000e4 	.word	0x200000e4

08000b58 <read_button_pin>:

uint8_t read_button_pin(uint8_t buttonIndex) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
    // This function reads the actual pin state directly:
    switch(buttonIndex) {
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d823      	bhi.n	8000bb0 <read_button_pin+0x58>
 8000b68:	a201      	add	r2, pc, #4	@ (adr r2, 8000b70 <read_button_pin+0x18>)
 8000b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6e:	bf00      	nop
 8000b70:	08000b81 	.word	0x08000b81
 8000b74:	08000b8d 	.word	0x08000b8d
 8000b78:	08000b99 	.word	0x08000b99
 8000b7c:	08000ba5 	.word	0x08000ba5
      case 0: return HAL_GPIO_ReadPin(GPIOB, SET_Button_Pin);
 8000b80:	2108      	movs	r1, #8
 8000b82:	480e      	ldr	r0, [pc, #56]	@ (8000bbc <read_button_pin+0x64>)
 8000b84:	f001 fe88 	bl	8002898 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	e012      	b.n	8000bb2 <read_button_pin+0x5a>
      case 1: return HAL_GPIO_ReadPin(GPIOB, UP_Button_Pin);
 8000b8c:	2110      	movs	r1, #16
 8000b8e:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <read_button_pin+0x64>)
 8000b90:	f001 fe82 	bl	8002898 <HAL_GPIO_ReadPin>
 8000b94:	4603      	mov	r3, r0
 8000b96:	e00c      	b.n	8000bb2 <read_button_pin+0x5a>
      case 2: return HAL_GPIO_ReadPin(GPIOB, DOWN_Button_Pin);
 8000b98:	2120      	movs	r1, #32
 8000b9a:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <read_button_pin+0x64>)
 8000b9c:	f001 fe7c 	bl	8002898 <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	e006      	b.n	8000bb2 <read_button_pin+0x5a>
      case 3: return HAL_GPIO_ReadPin(GPIOB, ENTER_Button_Pin);
 8000ba4:	2140      	movs	r1, #64	@ 0x40
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <read_button_pin+0x64>)
 8000ba8:	f001 fe76 	bl	8002898 <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	e000      	b.n	8000bb2 <read_button_pin+0x5a>
    }
    return 1;
 8000bb0:	2301      	movs	r3, #1
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40010c00 	.word	0x40010c00

08000bc0 <debounce_buttons>:

void debounce_buttons() {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
    for (uint8_t i=0; i < BUTTON_COUNT; i++) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	e034      	b.n	8000c36 <debounce_buttons+0x76>
        uint8_t rawState = read_button_pin(i);
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ffc2 	bl	8000b58 <read_button_pin>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71bb      	strb	r3, [r7, #6]

        // Check if rawState differs from stable state
        if (rawState != buttonStableState[i]) {
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4a1b      	ldr	r2, [pc, #108]	@ (8000c48 <debounce_buttons+0x88>)
 8000bdc:	5cd3      	ldrb	r3, [r2, r3]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	79ba      	ldrb	r2, [r7, #6]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d020      	beq.n	8000c28 <debounce_buttons+0x68>
            buttonCounter[i]++;
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	4a18      	ldr	r2, [pc, #96]	@ (8000c4c <debounce_buttons+0x8c>)
 8000bea:	5cd2      	ldrb	r2, [r2, r3]
 8000bec:	3201      	adds	r2, #1
 8000bee:	b2d1      	uxtb	r1, r2
 8000bf0:	4a16      	ldr	r2, [pc, #88]	@ (8000c4c <debounce_buttons+0x8c>)
 8000bf2:	54d1      	strb	r1, [r2, r3]
            if (buttonCounter[i] >= DEBOUNCE_DELAY) {
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	4a15      	ldr	r2, [pc, #84]	@ (8000c4c <debounce_buttons+0x8c>)
 8000bf8:	5cd3      	ldrb	r3, [r2, r3]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d918      	bls.n	8000c30 <debounce_buttons+0x70>
                // Confirm stable change
                buttonStableState[i] = rawState;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4911      	ldr	r1, [pc, #68]	@ (8000c48 <debounce_buttons+0x88>)
 8000c02:	79ba      	ldrb	r2, [r7, #6]
 8000c04:	54ca      	strb	r2, [r1, r3]
                buttonCounter[i] = 0;
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4a10      	ldr	r2, [pc, #64]	@ (8000c4c <debounce_buttons+0x8c>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	54d1      	strb	r1, [r2, r3]

                 if (buttonStableState[i] == 1)
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <debounce_buttons+0x88>)
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d10a      	bne.n	8000c30 <debounce_buttons+0x70>
                 {
                	 handle_event(i + 1);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 f81b 	bl	8000c5c <handle_event>
 8000c26:	e003      	b.n	8000c30 <debounce_buttons+0x70>
                 }
            }
        }
        else {
            // No difference, reset the counter
            buttonCounter[i] = 0;
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4a08      	ldr	r2, [pc, #32]	@ (8000c4c <debounce_buttons+0x8c>)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i=0; i < BUTTON_COUNT; i++) {
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	3301      	adds	r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d9c7      	bls.n	8000bcc <debounce_buttons+0xc>
        }
    }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000174 	.word	0x20000174
 8000c4c:	20000178 	.word	0x20000178

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <Error_Handler+0x8>

08000c5c <handle_event>:
int8_t selectedFeedMinute = 31;
int8_t selectedFeedSecond = 10;
int16_t feedDuration 	  = 2000;

/***********************************************/
void handle_event(AppEvent event) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
/***********************************************/
	switch (currentState) {
 8000c66:	4bab      	ldr	r3, [pc, #684]	@ (8000f14 <handle_event+0x2b8>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b0c      	cmp	r3, #12
 8000c6c:	f200 831b 	bhi.w	80012a6 <handle_event+0x64a>
 8000c70:	a201      	add	r2, pc, #4	@ (adr r2, 8000c78 <handle_event+0x1c>)
 8000c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c76:	bf00      	nop
 8000c78:	08000cad 	.word	0x08000cad
 8000c7c:	08000ce1 	.word	0x08000ce1
 8000c80:	08000cf3 	.word	0x08000cf3
 8000c84:	08000d35 	.word	0x08000d35
 8000c88:	08000db9 	.word	0x08000db9
 8000c8c:	08000e3d 	.word	0x08000e3d
 8000c90:	08000ec1 	.word	0x08000ec1
 8000c94:	08000f59 	.word	0x08000f59
 8000c98:	08000fdd 	.word	0x08000fdd
 8000c9c:	08001169 	.word	0x08001169
 8000ca0:	080010e5 	.word	0x080010e5
 8000ca4:	08001061 	.word	0x08001061
 8000ca8:	0800120d 	.word	0x0800120d

		case IDLE_STATE:

			switch (event) {
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b05      	cmp	r3, #5
 8000cb0:	d010      	beq.n	8000cd4 <handle_event+0x78>
 8000cb2:	2b05      	cmp	r3, #5
 8000cb4:	dc12      	bgt.n	8000cdc <handle_event+0x80>
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d002      	beq.n	8000cc0 <handle_event+0x64>
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d004      	beq.n	8000cc8 <handle_event+0x6c>
					currentState = FEED_STATE;
					break;

				default:

					break;
 8000cbe:	e00d      	b.n	8000cdc <handle_event+0x80>
					currentState = MAIN_MANU_STATE;
 8000cc0:	4b94      	ldr	r3, [pc, #592]	@ (8000f14 <handle_event+0x2b8>)
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	701a      	strb	r2, [r3, #0]
					break;
 8000cc6:	e00a      	b.n	8000cde <handle_event+0x82>
					currentState = FEED_STATE;
 8000cc8:	4b92      	ldr	r3, [pc, #584]	@ (8000f14 <handle_event+0x2b8>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
					startFeeding();
 8000cce:	f001 fa89 	bl	80021e4 <startFeeding>
					break;
 8000cd2:	e004      	b.n	8000cde <handle_event+0x82>
					currentState = FEED_STATE;
 8000cd4:	4b8f      	ldr	r3, [pc, #572]	@ (8000f14 <handle_event+0x2b8>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
					break;
 8000cda:	e000      	b.n	8000cde <handle_event+0x82>
					break;
 8000cdc:	bf00      	nop
			}

			break;
 8000cde:	e2e3      	b.n	80012a8 <handle_event+0x64c>

		case FEED_STATE:

			switch (event) {
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d103      	bne.n	8000cee <handle_event+0x92>
				case END_FEED_TIME_EVENT:
					currentState = IDLE_STATE;
 8000ce6:	4b8b      	ldr	r3, [pc, #556]	@ (8000f14 <handle_event+0x2b8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
					break;
 8000cec:	e000      	b.n	8000cf0 <handle_event+0x94>

				default:

					break;
 8000cee:	bf00      	nop
			}
			break;
 8000cf0:	e2da      	b.n	80012a8 <handle_event+0x64c>

		case MAIN_MANU_STATE:

			switch (event) {
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d81a      	bhi.n	8000d30 <handle_event+0xd4>
 8000cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000d00 <handle_event+0xa4>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d19 	.word	0x08000d19
 8000d04:	08000d21 	.word	0x08000d21
 8000d08:	08000d11 	.word	0x08000d11
 8000d0c:	08000d29 	.word	0x08000d29
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_FEED_PERIOD_STATE;
 8000d10:	4b80      	ldr	r3, [pc, #512]	@ (8000f14 <handle_event+0x2b8>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	701a      	strb	r2, [r3, #0]
					break;
 8000d16:	e00c      	b.n	8000d32 <handle_event+0xd6>

				case UP_BUTTON_PRESSED_EVENT:
					currentState = SET_HOUR_FEED_STATE;
 8000d18:	4b7e      	ldr	r3, [pc, #504]	@ (8000f14 <handle_event+0x2b8>)
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	701a      	strb	r2, [r3, #0]
					break;
 8000d1e:	e008      	b.n	8000d32 <handle_event+0xd6>

				case DOWN_BUTTON_PRESSED_EVENT:
					currentState = SET_HOUR_TIME_STATE;
 8000d20:	4b7c      	ldr	r3, [pc, #496]	@ (8000f14 <handle_event+0x2b8>)
 8000d22:	2206      	movs	r2, #6
 8000d24:	701a      	strb	r2, [r3, #0]

					break;
 8000d26:	e004      	b.n	8000d32 <handle_event+0xd6>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000d28:	4b7a      	ldr	r3, [pc, #488]	@ (8000f14 <handle_event+0x2b8>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]

					break;
 8000d2e:	e000      	b.n	8000d32 <handle_event+0xd6>

				default:

					break;
 8000d30:	bf00      	nop
			}

			break;
 8000d32:	e2b9      	b.n	80012a8 <handle_event+0x64c>

		case SET_HOUR_FEED_STATE:

			switch (event) {
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	3b02      	subs	r3, #2
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d837      	bhi.n	8000dac <handle_event+0x150>
 8000d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d44 <handle_event+0xe8>)
 8000d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d42:	bf00      	nop
 8000d44:	08000d65 	.word	0x08000d65
 8000d48:	08000d89 	.word	0x08000d89
 8000d4c:	08000d55 	.word	0x08000d55
 8000d50:	08000d5d 	.word	0x08000d5d
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_MINUTE_FEED_STATE;
 8000d54:	4b6f      	ldr	r3, [pc, #444]	@ (8000f14 <handle_event+0x2b8>)
 8000d56:	2204      	movs	r2, #4
 8000d58:	701a      	strb	r2, [r3, #0]
					break;
 8000d5a:	e02c      	b.n	8000db6 <handle_event+0x15a>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000d5c:	4b6d      	ldr	r3, [pc, #436]	@ (8000f14 <handle_event+0x2b8>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
					break;
 8000d62:	e028      	b.n	8000db6 <handle_event+0x15a>

				case UP_BUTTON_PRESSED_EVENT:
					selectedFeedHour++;
 8000d64:	4b6c      	ldr	r3, [pc, #432]	@ (8000f18 <handle_event+0x2bc>)
 8000d66:	f993 3000 	ldrsb.w	r3, [r3]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	b25a      	sxtb	r2, r3
 8000d72:	4b69      	ldr	r3, [pc, #420]	@ (8000f18 <handle_event+0x2bc>)
 8000d74:	701a      	strb	r2, [r3, #0]
					if(selectedFeedHour == 24) selectedFeedHour = 0;
 8000d76:	4b68      	ldr	r3, [pc, #416]	@ (8000f18 <handle_event+0x2bc>)
 8000d78:	f993 3000 	ldrsb.w	r3, [r3]
 8000d7c:	2b18      	cmp	r3, #24
 8000d7e:	d117      	bne.n	8000db0 <handle_event+0x154>
 8000d80:	4b65      	ldr	r3, [pc, #404]	@ (8000f18 <handle_event+0x2bc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
					break;
 8000d86:	e013      	b.n	8000db0 <handle_event+0x154>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedFeedHour--;
 8000d88:	4b63      	ldr	r3, [pc, #396]	@ (8000f18 <handle_event+0x2bc>)
 8000d8a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	3b01      	subs	r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	b25a      	sxtb	r2, r3
 8000d96:	4b60      	ldr	r3, [pc, #384]	@ (8000f18 <handle_event+0x2bc>)
 8000d98:	701a      	strb	r2, [r3, #0]
					if(selectedFeedHour < 0) selectedFeedHour = 23;
 8000d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8000f18 <handle_event+0x2bc>)
 8000d9c:	f993 3000 	ldrsb.w	r3, [r3]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	da07      	bge.n	8000db4 <handle_event+0x158>
 8000da4:	4b5c      	ldr	r3, [pc, #368]	@ (8000f18 <handle_event+0x2bc>)
 8000da6:	2217      	movs	r2, #23
 8000da8:	701a      	strb	r2, [r3, #0]
					break;
 8000daa:	e003      	b.n	8000db4 <handle_event+0x158>

				default:

					break;
 8000dac:	bf00      	nop
 8000dae:	e27b      	b.n	80012a8 <handle_event+0x64c>
					break;
 8000db0:	bf00      	nop
 8000db2:	e279      	b.n	80012a8 <handle_event+0x64c>
					break;
 8000db4:	bf00      	nop
			}

			break;
 8000db6:	e277      	b.n	80012a8 <handle_event+0x64c>

		case SET_MINUTE_FEED_STATE:

			switch (event) {
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d837      	bhi.n	8000e30 <handle_event+0x1d4>
 8000dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc8 <handle_event+0x16c>)
 8000dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc6:	bf00      	nop
 8000dc8:	08000de9 	.word	0x08000de9
 8000dcc:	08000e0d 	.word	0x08000e0d
 8000dd0:	08000dd9 	.word	0x08000dd9
 8000dd4:	08000de1 	.word	0x08000de1
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_SECOND_FEED_STATE;
 8000dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f14 <handle_event+0x2b8>)
 8000dda:	2205      	movs	r2, #5
 8000ddc:	701a      	strb	r2, [r3, #0]
					break;
 8000dde:	e02c      	b.n	8000e3a <handle_event+0x1de>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000de0:	4b4c      	ldr	r3, [pc, #304]	@ (8000f14 <handle_event+0x2b8>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
					break;
 8000de6:	e028      	b.n	8000e3a <handle_event+0x1de>

				case UP_BUTTON_PRESSED_EVENT:
					selectedFeedMinute++;
 8000de8:	4b4c      	ldr	r3, [pc, #304]	@ (8000f1c <handle_event+0x2c0>)
 8000dea:	f993 3000 	ldrsb.w	r3, [r3]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	3301      	adds	r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	b25a      	sxtb	r2, r3
 8000df6:	4b49      	ldr	r3, [pc, #292]	@ (8000f1c <handle_event+0x2c0>)
 8000df8:	701a      	strb	r2, [r3, #0]
					if(selectedFeedMinute == 60) selectedFeedMinute = 0;
 8000dfa:	4b48      	ldr	r3, [pc, #288]	@ (8000f1c <handle_event+0x2c0>)
 8000dfc:	f993 3000 	ldrsb.w	r3, [r3]
 8000e00:	2b3c      	cmp	r3, #60	@ 0x3c
 8000e02:	d117      	bne.n	8000e34 <handle_event+0x1d8>
 8000e04:	4b45      	ldr	r3, [pc, #276]	@ (8000f1c <handle_event+0x2c0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
					break;
 8000e0a:	e013      	b.n	8000e34 <handle_event+0x1d8>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedFeedMinute--;
 8000e0c:	4b43      	ldr	r3, [pc, #268]	@ (8000f1c <handle_event+0x2c0>)
 8000e0e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	3b01      	subs	r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	4b40      	ldr	r3, [pc, #256]	@ (8000f1c <handle_event+0x2c0>)
 8000e1c:	701a      	strb	r2, [r3, #0]
					if(selectedFeedMinute < 0) selectedFeedMinute = 59;
 8000e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f1c <handle_event+0x2c0>)
 8000e20:	f993 3000 	ldrsb.w	r3, [r3]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da07      	bge.n	8000e38 <handle_event+0x1dc>
 8000e28:	4b3c      	ldr	r3, [pc, #240]	@ (8000f1c <handle_event+0x2c0>)
 8000e2a:	223b      	movs	r2, #59	@ 0x3b
 8000e2c:	701a      	strb	r2, [r3, #0]
					break;
 8000e2e:	e003      	b.n	8000e38 <handle_event+0x1dc>

				default:

					break;
 8000e30:	bf00      	nop
 8000e32:	e239      	b.n	80012a8 <handle_event+0x64c>
					break;
 8000e34:	bf00      	nop
 8000e36:	e237      	b.n	80012a8 <handle_event+0x64c>
					break;
 8000e38:	bf00      	nop
			}

			break;
 8000e3a:	e235      	b.n	80012a8 <handle_event+0x64c>

		case SET_SECOND_FEED_STATE:

			switch (event) {
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d837      	bhi.n	8000eb4 <handle_event+0x258>
 8000e44:	a201      	add	r2, pc, #4	@ (adr r2, 8000e4c <handle_event+0x1f0>)
 8000e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4a:	bf00      	nop
 8000e4c:	08000e6d 	.word	0x08000e6d
 8000e50:	08000e91 	.word	0x08000e91
 8000e54:	08000e5d 	.word	0x08000e5d
 8000e58:	08000e65 	.word	0x08000e65
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = IDLE_STATE;
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <handle_event+0x2b8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
					break;
 8000e62:	e02c      	b.n	8000ebe <handle_event+0x262>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000e64:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <handle_event+0x2b8>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
					break;
 8000e6a:	e028      	b.n	8000ebe <handle_event+0x262>

				case UP_BUTTON_PRESSED_EVENT:
					selectedFeedSecond++;
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f20 <handle_event+0x2c4>)
 8000e6e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	3301      	adds	r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <handle_event+0x2c4>)
 8000e7c:	701a      	strb	r2, [r3, #0]
					if(selectedFeedSecond == 60) selectedFeedSecond = 0;
 8000e7e:	4b28      	ldr	r3, [pc, #160]	@ (8000f20 <handle_event+0x2c4>)
 8000e80:	f993 3000 	ldrsb.w	r3, [r3]
 8000e84:	2b3c      	cmp	r3, #60	@ 0x3c
 8000e86:	d117      	bne.n	8000eb8 <handle_event+0x25c>
 8000e88:	4b25      	ldr	r3, [pc, #148]	@ (8000f20 <handle_event+0x2c4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
					break;
 8000e8e:	e013      	b.n	8000eb8 <handle_event+0x25c>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedFeedSecond--;
 8000e90:	4b23      	ldr	r3, [pc, #140]	@ (8000f20 <handle_event+0x2c4>)
 8000e92:	f993 3000 	ldrsb.w	r3, [r3]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	b25a      	sxtb	r2, r3
 8000e9e:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <handle_event+0x2c4>)
 8000ea0:	701a      	strb	r2, [r3, #0]
					if(selectedFeedSecond < 0) selectedFeedSecond = 59;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f20 <handle_event+0x2c4>)
 8000ea4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	da07      	bge.n	8000ebc <handle_event+0x260>
 8000eac:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <handle_event+0x2c4>)
 8000eae:	223b      	movs	r2, #59	@ 0x3b
 8000eb0:	701a      	strb	r2, [r3, #0]
					break;
 8000eb2:	e003      	b.n	8000ebc <handle_event+0x260>

				default:

					break;
 8000eb4:	bf00      	nop
 8000eb6:	e1f7      	b.n	80012a8 <handle_event+0x64c>
					break;
 8000eb8:	bf00      	nop
 8000eba:	e1f5      	b.n	80012a8 <handle_event+0x64c>
					break;
 8000ebc:	bf00      	nop
			}

			break;
 8000ebe:	e1f3      	b.n	80012a8 <handle_event+0x64c>

		case SET_HOUR_TIME_STATE:

			switch (event) {
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d841      	bhi.n	8000f4c <handle_event+0x2f0>
 8000ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed0 <handle_event+0x274>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000ef1 	.word	0x08000ef1
 8000ed4:	08000f29 	.word	0x08000f29
 8000ed8:	08000ee1 	.word	0x08000ee1
 8000edc:	08000ee9 	.word	0x08000ee9
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_MINUTE_TIME_STATE;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <handle_event+0x2b8>)
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	701a      	strb	r2, [r3, #0]
					break;
 8000ee6:	e036      	b.n	8000f56 <handle_event+0x2fa>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <handle_event+0x2b8>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
					break;
 8000eee:	e032      	b.n	8000f56 <handle_event+0x2fa>

				case UP_BUTTON_PRESSED_EVENT:
					selectedHour++;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <handle_event+0x2c8>)
 8000ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	3301      	adds	r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	b25a      	sxtb	r2, r3
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <handle_event+0x2c8>)
 8000f00:	701a      	strb	r2, [r3, #0]
					if(selectedHour == 24) selectedHour = 0;
 8000f02:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <handle_event+0x2c8>)
 8000f04:	f993 3000 	ldrsb.w	r3, [r3]
 8000f08:	2b18      	cmp	r3, #24
 8000f0a:	d121      	bne.n	8000f50 <handle_event+0x2f4>
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <handle_event+0x2c8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
					break;
 8000f12:	e01d      	b.n	8000f50 <handle_event+0x2f4>
 8000f14:	2000017c 	.word	0x2000017c
 8000f18:	20000006 	.word	0x20000006
 8000f1c:	20000007 	.word	0x20000007
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000000 	.word	0x20000000

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedHour--;
 8000f28:	4ba5      	ldr	r3, [pc, #660]	@ (80011c0 <handle_event+0x564>)
 8000f2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	3b01      	subs	r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	b25a      	sxtb	r2, r3
 8000f36:	4ba2      	ldr	r3, [pc, #648]	@ (80011c0 <handle_event+0x564>)
 8000f38:	701a      	strb	r2, [r3, #0]
					if(selectedHour < 0) selectedHour = 23;
 8000f3a:	4ba1      	ldr	r3, [pc, #644]	@ (80011c0 <handle_event+0x564>)
 8000f3c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	da07      	bge.n	8000f54 <handle_event+0x2f8>
 8000f44:	4b9e      	ldr	r3, [pc, #632]	@ (80011c0 <handle_event+0x564>)
 8000f46:	2217      	movs	r2, #23
 8000f48:	701a      	strb	r2, [r3, #0]
					break;
 8000f4a:	e003      	b.n	8000f54 <handle_event+0x2f8>

				default:

					break;
 8000f4c:	bf00      	nop
 8000f4e:	e1ab      	b.n	80012a8 <handle_event+0x64c>
					break;
 8000f50:	bf00      	nop
 8000f52:	e1a9      	b.n	80012a8 <handle_event+0x64c>
					break;
 8000f54:	bf00      	nop
			}

			break;
 8000f56:	e1a7      	b.n	80012a8 <handle_event+0x64c>

		case SET_MINUTE_TIME_STATE:

			switch (event) {
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	3b02      	subs	r3, #2
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d837      	bhi.n	8000fd0 <handle_event+0x374>
 8000f60:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <handle_event+0x30c>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f89 	.word	0x08000f89
 8000f6c:	08000fad 	.word	0x08000fad
 8000f70:	08000f79 	.word	0x08000f79
 8000f74:	08000f81 	.word	0x08000f81
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_SECOND_TIME_STATE;
 8000f78:	4b92      	ldr	r3, [pc, #584]	@ (80011c4 <handle_event+0x568>)
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	701a      	strb	r2, [r3, #0]
					break;
 8000f7e:	e02c      	b.n	8000fda <handle_event+0x37e>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000f80:	4b90      	ldr	r3, [pc, #576]	@ (80011c4 <handle_event+0x568>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
					break;
 8000f86:	e028      	b.n	8000fda <handle_event+0x37e>

				case UP_BUTTON_PRESSED_EVENT:
					selectedMinute++;
 8000f88:	4b8f      	ldr	r3, [pc, #572]	@ (80011c8 <handle_event+0x56c>)
 8000f8a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	3301      	adds	r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	b25a      	sxtb	r2, r3
 8000f96:	4b8c      	ldr	r3, [pc, #560]	@ (80011c8 <handle_event+0x56c>)
 8000f98:	701a      	strb	r2, [r3, #0]
					if(selectedMinute == 60) selectedMinute = 0;
 8000f9a:	4b8b      	ldr	r3, [pc, #556]	@ (80011c8 <handle_event+0x56c>)
 8000f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8000fa0:	2b3c      	cmp	r3, #60	@ 0x3c
 8000fa2:	d117      	bne.n	8000fd4 <handle_event+0x378>
 8000fa4:	4b88      	ldr	r3, [pc, #544]	@ (80011c8 <handle_event+0x56c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
					break;
 8000faa:	e013      	b.n	8000fd4 <handle_event+0x378>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedMinute--;
 8000fac:	4b86      	ldr	r3, [pc, #536]	@ (80011c8 <handle_event+0x56c>)
 8000fae:	f993 3000 	ldrsb.w	r3, [r3]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	b25a      	sxtb	r2, r3
 8000fba:	4b83      	ldr	r3, [pc, #524]	@ (80011c8 <handle_event+0x56c>)
 8000fbc:	701a      	strb	r2, [r3, #0]
					if(selectedMinute < 0) selectedMinute = 59;
 8000fbe:	4b82      	ldr	r3, [pc, #520]	@ (80011c8 <handle_event+0x56c>)
 8000fc0:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	da07      	bge.n	8000fd8 <handle_event+0x37c>
 8000fc8:	4b7f      	ldr	r3, [pc, #508]	@ (80011c8 <handle_event+0x56c>)
 8000fca:	223b      	movs	r2, #59	@ 0x3b
 8000fcc:	701a      	strb	r2, [r3, #0]
					break;
 8000fce:	e003      	b.n	8000fd8 <handle_event+0x37c>

				default:

					break;
 8000fd0:	bf00      	nop
 8000fd2:	e169      	b.n	80012a8 <handle_event+0x64c>
					break;
 8000fd4:	bf00      	nop
 8000fd6:	e167      	b.n	80012a8 <handle_event+0x64c>
					break;
 8000fd8:	bf00      	nop
			}

			break;
 8000fda:	e165      	b.n	80012a8 <handle_event+0x64c>

		case SET_SECOND_TIME_STATE:

			switch (event) {
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	3b02      	subs	r3, #2
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d837      	bhi.n	8001054 <handle_event+0x3f8>
 8000fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fec <handle_event+0x390>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	0800100d 	.word	0x0800100d
 8000ff0:	08001031 	.word	0x08001031
 8000ff4:	08000ffd 	.word	0x08000ffd
 8000ff8:	08001005 	.word	0x08001005
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_DAY_STATE;
 8000ffc:	4b71      	ldr	r3, [pc, #452]	@ (80011c4 <handle_event+0x568>)
 8000ffe:	220b      	movs	r2, #11
 8001000:	701a      	strb	r2, [r3, #0]
					break;
 8001002:	e02c      	b.n	800105e <handle_event+0x402>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8001004:	4b6f      	ldr	r3, [pc, #444]	@ (80011c4 <handle_event+0x568>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
					break;
 800100a:	e028      	b.n	800105e <handle_event+0x402>

				case UP_BUTTON_PRESSED_EVENT:
					selectedSecond++;
 800100c:	4b6f      	ldr	r3, [pc, #444]	@ (80011cc <handle_event+0x570>)
 800100e:	f993 3000 	ldrsb.w	r3, [r3]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3301      	adds	r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	b25a      	sxtb	r2, r3
 800101a:	4b6c      	ldr	r3, [pc, #432]	@ (80011cc <handle_event+0x570>)
 800101c:	701a      	strb	r2, [r3, #0]
					if(selectedSecond == 60) selectedSecond = 0;
 800101e:	4b6b      	ldr	r3, [pc, #428]	@ (80011cc <handle_event+0x570>)
 8001020:	f993 3000 	ldrsb.w	r3, [r3]
 8001024:	2b3c      	cmp	r3, #60	@ 0x3c
 8001026:	d117      	bne.n	8001058 <handle_event+0x3fc>
 8001028:	4b68      	ldr	r3, [pc, #416]	@ (80011cc <handle_event+0x570>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
					break;
 800102e:	e013      	b.n	8001058 <handle_event+0x3fc>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedSecond--;
 8001030:	4b66      	ldr	r3, [pc, #408]	@ (80011cc <handle_event+0x570>)
 8001032:	f993 3000 	ldrsb.w	r3, [r3]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	3b01      	subs	r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	b25a      	sxtb	r2, r3
 800103e:	4b63      	ldr	r3, [pc, #396]	@ (80011cc <handle_event+0x570>)
 8001040:	701a      	strb	r2, [r3, #0]
					if(selectedSecond < 0) selectedSecond = 59;
 8001042:	4b62      	ldr	r3, [pc, #392]	@ (80011cc <handle_event+0x570>)
 8001044:	f993 3000 	ldrsb.w	r3, [r3]
 8001048:	2b00      	cmp	r3, #0
 800104a:	da07      	bge.n	800105c <handle_event+0x400>
 800104c:	4b5f      	ldr	r3, [pc, #380]	@ (80011cc <handle_event+0x570>)
 800104e:	223b      	movs	r2, #59	@ 0x3b
 8001050:	701a      	strb	r2, [r3, #0]
					break;
 8001052:	e003      	b.n	800105c <handle_event+0x400>

				default:

					break;
 8001054:	bf00      	nop
 8001056:	e127      	b.n	80012a8 <handle_event+0x64c>
					break;
 8001058:	bf00      	nop
 800105a:	e125      	b.n	80012a8 <handle_event+0x64c>
					break;
 800105c:	bf00      	nop
			}

			break;
 800105e:	e123      	b.n	80012a8 <handle_event+0x64c>

		case SET_DAY_STATE:

			switch (event) {
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	3b02      	subs	r3, #2
 8001064:	2b03      	cmp	r3, #3
 8001066:	d837      	bhi.n	80010d8 <handle_event+0x47c>
 8001068:	a201      	add	r2, pc, #4	@ (adr r2, 8001070 <handle_event+0x414>)
 800106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106e:	bf00      	nop
 8001070:	08001091 	.word	0x08001091
 8001074:	080010b5 	.word	0x080010b5
 8001078:	08001081 	.word	0x08001081
 800107c:	08001089 	.word	0x08001089
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_MONTH_STATE;
 8001080:	4b50      	ldr	r3, [pc, #320]	@ (80011c4 <handle_event+0x568>)
 8001082:	220a      	movs	r2, #10
 8001084:	701a      	strb	r2, [r3, #0]
					break;
 8001086:	e02c      	b.n	80010e2 <handle_event+0x486>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8001088:	4b4e      	ldr	r3, [pc, #312]	@ (80011c4 <handle_event+0x568>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
					break;
 800108e:	e028      	b.n	80010e2 <handle_event+0x486>

				case UP_BUTTON_PRESSED_EVENT:
					selectedDay++;
 8001090:	4b4f      	ldr	r3, [pc, #316]	@ (80011d0 <handle_event+0x574>)
 8001092:	f993 3000 	ldrsb.w	r3, [r3]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	3301      	adds	r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	b25a      	sxtb	r2, r3
 800109e:	4b4c      	ldr	r3, [pc, #304]	@ (80011d0 <handle_event+0x574>)
 80010a0:	701a      	strb	r2, [r3, #0]
					if(selectedDay == 32) selectedDay = 0;
 80010a2:	4b4b      	ldr	r3, [pc, #300]	@ (80011d0 <handle_event+0x574>)
 80010a4:	f993 3000 	ldrsb.w	r3, [r3]
 80010a8:	2b20      	cmp	r3, #32
 80010aa:	d117      	bne.n	80010dc <handle_event+0x480>
 80010ac:	4b48      	ldr	r3, [pc, #288]	@ (80011d0 <handle_event+0x574>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
					break;
 80010b2:	e013      	b.n	80010dc <handle_event+0x480>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedDay--;
 80010b4:	4b46      	ldr	r3, [pc, #280]	@ (80011d0 <handle_event+0x574>)
 80010b6:	f993 3000 	ldrsb.w	r3, [r3]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	3b01      	subs	r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	b25a      	sxtb	r2, r3
 80010c2:	4b43      	ldr	r3, [pc, #268]	@ (80011d0 <handle_event+0x574>)
 80010c4:	701a      	strb	r2, [r3, #0]
					if(selectedDay < 0) selectedDay = 31;
 80010c6:	4b42      	ldr	r3, [pc, #264]	@ (80011d0 <handle_event+0x574>)
 80010c8:	f993 3000 	ldrsb.w	r3, [r3]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	da07      	bge.n	80010e0 <handle_event+0x484>
 80010d0:	4b3f      	ldr	r3, [pc, #252]	@ (80011d0 <handle_event+0x574>)
 80010d2:	221f      	movs	r2, #31
 80010d4:	701a      	strb	r2, [r3, #0]
					break;
 80010d6:	e003      	b.n	80010e0 <handle_event+0x484>

				default:

					break;
 80010d8:	bf00      	nop
 80010da:	e0e5      	b.n	80012a8 <handle_event+0x64c>
					break;
 80010dc:	bf00      	nop
 80010de:	e0e3      	b.n	80012a8 <handle_event+0x64c>
					break;
 80010e0:	bf00      	nop
			}

			break;
 80010e2:	e0e1      	b.n	80012a8 <handle_event+0x64c>

		case SET_MONTH_STATE:

			switch (event) {
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	3b02      	subs	r3, #2
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d837      	bhi.n	800115c <handle_event+0x500>
 80010ec:	a201      	add	r2, pc, #4	@ (adr r2, 80010f4 <handle_event+0x498>)
 80010ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f2:	bf00      	nop
 80010f4:	08001115 	.word	0x08001115
 80010f8:	08001139 	.word	0x08001139
 80010fc:	08001105 	.word	0x08001105
 8001100:	0800110d 	.word	0x0800110d
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_YEAR_STATE;
 8001104:	4b2f      	ldr	r3, [pc, #188]	@ (80011c4 <handle_event+0x568>)
 8001106:	2209      	movs	r2, #9
 8001108:	701a      	strb	r2, [r3, #0]
					break;
 800110a:	e02c      	b.n	8001166 <handle_event+0x50a>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 800110c:	4b2d      	ldr	r3, [pc, #180]	@ (80011c4 <handle_event+0x568>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
					break;
 8001112:	e028      	b.n	8001166 <handle_event+0x50a>

				case UP_BUTTON_PRESSED_EVENT:
					selectedMonth++;
 8001114:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <handle_event+0x578>)
 8001116:	f993 3000 	ldrsb.w	r3, [r3]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	3301      	adds	r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	b25a      	sxtb	r2, r3
 8001122:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <handle_event+0x578>)
 8001124:	701a      	strb	r2, [r3, #0]
					if(selectedMonth == 13) selectedMonth = 0;
 8001126:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <handle_event+0x578>)
 8001128:	f993 3000 	ldrsb.w	r3, [r3]
 800112c:	2b0d      	cmp	r3, #13
 800112e:	d117      	bne.n	8001160 <handle_event+0x504>
 8001130:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <handle_event+0x578>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
					break;
 8001136:	e013      	b.n	8001160 <handle_event+0x504>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedMonth--;
 8001138:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <handle_event+0x578>)
 800113a:	f993 3000 	ldrsb.w	r3, [r3]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	3b01      	subs	r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	b25a      	sxtb	r2, r3
 8001146:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <handle_event+0x578>)
 8001148:	701a      	strb	r2, [r3, #0]
					if(selectedMonth < 0) selectedMonth = 12;
 800114a:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <handle_event+0x578>)
 800114c:	f993 3000 	ldrsb.w	r3, [r3]
 8001150:	2b00      	cmp	r3, #0
 8001152:	da07      	bge.n	8001164 <handle_event+0x508>
 8001154:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <handle_event+0x578>)
 8001156:	220c      	movs	r2, #12
 8001158:	701a      	strb	r2, [r3, #0]
					break;
 800115a:	e003      	b.n	8001164 <handle_event+0x508>

				default:

					break;
 800115c:	bf00      	nop
 800115e:	e0a3      	b.n	80012a8 <handle_event+0x64c>
					break;
 8001160:	bf00      	nop
 8001162:	e0a1      	b.n	80012a8 <handle_event+0x64c>
					break;
 8001164:	bf00      	nop
				}

			break;
 8001166:	e09f      	b.n	80012a8 <handle_event+0x64c>

		case SET_YEAR_STATE:

			switch (event) {
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	3b02      	subs	r3, #2
 800116c:	2b03      	cmp	r3, #3
 800116e:	d847      	bhi.n	8001200 <handle_event+0x5a4>
 8001170:	a201      	add	r2, pc, #4	@ (adr r2, 8001178 <handle_event+0x51c>)
 8001172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001176:	bf00      	nop
 8001178:	0800119d 	.word	0x0800119d
 800117c:	080011dd 	.word	0x080011dd
 8001180:	08001189 	.word	0x08001189
 8001184:	08001195 	.word	0x08001195
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = IDLE_STATE;
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <handle_event+0x568>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
					setTimeDate();
 800118e:	f000 f895 	bl	80012bc <setTimeDate>
					break;
 8001192:	e03a      	b.n	800120a <handle_event+0x5ae>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <handle_event+0x568>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
					break;
 800119a:	e036      	b.n	800120a <handle_event+0x5ae>

				case UP_BUTTON_PRESSED_EVENT:
					selectedYear++;
 800119c:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <handle_event+0x57c>)
 800119e:	f993 3000 	ldrsb.w	r3, [r3]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	3301      	adds	r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	b25a      	sxtb	r2, r3
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <handle_event+0x57c>)
 80011ac:	701a      	strb	r2, [r3, #0]
					if(selectedYear == 100) selectedYear = 0;
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <handle_event+0x57c>)
 80011b0:	f993 3000 	ldrsb.w	r3, [r3]
 80011b4:	2b64      	cmp	r3, #100	@ 0x64
 80011b6:	d125      	bne.n	8001204 <handle_event+0x5a8>
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <handle_event+0x57c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
					break;
 80011be:	e021      	b.n	8001204 <handle_event+0x5a8>
 80011c0:	20000000 	.word	0x20000000
 80011c4:	2000017c 	.word	0x2000017c
 80011c8:	20000001 	.word	0x20000001
 80011cc:	20000002 	.word	0x20000002
 80011d0:	20000005 	.word	0x20000005
 80011d4:	20000004 	.word	0x20000004
 80011d8:	20000003 	.word	0x20000003

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedYear--;
 80011dc:	4b34      	ldr	r3, [pc, #208]	@ (80012b0 <handle_event+0x654>)
 80011de:	f993 3000 	ldrsb.w	r3, [r3]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	3b01      	subs	r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	b25a      	sxtb	r2, r3
 80011ea:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <handle_event+0x654>)
 80011ec:	701a      	strb	r2, [r3, #0]
					if(selectedYear < 0) selectedYear = 99;
 80011ee:	4b30      	ldr	r3, [pc, #192]	@ (80012b0 <handle_event+0x654>)
 80011f0:	f993 3000 	ldrsb.w	r3, [r3]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	da07      	bge.n	8001208 <handle_event+0x5ac>
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <handle_event+0x654>)
 80011fa:	2263      	movs	r2, #99	@ 0x63
 80011fc:	701a      	strb	r2, [r3, #0]
					break;
 80011fe:	e003      	b.n	8001208 <handle_event+0x5ac>

				default:

					break;
 8001200:	bf00      	nop
 8001202:	e051      	b.n	80012a8 <handle_event+0x64c>
					break;
 8001204:	bf00      	nop
 8001206:	e04f      	b.n	80012a8 <handle_event+0x64c>
					break;
 8001208:	bf00      	nop
				}

			break;
 800120a:	e04d      	b.n	80012a8 <handle_event+0x64c>

		case SET_FEED_PERIOD_STATE:

			switch (event) {
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	3b02      	subs	r3, #2
 8001210:	2b03      	cmp	r3, #3
 8001212:	d842      	bhi.n	800129a <handle_event+0x63e>
 8001214:	a201      	add	r2, pc, #4	@ (adr r2, 800121c <handle_event+0x5c0>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	08001249 	.word	0x08001249
 8001220:	08001273 	.word	0x08001273
 8001224:	0800122d 	.word	0x0800122d
 8001228:	08001241 	.word	0x08001241
				case ENTER_BUTTON_PRESSED_EVENT:
					setTimerInterval(feedDuration);
 800122c:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <handle_event+0x658>)
 800122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fc54 	bl	8000ae0 <setTimerInterval>
					currentState = IDLE_STATE;
 8001238:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <handle_event+0x65c>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
					break;
 800123e:	e031      	b.n	80012a4 <handle_event+0x648>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8001240:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <handle_event+0x65c>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
					break;
 8001246:	e02d      	b.n	80012a4 <handle_event+0x648>

				case UP_BUTTON_PRESSED_EVENT:
					feedDuration+=100;
 8001248:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <handle_event+0x658>)
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124e:	b29b      	uxth	r3, r3
 8001250:	3364      	adds	r3, #100	@ 0x64
 8001252:	b29b      	uxth	r3, r3
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <handle_event+0x658>)
 8001258:	801a      	strh	r2, [r3, #0]
					if(feedDuration == 10000) feedDuration = 1000;
 800125a:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <handle_event+0x658>)
 800125c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001260:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001264:	4293      	cmp	r3, r2
 8001266:	d11a      	bne.n	800129e <handle_event+0x642>
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <handle_event+0x658>)
 800126a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800126e:	801a      	strh	r2, [r3, #0]
					break;
 8001270:	e015      	b.n	800129e <handle_event+0x642>

				case DOWN_BUTTON_PRESSED_EVENT:
					feedDuration-=100;
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <handle_event+0x658>)
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	b29b      	uxth	r3, r3
 800127a:	3b64      	subs	r3, #100	@ 0x64
 800127c:	b29b      	uxth	r3, r3
 800127e:	b21a      	sxth	r2, r3
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <handle_event+0x658>)
 8001282:	801a      	strh	r2, [r3, #0]
					if(feedDuration < 1000) feedDuration = 9999;
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <handle_event+0x658>)
 8001286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800128e:	da08      	bge.n	80012a2 <handle_event+0x646>
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <handle_event+0x658>)
 8001292:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001296:	801a      	strh	r2, [r3, #0]
					break;
 8001298:	e003      	b.n	80012a2 <handle_event+0x646>

				default:

					break;
 800129a:	bf00      	nop
 800129c:	e004      	b.n	80012a8 <handle_event+0x64c>
					break;
 800129e:	bf00      	nop
 80012a0:	e002      	b.n	80012a8 <handle_event+0x64c>
					break;
 80012a2:	bf00      	nop
			}

			break;
 80012a4:	e000      	b.n	80012a8 <handle_event+0x64c>

		default:

			break;
 80012a6:	bf00      	nop
	}
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000003 	.word	0x20000003
 80012b4:	2000000a 	.word	0x2000000a
 80012b8:	2000017c 	.word	0x2000017c

080012bc <setTimeDate>:

/***********************************************/
void setTimeDate() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
/***********************************************/
	static RTC_TimeTypeDef setTime = {0};
	static RTC_DateTypeDef setDate = {0};

	setTime.Hours = selectedHour;
 80012c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <setTimeDate+0x78>)
 80012c2:	f993 3000 	ldrsb.w	r3, [r3]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <setTimeDate+0x7c>)
 80012ca:	701a      	strb	r2, [r3, #0]
	setTime.Minutes = selectedMinute;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <setTimeDate+0x80>)
 80012ce:	f993 3000 	ldrsb.w	r3, [r3]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <setTimeDate+0x7c>)
 80012d6:	705a      	strb	r2, [r3, #1]
	setTime.Seconds = selectedSecond;
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <setTimeDate+0x84>)
 80012da:	f993 3000 	ldrsb.w	r3, [r3]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <setTimeDate+0x7c>)
 80012e2:	709a      	strb	r2, [r3, #2]
	setDate.Year = selectedYear;
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <setTimeDate+0x88>)
 80012e6:	f993 3000 	ldrsb.w	r3, [r3]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <setTimeDate+0x8c>)
 80012ee:	70da      	strb	r2, [r3, #3]
	setDate.Month = selectedMonth;
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <setTimeDate+0x90>)
 80012f2:	f993 3000 	ldrsb.w	r3, [r3]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <setTimeDate+0x8c>)
 80012fa:	705a      	strb	r2, [r3, #1]
	setDate.Date = selectedDay;
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <setTimeDate+0x94>)
 80012fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <setTimeDate+0x8c>)
 8001306:	709a      	strb	r2, [r3, #2]

	if (HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BIN) != HAL_OK)
 8001308:	2200      	movs	r2, #0
 800130a:	490b      	ldr	r1, [pc, #44]	@ (8001338 <setTimeDate+0x7c>)
 800130c:	4811      	ldr	r0, [pc, #68]	@ (8001354 <setTimeDate+0x98>)
 800130e:	f002 fdc5 	bl	8003e9c <HAL_RTC_SetTime>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <setTimeDate+0x60>
	{
		Error_Handler();
 8001318:	f7ff fc9a 	bl	8000c50 <Error_Handler>
	}

	if (HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BIN) != HAL_OK)
 800131c:	2200      	movs	r2, #0
 800131e:	490a      	ldr	r1, [pc, #40]	@ (8001348 <setTimeDate+0x8c>)
 8001320:	480c      	ldr	r0, [pc, #48]	@ (8001354 <setTimeDate+0x98>)
 8001322:	f002 ff2b 	bl	800417c <HAL_RTC_SetDate>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <setTimeDate+0x74>
	{
		Error_Handler();
 800132c:	f7ff fc90 	bl	8000c50 <Error_Handler>
	}
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000180 	.word	0x20000180
 800133c:	20000001 	.word	0x20000001
 8001340:	20000002 	.word	0x20000002
 8001344:	20000003 	.word	0x20000003
 8001348:	20000184 	.word	0x20000184
 800134c:	20000004 	.word	0x20000004
 8001350:	20000005 	.word	0x20000005
 8001354:	20000088 	.word	0x20000088

08001358 <setTimeDateFromExtRTC>:

/***********************************************/
void setTimeDateFromExtRTC() {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
/***********************************************/
	uint8_t dataFromRtc[8] = {};
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
	static RTC_TimeTypeDef setTime = {0};
	static RTC_DateTypeDef setDate = {0};

	DS1302_ReadTime(&dataFromRtc);
 8001366:	463b      	mov	r3, r7
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe ffdb 	bl	8000324 <DS1302_ReadTime>
//	printf(" %02d/%02d/%02d - %02d:%02d:%02d  \n",dataFromRtc[3], dataFromRtc[2], dataFromRtc[1], dataFromRtc[4], dataFromRtc[5], dataFromRtc[6]);

	setTime.Hours = dataFromRtc[4];
 800136e:	793a      	ldrb	r2, [r7, #4]
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <setTimeDateFromExtRTC+0x6c>)
 8001372:	701a      	strb	r2, [r3, #0]
	setTime.Minutes = dataFromRtc[5];
 8001374:	797a      	ldrb	r2, [r7, #5]
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <setTimeDateFromExtRTC+0x6c>)
 8001378:	705a      	strb	r2, [r3, #1]
	setTime.Seconds = dataFromRtc[6];
 800137a:	79ba      	ldrb	r2, [r7, #6]
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <setTimeDateFromExtRTC+0x6c>)
 800137e:	709a      	strb	r2, [r3, #2]
	setDate.Year = dataFromRtc[1];
 8001380:	787a      	ldrb	r2, [r7, #1]
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <setTimeDateFromExtRTC+0x70>)
 8001384:	70da      	strb	r2, [r3, #3]
	setDate.Month = dataFromRtc[2];
 8001386:	78ba      	ldrb	r2, [r7, #2]
 8001388:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <setTimeDateFromExtRTC+0x70>)
 800138a:	705a      	strb	r2, [r3, #1]
	setDate.Date = dataFromRtc[3];
 800138c:	78fa      	ldrb	r2, [r7, #3]
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <setTimeDateFromExtRTC+0x70>)
 8001390:	709a      	strb	r2, [r3, #2]

	if (HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BIN) != HAL_OK)
 8001392:	2200      	movs	r2, #0
 8001394:	490b      	ldr	r1, [pc, #44]	@ (80013c4 <setTimeDateFromExtRTC+0x6c>)
 8001396:	480d      	ldr	r0, [pc, #52]	@ (80013cc <setTimeDateFromExtRTC+0x74>)
 8001398:	f002 fd80 	bl	8003e9c <HAL_RTC_SetTime>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <setTimeDateFromExtRTC+0x4e>
	{
		Error_Handler();
 80013a2:	f7ff fc55 	bl	8000c50 <Error_Handler>
	}

	if (HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BIN) != HAL_OK)
 80013a6:	2200      	movs	r2, #0
 80013a8:	4907      	ldr	r1, [pc, #28]	@ (80013c8 <setTimeDateFromExtRTC+0x70>)
 80013aa:	4808      	ldr	r0, [pc, #32]	@ (80013cc <setTimeDateFromExtRTC+0x74>)
 80013ac:	f002 fee6 	bl	800417c <HAL_RTC_SetDate>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <setTimeDateFromExtRTC+0x62>
	{
		Error_Handler();
 80013b6:	f7ff fc4b 	bl	8000c50 <Error_Handler>
	}
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000188 	.word	0x20000188
 80013c8:	2000018c 	.word	0x2000018c
 80013cc:	20000088 	.word	0x20000088

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_MspInit+0x5c>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4a14      	ldr	r2, [pc, #80]	@ (800142c <HAL_MspInit+0x5c>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6193      	str	r3, [r2, #24]
 80013e2:	4b12      	ldr	r3, [pc, #72]	@ (800142c <HAL_MspInit+0x5c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <HAL_MspInit+0x5c>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a0e      	ldr	r2, [pc, #56]	@ (800142c <HAL_MspInit+0x5c>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <HAL_MspInit+0x5c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <HAL_MspInit+0x60>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	4a04      	ldr	r2, [pc, #16]	@ (8001430 <HAL_MspInit+0x60>)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40021000 	.word	0x40021000
 8001430:	40010000 	.word	0x40010000

08001434 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	@ 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1d      	ldr	r2, [pc, #116]	@ (80014c4 <HAL_I2C_MspInit+0x90>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d132      	bne.n	80014ba <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001454:	4b1c      	ldr	r3, [pc, #112]	@ (80014c8 <HAL_I2C_MspInit+0x94>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a1b      	ldr	r2, [pc, #108]	@ (80014c8 <HAL_I2C_MspInit+0x94>)
 800145a:	f043 0308 	orr.w	r3, r3, #8
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <HAL_I2C_MspInit+0x94>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800146c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001472:	2312      	movs	r3, #18
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4812      	ldr	r0, [pc, #72]	@ (80014cc <HAL_I2C_MspInit+0x98>)
 8001482:	f001 f885 	bl	8002590 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001486:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_I2C_MspInit+0x9c>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
 800149c:	4a0c      	ldr	r2, [pc, #48]	@ (80014d0 <HAL_I2C_MspInit+0x9c>)
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_I2C_MspInit+0x94>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <HAL_I2C_MspInit+0x94>)
 80014a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_I2C_MspInit+0x94>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	@ 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40005400 	.word	0x40005400
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	40010000 	.word	0x40010000

080014d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001510 <HAL_RTC_MspInit+0x3c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d110      	bne.n	8001508 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80014e6:	f001 fec5 	bl	8003274 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80014ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <HAL_RTC_MspInit+0x40>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a09      	ldr	r2, [pc, #36]	@ (8001514 <HAL_RTC_MspInit+0x40>)
 80014f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <HAL_RTC_MspInit+0x40>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001502:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <HAL_RTC_MspInit+0x44>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40002800 	.word	0x40002800
 8001514:	40021000 	.word	0x40021000
 8001518:	4242043c 	.word	0x4242043c

0800151c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800152c:	d114      	bne.n	8001558 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800152e:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <HAL_TIM_Base_MspInit+0x78>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a18      	ldr	r2, [pc, #96]	@ (8001594 <HAL_TIM_Base_MspInit+0x78>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <HAL_TIM_Base_MspInit+0x78>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	201c      	movs	r0, #28
 800154c:	f000 ffe9 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001550:	201c      	movs	r0, #28
 8001552:	f001 f802 	bl	800255a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001556:	e018      	b.n	800158a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0e      	ldr	r2, [pc, #56]	@ (8001598 <HAL_TIM_Base_MspInit+0x7c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d113      	bne.n	800158a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001562:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <HAL_TIM_Base_MspInit+0x78>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <HAL_TIM_Base_MspInit+0x78>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <HAL_TIM_Base_MspInit+0x78>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	201d      	movs	r0, #29
 8001580:	f000 ffcf 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001584:	201d      	movs	r0, #29
 8001586:	f000 ffe8 	bl	800255a <HAL_NVIC_EnableIRQ>
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	40000400 	.word	0x40000400

0800159c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001624 <HAL_UART_MspInit+0x88>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d12f      	bne.n	800161c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <HAL_UART_MspInit+0x8c>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	4a19      	ldr	r2, [pc, #100]	@ (8001628 <HAL_UART_MspInit+0x8c>)
 80015c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c6:	61d3      	str	r3, [r2, #28]
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <HAL_UART_MspInit+0x8c>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <HAL_UART_MspInit+0x8c>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a13      	ldr	r2, [pc, #76]	@ (8001628 <HAL_UART_MspInit+0x8c>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <HAL_UART_MspInit+0x8c>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ec:	2304      	movs	r3, #4
 80015ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	480b      	ldr	r0, [pc, #44]	@ (800162c <HAL_UART_MspInit+0x90>)
 8001600:	f000 ffc6 	bl	8002590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001604:	2308      	movs	r3, #8
 8001606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	4619      	mov	r1, r3
 8001616:	4805      	ldr	r0, [pc, #20]	@ (800162c <HAL_UART_MspInit+0x90>)
 8001618:	f000 ffba 	bl	8002590 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800161c:	bf00      	nop
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40004400 	.word	0x40004400
 8001628:	40021000 	.word	0x40021000
 800162c:	40010800 	.word	0x40010800

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <NMI_Handler+0x4>

08001638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <MemManage_Handler+0x4>

08001648 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <BusFault_Handler+0x4>

08001650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <UsageFault_Handler+0x4>

08001658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001680:	f000 fe38 	bl	80022f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <TIM2_IRQHandler+0x10>)
 800168e:	f003 f9f1 	bl	8004a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000009c 	.word	0x2000009c

0800169c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <TIM3_IRQHandler+0x10>)
 80016a2:	f003 f9e7 	bl	8004a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200000e4 	.word	0x200000e4

080016b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016b8:	f001 f91e 	bl	80028f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <itoa>:
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
    return ch;
}

/***********************************************/
char* itoa(int i, char b[]) {
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	@ 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
/***********************************************/

	char const digit[] = "0123456789";
 80016d6:	4a28      	ldr	r2, [pc, #160]	@ (8001778 <itoa+0xac>)
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80016de:	c303      	stmia	r3!, {r0, r1}
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	3302      	adds	r3, #2
 80016e4:	0c12      	lsrs	r2, r2, #16
 80016e6:	701a      	strb	r2, [r3, #0]
	char *p = b;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	61fb      	str	r3, [r7, #28]
	if (i < 0) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	da07      	bge.n	8001702 <itoa+0x36>
		*p++ = '-';
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	61fa      	str	r2, [r7, #28]
 80016f8:	222d      	movs	r2, #45	@ 0x2d
 80016fa:	701a      	strb	r2, [r3, #0]
		i *= -1;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	425b      	negs	r3, r3
 8001700:	607b      	str	r3, [r7, #4]
	}
	int shifter = i;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	61bb      	str	r3, [r7, #24]
	do { //Move to where representation ends
		++p;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3301      	adds	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
		shifter = shifter / 10;
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	4a1b      	ldr	r2, [pc, #108]	@ (800177c <itoa+0xb0>)
 8001710:	fb82 1203 	smull	r1, r2, r2, r3
 8001714:	1092      	asrs	r2, r2, #2
 8001716:	17db      	asrs	r3, r3, #31
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	61bb      	str	r3, [r7, #24]
	} while (shifter);
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f1      	bne.n	8001706 <itoa+0x3a>
	*p = '\0';
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
	do { //Move back, inserting digits as u go
		*--p = digit[i % 10];
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <itoa+0xb0>)
 800172c:	fb83 2301 	smull	r2, r3, r3, r1
 8001730:	109a      	asrs	r2, r3, #2
 8001732:	17cb      	asrs	r3, r1, #31
 8001734:	1ad2      	subs	r2, r2, r3
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	1aca      	subs	r2, r1, r3
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	3b01      	subs	r3, #1
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	f102 0320 	add.w	r3, r2, #32
 800174a:	443b      	add	r3, r7
 800174c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	701a      	strb	r2, [r3, #0]
		i = i / 10;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a09      	ldr	r2, [pc, #36]	@ (800177c <itoa+0xb0>)
 8001758:	fb82 1203 	smull	r1, r2, r2, r3
 800175c:	1092      	asrs	r2, r2, #2
 800175e:	17db      	asrs	r3, r3, #31
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	607b      	str	r3, [r7, #4]
	} while (i);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1de      	bne.n	8001728 <itoa+0x5c>
	return b;
 800176a:	683b      	ldr	r3, [r7, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3724      	adds	r7, #36	@ 0x24
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	08005340 	.word	0x08005340
 800177c:	66666667 	.word	0x66666667

08001780 <showDateAndTime>:

/***********************************************/
void showDateAndTime() {
 8001780:	b580      	push	{r7, lr}
 8001782:	b096      	sub	sp, #88	@ 0x58
 8001784:	af00      	add	r7, sp, #0
/***********************************************/

	//  --------RTC CLOCK------  //
	RTC_TimeTypeDef TempsTime = { 0 };
 8001786:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800178a:	2100      	movs	r1, #0
 800178c:	460a      	mov	r2, r1
 800178e:	801a      	strh	r2, [r3, #0]
 8001790:	460a      	mov	r2, r1
 8001792:	709a      	strb	r2, [r3, #2]
	int8_t Tsec;
	char tempHours[10];
	char tempMin[10];
	char tempSec[10];
	//  --------RTC DATE-------  //
	RTC_DateTypeDef TempDateToUpdate = { 0 };
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
	char tempYear[10];
	char tempMonth[10];
	char tempDate[10];


	HAL_RTC_GetTime(&hrtc, &TempsTime, RTC_FORMAT_BIN);
 8001798:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800179c:	2200      	movs	r2, #0
 800179e:	4619      	mov	r1, r3
 80017a0:	487c      	ldr	r0, [pc, #496]	@ (8001994 <showDateAndTime+0x214>)
 80017a2:	f002 fc13 	bl	8003fcc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &TempDateToUpdate, RTC_FORMAT_BIN);
 80017a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017aa:	2200      	movs	r2, #0
 80017ac:	4619      	mov	r1, r3
 80017ae:	4879      	ldr	r0, [pc, #484]	@ (8001994 <showDateAndTime+0x214>)
 80017b0:	f002 fd9a 	bl	80042e8 <HAL_RTC_GetDate>

	// ---- Time ---- //
	// Hours
	// -------------- //
	Thours = TempsTime.Hours;
 80017b4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80017b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	itoa(Thours, tempHours);
 80017bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80017c0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff80 	bl	80016cc <itoa>
	if (Thours < 10) {
 80017cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80017d0:	2b09      	cmp	r3, #9
 80017d2:	dc0e      	bgt.n	80017f2 <showDateAndTime+0x72>
		lcd_send_cmd(0x80 | 0x00);
 80017d4:	2080      	movs	r0, #128	@ 0x80
 80017d6:	f7fe fe63 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 80017da:	486f      	ldr	r0, [pc, #444]	@ (8001998 <showDateAndTime+0x218>)
 80017dc:	f7fe ff11 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x01);
 80017e0:	2081      	movs	r0, #129	@ 0x81
 80017e2:	f7fe fe5d 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempHours);
 80017e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe ff09 	bl	8000602 <lcd_send_string>
 80017f0:	e007      	b.n	8001802 <showDateAndTime+0x82>
	} else {
		lcd_send_cmd(0x80 | 0x00);
 80017f2:	2080      	movs	r0, #128	@ 0x80
 80017f4:	f7fe fe54 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempHours);
 80017f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe ff00 	bl	8000602 <lcd_send_string>
	}
	lcd_send_cmd(0x80 | 0x02);
 8001802:	2082      	movs	r0, #130	@ 0x82
 8001804:	f7fe fe4c 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string(":");
 8001808:	4864      	ldr	r0, [pc, #400]	@ (800199c <showDateAndTime+0x21c>)
 800180a:	f7fe fefa 	bl	8000602 <lcd_send_string>
	// Minute
	// -------------- //
	Tmin = TempsTime.Minutes;
 800180e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001812:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	itoa(Tmin, tempMin);
 8001816:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 800181a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff53 	bl	80016cc <itoa>
	if (Tmin < 10) {
 8001826:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 800182a:	2b09      	cmp	r3, #9
 800182c:	dc0e      	bgt.n	800184c <showDateAndTime+0xcc>
		lcd_send_cmd(0x80 | 0x03);
 800182e:	2083      	movs	r0, #131	@ 0x83
 8001830:	f7fe fe36 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 8001834:	4858      	ldr	r0, [pc, #352]	@ (8001998 <showDateAndTime+0x218>)
 8001836:	f7fe fee4 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x04);
 800183a:	2084      	movs	r0, #132	@ 0x84
 800183c:	f7fe fe30 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempMin);
 8001840:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fedc 	bl	8000602 <lcd_send_string>
 800184a:	e007      	b.n	800185c <showDateAndTime+0xdc>
	} else {
		lcd_send_cmd(0x80 | 0x03);
 800184c:	2083      	movs	r0, #131	@ 0x83
 800184e:	f7fe fe27 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempMin);
 8001852:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fed3 	bl	8000602 <lcd_send_string>
	}
	lcd_send_cmd(0x80 | 0x05);
 800185c:	2085      	movs	r0, #133	@ 0x85
 800185e:	f7fe fe1f 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string(":");
 8001862:	484e      	ldr	r0, [pc, #312]	@ (800199c <showDateAndTime+0x21c>)
 8001864:	f7fe fecd 	bl	8000602 <lcd_send_string>
	// Second
	// -------------- //
	Tsec = TempsTime.Seconds;
 8001868:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800186c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	itoa(Tsec, tempSec);
 8001870:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 8001874:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff26 	bl	80016cc <itoa>
	if (Tsec < 10) {
 8001880:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 8001884:	2b09      	cmp	r3, #9
 8001886:	dc0e      	bgt.n	80018a6 <showDateAndTime+0x126>
		lcd_send_cmd(0x80 | 0x06);
 8001888:	2086      	movs	r0, #134	@ 0x86
 800188a:	f7fe fe09 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 800188e:	4842      	ldr	r0, [pc, #264]	@ (8001998 <showDateAndTime+0x218>)
 8001890:	f7fe feb7 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x07);
 8001894:	2087      	movs	r0, #135	@ 0x87
 8001896:	f7fe fe03 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempSec);
 800189a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe feaf 	bl	8000602 <lcd_send_string>
 80018a4:	e007      	b.n	80018b6 <showDateAndTime+0x136>
	} else {
		lcd_send_cmd(0x80 | 0x06);
 80018a6:	2086      	movs	r0, #134	@ 0x86
 80018a8:	f7fe fdfa 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempSec);
 80018ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fea6 	bl	8000602 <lcd_send_string>
	}
	// -------------- //
	// ---- date ---- //
	// -------------- //
	Tdate = TempDateToUpdate.Date;
 80018b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018ba:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	itoa(Tdate, tempDate);
 80018be:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 80018c2:	463a      	mov	r2, r7
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff00 	bl	80016cc <itoa>
	if (Tdate < 10) {
 80018cc:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 80018d0:	2b09      	cmp	r3, #9
 80018d2:	dc0d      	bgt.n	80018f0 <showDateAndTime+0x170>
		lcd_send_cmd(0x80 | 0x0C);
 80018d4:	208c      	movs	r0, #140	@ 0x8c
 80018d6:	f7fe fde3 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 80018da:	482f      	ldr	r0, [pc, #188]	@ (8001998 <showDateAndTime+0x218>)
 80018dc:	f7fe fe91 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x0D);
 80018e0:	208d      	movs	r0, #141	@ 0x8d
 80018e2:	f7fe fddd 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempDate);
 80018e6:	463b      	mov	r3, r7
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fe8a 	bl	8000602 <lcd_send_string>
 80018ee:	e006      	b.n	80018fe <showDateAndTime+0x17e>
	} else {
		lcd_send_cmd(0x80 | 0x0C);
 80018f0:	208c      	movs	r0, #140	@ 0x8c
 80018f2:	f7fe fdd5 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempDate);
 80018f6:	463b      	mov	r3, r7
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe82 	bl	8000602 <lcd_send_string>
	}
	lcd_send_cmd(0x80 | 0x0E);
 80018fe:	208e      	movs	r0, #142	@ 0x8e
 8001900:	f7fe fdce 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("/");
 8001904:	4826      	ldr	r0, [pc, #152]	@ (80019a0 <showDateAndTime+0x220>)
 8001906:	f7fe fe7c 	bl	8000602 <lcd_send_string>
	// month
	// -------------- //
	Tmonth = TempDateToUpdate.Month;
 800190a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800190e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	itoa(Tmonth, tempMonth);
 8001912:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8001916:	f107 020c 	add.w	r2, r7, #12
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fed5 	bl	80016cc <itoa>
	if (Tmonth < 10) {
 8001922:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8001926:	2b09      	cmp	r3, #9
 8001928:	dc0e      	bgt.n	8001948 <showDateAndTime+0x1c8>
		lcd_send_cmd(0x80 | 0x0F);
 800192a:	208f      	movs	r0, #143	@ 0x8f
 800192c:	f7fe fdb8 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 8001930:	4819      	ldr	r0, [pc, #100]	@ (8001998 <showDateAndTime+0x218>)
 8001932:	f7fe fe66 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x10);
 8001936:	2090      	movs	r0, #144	@ 0x90
 8001938:	f7fe fdb2 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempMonth);
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fe5e 	bl	8000602 <lcd_send_string>
 8001946:	e007      	b.n	8001958 <showDateAndTime+0x1d8>
	} else {
		lcd_send_cmd(0x80 | 0x0F);
 8001948:	208f      	movs	r0, #143	@ 0x8f
 800194a:	f7fe fda9 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempMonth);
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe55 	bl	8000602 <lcd_send_string>
	}
	lcd_send_cmd(0x80 | 0x11);
 8001958:	2091      	movs	r0, #145	@ 0x91
 800195a:	f7fe fda1 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("/");
 800195e:	4810      	ldr	r0, [pc, #64]	@ (80019a0 <showDateAndTime+0x220>)
 8001960:	f7fe fe4f 	bl	8000602 <lcd_send_string>
	// year
	// -------------- //
	Tyear = TempDateToUpdate.Year;
 8001964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001968:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	itoa(Tyear, tempYear);
 800196c:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 8001970:	f107 0218 	add.w	r2, r7, #24
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fea8 	bl	80016cc <itoa>
	lcd_send_cmd(0x80 | 0x12);
 800197c:	2092      	movs	r0, #146	@ 0x92
 800197e:	f7fe fd8f 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string(tempYear);
 8001982:	f107 0318 	add.w	r3, r7, #24
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fe3b 	bl	8000602 <lcd_send_string>
}
 800198c:	bf00      	nop
 800198e:	3758      	adds	r7, #88	@ 0x58
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000088 	.word	0x20000088
 8001998:	0800534c 	.word	0x0800534c
 800199c:	08005350 	.word	0x08005350
 80019a0:	08005354 	.word	0x08005354

080019a4 <handleLCDMonitor>:
		handle_event(ENTER_BUTTON_PRESSED_EVENT);
	}
}

/***********************************************/
void handleLCDMonitor() {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
/***********************************************/
	if(lastState != currentState) {
 80019a8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a5c <handleLCDMonitor+0xb8>)
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001a60 <handleLCDMonitor+0xbc>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <handleLCDMonitor+0x14>
		lcd_clear();
 80019b4:	f7fe fdd4 	bl	8000560 <lcd_clear>
	}
	lastState = currentState;
 80019b8:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <handleLCDMonitor+0xbc>)
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <handleLCDMonitor+0xb8>)
 80019be:	701a      	strb	r2, [r3, #0]

	showDateAndTime();
 80019c0:	f7ff fede 	bl	8001780 <showDateAndTime>
	switch(currentState) {
 80019c4:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <handleLCDMonitor+0xbc>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d844      	bhi.n	8001a56 <handleLCDMonitor+0xb2>
 80019cc:	a201      	add	r2, pc, #4	@ (adr r2, 80019d4 <handleLCDMonitor+0x30>)
 80019ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d2:	bf00      	nop
 80019d4:	08001a09 	.word	0x08001a09
 80019d8:	08001a0f 	.word	0x08001a0f
 80019dc:	08001a15 	.word	0x08001a15
 80019e0:	08001a1b 	.word	0x08001a1b
 80019e4:	08001a21 	.word	0x08001a21
 80019e8:	08001a27 	.word	0x08001a27
 80019ec:	08001a2d 	.word	0x08001a2d
 80019f0:	08001a33 	.word	0x08001a33
 80019f4:	08001a39 	.word	0x08001a39
 80019f8:	08001a4b 	.word	0x08001a4b
 80019fc:	08001a45 	.word	0x08001a45
 8001a00:	08001a3f 	.word	0x08001a3f
 8001a04:	08001a51 	.word	0x08001a51

		case IDLE_STATE:
			handleIdleLCDMonitor();
 8001a08:	f000 f82c 	bl	8001a64 <handleIdleLCDMonitor>
			break;
 8001a0c:	e024      	b.n	8001a58 <handleLCDMonitor+0xb4>

		case FEED_STATE:
			handleFeedLCDMonitor();
 8001a0e:	f000 f8bb 	bl	8001b88 <handleFeedLCDMonitor>
			break;
 8001a12:	e021      	b.n	8001a58 <handleLCDMonitor+0xb4>

		case MAIN_MANU_STATE:
			handleMainManuLCDMonitor();
 8001a14:	f000 f8d4 	bl	8001bc0 <handleMainManuLCDMonitor>
			break;
 8001a18:	e01e      	b.n	8001a58 <handleLCDMonitor+0xb4>

		case SET_HOUR_FEED_STATE:
			handleFeedHourLCDMonitor();
 8001a1a:	f000 f8ed 	bl	8001bf8 <handleFeedHourLCDMonitor>
			break;
 8001a1e:	e01b      	b.n	8001a58 <handleLCDMonitor+0xb4>

		case SET_MINUTE_FEED_STATE:
			handleFeedMinuteLCDMonitor();
 8001a20:	f000 f900 	bl	8001c24 <handleFeedMinuteLCDMonitor>
			break;
 8001a24:	e018      	b.n	8001a58 <handleLCDMonitor+0xb4>

		case SET_SECOND_FEED_STATE:
			handleFeedSecondLCDMonitor();
 8001a26:	f000 f913 	bl	8001c50 <handleFeedSecondLCDMonitor>
			break;
 8001a2a:	e015      	b.n	8001a58 <handleLCDMonitor+0xb4>

		case SET_HOUR_TIME_STATE:
			handleTimeHourLCDMonitor();
 8001a2c:	f000 f926 	bl	8001c7c <handleTimeHourLCDMonitor>
			break;
 8001a30:	e012      	b.n	8001a58 <handleLCDMonitor+0xb4>

		case SET_MINUTE_TIME_STATE:
			handleTimeMinuteLCDMonitor();
 8001a32:	f000 f939 	bl	8001ca8 <handleTimeMinuteLCDMonitor>
			break;
 8001a36:	e00f      	b.n	8001a58 <handleLCDMonitor+0xb4>

		case SET_SECOND_TIME_STATE:
			handleTimeSecondLCDMonitor();
 8001a38:	f000 f94c 	bl	8001cd4 <handleTimeSecondLCDMonitor>
			break;
 8001a3c:	e00c      	b.n	8001a58 <handleLCDMonitor+0xb4>

		case SET_DAY_STATE:
			handleDayLCDMonitor();
 8001a3e:	f000 f9f3 	bl	8001e28 <handleDayLCDMonitor>
			break;
 8001a42:	e009      	b.n	8001a58 <handleLCDMonitor+0xb4>

		case SET_MONTH_STATE:
			handleMonthLCDMonitor();
 8001a44:	f000 f9da 	bl	8001dfc <handleMonthLCDMonitor>
			break;
 8001a48:	e006      	b.n	8001a58 <handleLCDMonitor+0xb4>

		case SET_YEAR_STATE:
			handleYearLCDMonitor();
 8001a4a:	f000 f9c1 	bl	8001dd0 <handleYearLCDMonitor>
			break;
 8001a4e:	e003      	b.n	8001a58 <handleLCDMonitor+0xb4>

		case SET_FEED_PERIOD_STATE:
			handleFeedPeriodLCDMonitor();
 8001a50:	f000 f956 	bl	8001d00 <handleFeedPeriodLCDMonitor>
			break;
 8001a54:	e000      	b.n	8001a58 <handleLCDMonitor+0xb4>

		default:

			break;
 8001a56:	bf00      	nop
	}
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000017d 	.word	0x2000017d
 8001a60:	2000017c 	.word	0x2000017c

08001a64 <handleIdleLCDMonitor>:

/***********************************************/
void handleIdleLCDMonitor()
/***********************************************/
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	static char temp[20] = "\0";
	lcd_send_cmd(0x80|0x41);
 8001a68:	20c1      	movs	r0, #193	@ 0xc1
 8001a6a:	f7fe fd19 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Milka & Tinkerbell");
 8001a6e:	483d      	ldr	r0, [pc, #244]	@ (8001b64 <handleIdleLCDMonitor+0x100>)
 8001a70:	f7fe fdc7 	bl	8000602 <lcd_send_string>
	lcd_send_cmd(0x80|0x1B);
 8001a74:	209b      	movs	r0, #155	@ 0x9b
 8001a76:	f7fe fd13 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Feeder");
 8001a7a:	483b      	ldr	r0, [pc, #236]	@ (8001b68 <handleIdleLCDMonitor+0x104>)
 8001a7c:	f7fe fdc1 	bl	8000602 <lcd_send_string>

	lcd_send_cmd(0x80|0x54);
 8001a80:	20d4      	movs	r0, #212	@ 0xd4
 8001a82:	f7fe fd0d 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Next Feed:");
 8001a86:	4839      	ldr	r0, [pc, #228]	@ (8001b6c <handleIdleLCDMonitor+0x108>)
 8001a88:	f7fe fdbb 	bl	8000602 <lcd_send_string>

	itoa(selectedFeedHour, temp);
 8001a8c:	4b38      	ldr	r3, [pc, #224]	@ (8001b70 <handleIdleLCDMonitor+0x10c>)
 8001a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a92:	4938      	ldr	r1, [pc, #224]	@ (8001b74 <handleIdleLCDMonitor+0x110>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fe19 	bl	80016cc <itoa>
	if(selectedFeedHour<10){
 8001a9a:	4b35      	ldr	r3, [pc, #212]	@ (8001b70 <handleIdleLCDMonitor+0x10c>)
 8001a9c:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa0:	2b09      	cmp	r3, #9
 8001aa2:	dc0c      	bgt.n	8001abe <handleIdleLCDMonitor+0x5a>
		lcd_send_cmd(0x80|0x5F);
 8001aa4:	20df      	movs	r0, #223	@ 0xdf
 8001aa6:	f7fe fcfb 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 8001aaa:	4833      	ldr	r0, [pc, #204]	@ (8001b78 <handleIdleLCDMonitor+0x114>)
 8001aac:	f7fe fda9 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80|0x60);
 8001ab0:	20e0      	movs	r0, #224	@ 0xe0
 8001ab2:	f7fe fcf5 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(temp);
 8001ab6:	482f      	ldr	r0, [pc, #188]	@ (8001b74 <handleIdleLCDMonitor+0x110>)
 8001ab8:	f7fe fda3 	bl	8000602 <lcd_send_string>
 8001abc:	e005      	b.n	8001aca <handleIdleLCDMonitor+0x66>
	}
	else{
		lcd_send_cmd(0x80|0x5F);
 8001abe:	20df      	movs	r0, #223	@ 0xdf
 8001ac0:	f7fe fcee 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(temp);
 8001ac4:	482b      	ldr	r0, [pc, #172]	@ (8001b74 <handleIdleLCDMonitor+0x110>)
 8001ac6:	f7fe fd9c 	bl	8000602 <lcd_send_string>
	}
	lcd_send_cmd(0x80|0x61);
 8001aca:	20e1      	movs	r0, #225	@ 0xe1
 8001acc:	f7fe fce8 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string(":");
 8001ad0:	482a      	ldr	r0, [pc, #168]	@ (8001b7c <handleIdleLCDMonitor+0x118>)
 8001ad2:	f7fe fd96 	bl	8000602 <lcd_send_string>

	itoa(selectedFeedMinute, temp);
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <handleIdleLCDMonitor+0x11c>)
 8001ad8:	f993 3000 	ldrsb.w	r3, [r3]
 8001adc:	4925      	ldr	r1, [pc, #148]	@ (8001b74 <handleIdleLCDMonitor+0x110>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fdf4 	bl	80016cc <itoa>
	if(selectedFeedMinute<10){
 8001ae4:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <handleIdleLCDMonitor+0x11c>)
 8001ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8001aea:	2b09      	cmp	r3, #9
 8001aec:	dc0c      	bgt.n	8001b08 <handleIdleLCDMonitor+0xa4>
		lcd_send_cmd(0x80|0x62);
 8001aee:	20e2      	movs	r0, #226	@ 0xe2
 8001af0:	f7fe fcd6 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 8001af4:	4820      	ldr	r0, [pc, #128]	@ (8001b78 <handleIdleLCDMonitor+0x114>)
 8001af6:	f7fe fd84 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80|0x63);
 8001afa:	20e3      	movs	r0, #227	@ 0xe3
 8001afc:	f7fe fcd0 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(temp);
 8001b00:	481c      	ldr	r0, [pc, #112]	@ (8001b74 <handleIdleLCDMonitor+0x110>)
 8001b02:	f7fe fd7e 	bl	8000602 <lcd_send_string>
 8001b06:	e005      	b.n	8001b14 <handleIdleLCDMonitor+0xb0>
	}
	else{
		lcd_send_cmd(0x80|0x62);
 8001b08:	20e2      	movs	r0, #226	@ 0xe2
 8001b0a:	f7fe fcc9 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(temp);
 8001b0e:	4819      	ldr	r0, [pc, #100]	@ (8001b74 <handleIdleLCDMonitor+0x110>)
 8001b10:	f7fe fd77 	bl	8000602 <lcd_send_string>
	}
	lcd_send_cmd(0x80|0x64);
 8001b14:	20e4      	movs	r0, #228	@ 0xe4
 8001b16:	f7fe fcc3 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string(":");
 8001b1a:	4818      	ldr	r0, [pc, #96]	@ (8001b7c <handleIdleLCDMonitor+0x118>)
 8001b1c:	f7fe fd71 	bl	8000602 <lcd_send_string>

	itoa(selectedFeedSecond, temp);
 8001b20:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <handleIdleLCDMonitor+0x120>)
 8001b22:	f993 3000 	ldrsb.w	r3, [r3]
 8001b26:	4913      	ldr	r1, [pc, #76]	@ (8001b74 <handleIdleLCDMonitor+0x110>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fdcf 	bl	80016cc <itoa>
	if(selectedFeedSecond<10){
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <handleIdleLCDMonitor+0x120>)
 8001b30:	f993 3000 	ldrsb.w	r3, [r3]
 8001b34:	2b09      	cmp	r3, #9
 8001b36:	dc0c      	bgt.n	8001b52 <handleIdleLCDMonitor+0xee>
		lcd_send_cmd(0x80|0x65);
 8001b38:	20e5      	movs	r0, #229	@ 0xe5
 8001b3a:	f7fe fcb1 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 8001b3e:	480e      	ldr	r0, [pc, #56]	@ (8001b78 <handleIdleLCDMonitor+0x114>)
 8001b40:	f7fe fd5f 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80|0x66);
 8001b44:	20e6      	movs	r0, #230	@ 0xe6
 8001b46:	f7fe fcab 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(temp);
 8001b4a:	480a      	ldr	r0, [pc, #40]	@ (8001b74 <handleIdleLCDMonitor+0x110>)
 8001b4c:	f7fe fd59 	bl	8000602 <lcd_send_string>
	}
	else{
		lcd_send_cmd(0x80|0x65);
		lcd_send_string(temp);
	}
}
 8001b50:	e005      	b.n	8001b5e <handleIdleLCDMonitor+0xfa>
		lcd_send_cmd(0x80|0x65);
 8001b52:	20e5      	movs	r0, #229	@ 0xe5
 8001b54:	f7fe fca4 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(temp);
 8001b58:	4806      	ldr	r0, [pc, #24]	@ (8001b74 <handleIdleLCDMonitor+0x110>)
 8001b5a:	f7fe fd52 	bl	8000602 <lcd_send_string>
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	08005358 	.word	0x08005358
 8001b68:	0800536c 	.word	0x0800536c
 8001b6c:	08005374 	.word	0x08005374
 8001b70:	20000006 	.word	0x20000006
 8001b74:	20000190 	.word	0x20000190
 8001b78:	0800534c 	.word	0x0800534c
 8001b7c:	08005350 	.word	0x08005350
 8001b80:	20000007 	.word	0x20000007
 8001b84:	20000008 	.word	0x20000008

08001b88 <handleFeedLCDMonitor>:

/***********************************************/
void handleFeedLCDMonitor()
/***********************************************/
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x40);
 8001b8c:	20c0      	movs	r0, #192	@ 0xc0
 8001b8e:	f7fe fc87 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("*   Feeding Now    *");
 8001b92:	4808      	ldr	r0, [pc, #32]	@ (8001bb4 <handleFeedLCDMonitor+0x2c>)
 8001b94:	f7fe fd35 	bl	8000602 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x14);
 8001b98:	2094      	movs	r0, #148	@ 0x94
 8001b9a:	f7fe fc81 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("*    (=^'.'^=)     *");
 8001b9e:	4806      	ldr	r0, [pc, #24]	@ (8001bb8 <handleFeedLCDMonitor+0x30>)
 8001ba0:	f7fe fd2f 	bl	8000602 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x54);
 8001ba4:	20d4      	movs	r0, #212	@ 0xd4
 8001ba6:	f7fe fc7b 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("********************");
 8001baa:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <handleFeedLCDMonitor+0x34>)
 8001bac:	f7fe fd29 	bl	8000602 <lcd_send_string>
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	08005380 	.word	0x08005380
 8001bb8:	08005398 	.word	0x08005398
 8001bbc:	080053b0 	.word	0x080053b0

08001bc0 <handleMainManuLCDMonitor>:

/***********************************************/
void handleMainManuLCDMonitor()
/***********************************************/
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001bc4:	20c0      	movs	r0, #192	@ 0xc0
 8001bc6:	f7fe fc6b 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Down - Set Time");
 8001bca:	4808      	ldr	r0, [pc, #32]	@ (8001bec <handleMainManuLCDMonitor+0x2c>)
 8001bcc:	f7fe fd19 	bl	8000602 <lcd_send_string>
	lcd_send_cmd(0x80|0x14);
 8001bd0:	2094      	movs	r0, #148	@ 0x94
 8001bd2:	f7fe fc65 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Up   - Set Feed Time");
 8001bd6:	4806      	ldr	r0, [pc, #24]	@ (8001bf0 <handleMainManuLCDMonitor+0x30>)
 8001bd8:	f7fe fd13 	bl	8000602 <lcd_send_string>
	lcd_send_cmd(0x80|0x54);
 8001bdc:	20d4      	movs	r0, #212	@ 0xd4
 8001bde:	f7fe fc5f 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("ENT  - Feed Duration");
 8001be2:	4804      	ldr	r0, [pc, #16]	@ (8001bf4 <handleMainManuLCDMonitor+0x34>)
 8001be4:	f7fe fd0d 	bl	8000602 <lcd_send_string>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	080053c8 	.word	0x080053c8
 8001bf0:	080053d8 	.word	0x080053d8
 8001bf4:	080053f0 	.word	0x080053f0

08001bf8 <handleFeedHourLCDMonitor>:

/***********************************************/
void handleFeedHourLCDMonitor()
/***********************************************/
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001bfc:	20c0      	movs	r0, #192	@ 0xc0
 8001bfe:	f7fe fc4f 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Choose Feed Hour");
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <handleFeedHourLCDMonitor+0x24>)
 8001c04:	f7fe fcfd 	bl	8000602 <lcd_send_string>

	showSelectedFeedTime();
 8001c08:	f000 f9aa 	bl	8001f60 <showSelectedFeedTime>

	lcd_send_cmd(0x80|0x54);
 8001c0c:	20d4      	movs	r0, #212	@ 0xd4
 8001c0e:	f7fe fc47 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001c12:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <handleFeedHourLCDMonitor+0x28>)
 8001c14:	f7fe fcf5 	bl	8000602 <lcd_send_string>
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	08005408 	.word	0x08005408
 8001c20:	0800541c 	.word	0x0800541c

08001c24 <handleFeedMinuteLCDMonitor>:

/***********************************************/
void handleFeedMinuteLCDMonitor()
/***********************************************/
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001c28:	20c0      	movs	r0, #192	@ 0xc0
 8001c2a:	f7fe fc39 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Choose Feed Minute");
 8001c2e:	4806      	ldr	r0, [pc, #24]	@ (8001c48 <handleFeedMinuteLCDMonitor+0x24>)
 8001c30:	f7fe fce7 	bl	8000602 <lcd_send_string>

	showSelectedFeedTime();
 8001c34:	f000 f994 	bl	8001f60 <showSelectedFeedTime>

	lcd_send_cmd(0x80|0x54);
 8001c38:	20d4      	movs	r0, #212	@ 0xd4
 8001c3a:	f7fe fc31 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001c3e:	4803      	ldr	r0, [pc, #12]	@ (8001c4c <handleFeedMinuteLCDMonitor+0x28>)
 8001c40:	f7fe fcdf 	bl	8000602 <lcd_send_string>
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	08005430 	.word	0x08005430
 8001c4c:	0800541c 	.word	0x0800541c

08001c50 <handleFeedSecondLCDMonitor>:

/***********************************************/
void handleFeedSecondLCDMonitor()
/***********************************************/
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001c54:	20c0      	movs	r0, #192	@ 0xc0
 8001c56:	f7fe fc23 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Choose Feed Second");
 8001c5a:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <handleFeedSecondLCDMonitor+0x24>)
 8001c5c:	f7fe fcd1 	bl	8000602 <lcd_send_string>

	showSelectedFeedTime();
 8001c60:	f000 f97e 	bl	8001f60 <showSelectedFeedTime>

	lcd_send_cmd(0x80|0x54);
 8001c64:	20d4      	movs	r0, #212	@ 0xd4
 8001c66:	f7fe fc1b 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001c6a:	4803      	ldr	r0, [pc, #12]	@ (8001c78 <handleFeedSecondLCDMonitor+0x28>)
 8001c6c:	f7fe fcc9 	bl	8000602 <lcd_send_string>
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	08005444 	.word	0x08005444
 8001c78:	0800541c 	.word	0x0800541c

08001c7c <handleTimeHourLCDMonitor>:

/***********************************************/
void handleTimeHourLCDMonitor()
/***********************************************/
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001c80:	20c0      	movs	r0, #192	@ 0xc0
 8001c82:	f7fe fc0d 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Choose Hour");
 8001c86:	4806      	ldr	r0, [pc, #24]	@ (8001ca0 <handleTimeHourLCDMonitor+0x24>)
 8001c88:	f7fe fcbb 	bl	8000602 <lcd_send_string>

	showSelectedTime();
 8001c8c:	f000 f8e2 	bl	8001e54 <showSelectedTime>

	lcd_send_cmd(0x80|0x54);
 8001c90:	20d4      	movs	r0, #212	@ 0xd4
 8001c92:	f7fe fc05 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001c96:	4803      	ldr	r0, [pc, #12]	@ (8001ca4 <handleTimeHourLCDMonitor+0x28>)
 8001c98:	f7fe fcb3 	bl	8000602 <lcd_send_string>
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	08005458 	.word	0x08005458
 8001ca4:	0800541c 	.word	0x0800541c

08001ca8 <handleTimeMinuteLCDMonitor>:

/***********************************************/
void handleTimeMinuteLCDMonitor()
/***********************************************/
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001cac:	20c0      	movs	r0, #192	@ 0xc0
 8001cae:	f7fe fbf7 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Choose Minute");
 8001cb2:	4806      	ldr	r0, [pc, #24]	@ (8001ccc <handleTimeMinuteLCDMonitor+0x24>)
 8001cb4:	f7fe fca5 	bl	8000602 <lcd_send_string>

	showSelectedTime();
 8001cb8:	f000 f8cc 	bl	8001e54 <showSelectedTime>

	lcd_send_cmd(0x80|0x54);
 8001cbc:	20d4      	movs	r0, #212	@ 0xd4
 8001cbe:	f7fe fbef 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001cc2:	4803      	ldr	r0, [pc, #12]	@ (8001cd0 <handleTimeMinuteLCDMonitor+0x28>)
 8001cc4:	f7fe fc9d 	bl	8000602 <lcd_send_string>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	08005464 	.word	0x08005464
 8001cd0:	0800541c 	.word	0x0800541c

08001cd4 <handleTimeSecondLCDMonitor>:

/***********************************************/
void handleTimeSecondLCDMonitor()
/***********************************************/
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001cd8:	20c0      	movs	r0, #192	@ 0xc0
 8001cda:	f7fe fbe1 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Choose Second");
 8001cde:	4806      	ldr	r0, [pc, #24]	@ (8001cf8 <handleTimeSecondLCDMonitor+0x24>)
 8001ce0:	f7fe fc8f 	bl	8000602 <lcd_send_string>

	showSelectedTime();
 8001ce4:	f000 f8b6 	bl	8001e54 <showSelectedTime>

	lcd_send_cmd(0x80|0x54);
 8001ce8:	20d4      	movs	r0, #212	@ 0xd4
 8001cea:	f7fe fbd9 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001cee:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <handleTimeSecondLCDMonitor+0x28>)
 8001cf0:	f7fe fc87 	bl	8000602 <lcd_send_string>
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	08005474 	.word	0x08005474
 8001cfc:	0800541c 	.word	0x0800541c

08001d00 <handleFeedPeriodLCDMonitor>:

/***********************************************/
void handleFeedPeriodLCDMonitor()
/***********************************************/
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
	char tempc [10];

	lcd_send_cmd(0x80|0x40);
 8001d06:	20c0      	movs	r0, #192	@ 0xc0
 8001d08:	f7fe fbca 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Choose Feed Duration");
 8001d0c:	4829      	ldr	r0, [pc, #164]	@ (8001db4 <handleFeedPeriodLCDMonitor+0xb4>)
 8001d0e:	f7fe fc78 	bl	8000602 <lcd_send_string>

	itoa(feedDuration/1000, tempc);
 8001d12:	4b29      	ldr	r3, [pc, #164]	@ (8001db8 <handleFeedPeriodLCDMonitor+0xb8>)
 8001d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d18:	4a28      	ldr	r2, [pc, #160]	@ (8001dbc <handleFeedPeriodLCDMonitor+0xbc>)
 8001d1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d1e:	1192      	asrs	r2, r2, #6
 8001d20:	17db      	asrs	r3, r3, #31
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	f7ff fccd 	bl	80016cc <itoa>

	lcd_send_cmd(0x80|0x19);
 8001d32:	2099      	movs	r0, #153	@ 0x99
 8001d34:	f7fe fbb4 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string(tempc);
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fc61 	bl	8000602 <lcd_send_string>

	lcd_send_cmd(0x80|0x1A);
 8001d40:	209a      	movs	r0, #154	@ 0x9a
 8001d42:	f7fe fbad 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string(".");
 8001d46:	481e      	ldr	r0, [pc, #120]	@ (8001dc0 <handleFeedPeriodLCDMonitor+0xc0>)
 8001d48:	f7fe fc5b 	bl	8000602 <lcd_send_string>

	itoa((feedDuration%1000) / 100, tempc);
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <handleFeedPeriodLCDMonitor+0xb8>)
 8001d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d52:	4a1a      	ldr	r2, [pc, #104]	@ (8001dbc <handleFeedPeriodLCDMonitor+0xbc>)
 8001d54:	fb82 1203 	smull	r1, r2, r2, r3
 8001d58:	1191      	asrs	r1, r2, #6
 8001d5a:	17da      	asrs	r2, r3, #31
 8001d5c:	1a8a      	subs	r2, r1, r2
 8001d5e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d62:	fb01 f202 	mul.w	r2, r1, r2
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	4a16      	ldr	r2, [pc, #88]	@ (8001dc4 <handleFeedPeriodLCDMonitor+0xc4>)
 8001d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d70:	1152      	asrs	r2, r2, #5
 8001d72:	17db      	asrs	r3, r3, #31
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f7ff fca4 	bl	80016cc <itoa>

	lcd_send_cmd(0x80|0x1B);
 8001d84:	209b      	movs	r0, #155	@ 0x9b
 8001d86:	f7fe fb8b 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string(tempc);
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fc38 	bl	8000602 <lcd_send_string>

	lcd_send_cmd(0x80|0x1D);
 8001d92:	209d      	movs	r0, #157	@ 0x9d
 8001d94:	f7fe fb84 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("[ms]");
 8001d98:	480b      	ldr	r0, [pc, #44]	@ (8001dc8 <handleFeedPeriodLCDMonitor+0xc8>)
 8001d9a:	f7fe fc32 	bl	8000602 <lcd_send_string>

	lcd_send_cmd(0x80|0x54);
 8001d9e:	20d4      	movs	r0, #212	@ 0xd4
 8001da0:	f7fe fb7e 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001da4:	4809      	ldr	r0, [pc, #36]	@ (8001dcc <handleFeedPeriodLCDMonitor+0xcc>)
 8001da6:	f7fe fc2c 	bl	8000602 <lcd_send_string>
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	08005484 	.word	0x08005484
 8001db8:	2000000a 	.word	0x2000000a
 8001dbc:	10624dd3 	.word	0x10624dd3
 8001dc0:	0800549c 	.word	0x0800549c
 8001dc4:	51eb851f 	.word	0x51eb851f
 8001dc8:	080054a0 	.word	0x080054a0
 8001dcc:	0800541c 	.word	0x0800541c

08001dd0 <handleYearLCDMonitor>:

/***********************************************/
void handleYearLCDMonitor()
/***********************************************/
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001dd4:	20c0      	movs	r0, #192	@ 0xc0
 8001dd6:	f7fe fb63 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Choose Year");
 8001dda:	4806      	ldr	r0, [pc, #24]	@ (8001df4 <handleYearLCDMonitor+0x24>)
 8001ddc:	f7fe fc11 	bl	8000602 <lcd_send_string>

	showSelectedDate();
 8001de0:	f000 f944 	bl	800206c <showSelectedDate>

	lcd_send_cmd(0x80|0x54);
 8001de4:	20d4      	movs	r0, #212	@ 0xd4
 8001de6:	f7fe fb5b 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001dea:	4803      	ldr	r0, [pc, #12]	@ (8001df8 <handleYearLCDMonitor+0x28>)
 8001dec:	f7fe fc09 	bl	8000602 <lcd_send_string>
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	080054a8 	.word	0x080054a8
 8001df8:	0800541c 	.word	0x0800541c

08001dfc <handleMonthLCDMonitor>:

/***********************************************/
void handleMonthLCDMonitor()
/***********************************************/
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001e00:	20c0      	movs	r0, #192	@ 0xc0
 8001e02:	f7fe fb4d 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Choose Month");
 8001e06:	4806      	ldr	r0, [pc, #24]	@ (8001e20 <handleMonthLCDMonitor+0x24>)
 8001e08:	f7fe fbfb 	bl	8000602 <lcd_send_string>

	showSelectedDate();
 8001e0c:	f000 f92e 	bl	800206c <showSelectedDate>

	lcd_send_cmd(0x80|0x54);
 8001e10:	20d4      	movs	r0, #212	@ 0xd4
 8001e12:	f7fe fb45 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001e16:	4803      	ldr	r0, [pc, #12]	@ (8001e24 <handleMonthLCDMonitor+0x28>)
 8001e18:	f7fe fbf3 	bl	8000602 <lcd_send_string>
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	080054b4 	.word	0x080054b4
 8001e24:	0800541c 	.word	0x0800541c

08001e28 <handleDayLCDMonitor>:

/***********************************************/
void handleDayLCDMonitor()
/***********************************************/
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001e2c:	20c0      	movs	r0, #192	@ 0xc0
 8001e2e:	f7fe fb37 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Choose Day");
 8001e32:	4806      	ldr	r0, [pc, #24]	@ (8001e4c <handleDayLCDMonitor+0x24>)
 8001e34:	f7fe fbe5 	bl	8000602 <lcd_send_string>

	showSelectedDate();
 8001e38:	f000 f918 	bl	800206c <showSelectedDate>

	lcd_send_cmd(0x80|0x54);
 8001e3c:	20d4      	movs	r0, #212	@ 0xd4
 8001e3e:	f7fe fb2f 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001e42:	4803      	ldr	r0, [pc, #12]	@ (8001e50 <handleDayLCDMonitor+0x28>)
 8001e44:	f7fe fbdd 	bl	8000602 <lcd_send_string>
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	080054c4 	.word	0x080054c4
 8001e50:	0800541c 	.word	0x0800541c

08001e54 <showSelectedTime>:

/***********************************************/
void showSelectedTime() {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
/***********************************************/
	char tempc [10];
	itoa(selectedHour, tempc);
 8001e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f4c <showSelectedTime+0xf8>)
 8001e5c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e60:	461a      	mov	r2, r3
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f7ff fc30 	bl	80016cc <itoa>

	if(selectedHour < 10) {
 8001e6c:	4b37      	ldr	r3, [pc, #220]	@ (8001f4c <showSelectedTime+0xf8>)
 8001e6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	dc0d      	bgt.n	8001e92 <showSelectedTime+0x3e>
		lcd_send_cmd(0x80|0x1A);
 8001e76:	209a      	movs	r0, #154	@ 0x9a
 8001e78:	f7fe fb12 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 8001e7c:	4834      	ldr	r0, [pc, #208]	@ (8001f50 <showSelectedTime+0xfc>)
 8001e7e:	f7fe fbc0 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80|0x1B);
 8001e82:	209b      	movs	r0, #155	@ 0x9b
 8001e84:	f7fe fb0c 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fbb9 	bl	8000602 <lcd_send_string>
 8001e90:	e006      	b.n	8001ea0 <showSelectedTime+0x4c>
	}
	else {
		lcd_send_cmd(0x80|0x1A);
 8001e92:	209a      	movs	r0, #154	@ 0x9a
 8001e94:	f7fe fb04 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fbb1 	bl	8000602 <lcd_send_string>
	}

	lcd_send_cmd(0x80|0x1C);
 8001ea0:	209c      	movs	r0, #156	@ 0x9c
 8001ea2:	f7fe fafd 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string(":");
 8001ea6:	482b      	ldr	r0, [pc, #172]	@ (8001f54 <showSelectedTime+0x100>)
 8001ea8:	f7fe fbab 	bl	8000602 <lcd_send_string>

	itoa(selectedMinute, tempc);
 8001eac:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <showSelectedTime+0x104>)
 8001eae:	f993 3000 	ldrsb.w	r3, [r3]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4610      	mov	r0, r2
 8001eba:	f7ff fc07 	bl	80016cc <itoa>
	if(selectedMinute < 10) {
 8001ebe:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <showSelectedTime+0x104>)
 8001ec0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	dc0d      	bgt.n	8001ee4 <showSelectedTime+0x90>
		lcd_send_cmd(0x80|0x1D);
 8001ec8:	209d      	movs	r0, #157	@ 0x9d
 8001eca:	f7fe fae9 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 8001ece:	4820      	ldr	r0, [pc, #128]	@ (8001f50 <showSelectedTime+0xfc>)
 8001ed0:	f7fe fb97 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80|0x1E);
 8001ed4:	209e      	movs	r0, #158	@ 0x9e
 8001ed6:	f7fe fae3 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb90 	bl	8000602 <lcd_send_string>
 8001ee2:	e006      	b.n	8001ef2 <showSelectedTime+0x9e>
	}
	else {
		lcd_send_cmd(0x80|0x1D);
 8001ee4:	209d      	movs	r0, #157	@ 0x9d
 8001ee6:	f7fe fadb 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb88 	bl	8000602 <lcd_send_string>
	}

	lcd_send_cmd(0x80|0x1F);
 8001ef2:	209f      	movs	r0, #159	@ 0x9f
 8001ef4:	f7fe fad4 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string(":");
 8001ef8:	4816      	ldr	r0, [pc, #88]	@ (8001f54 <showSelectedTime+0x100>)
 8001efa:	f7fe fb82 	bl	8000602 <lcd_send_string>

	itoa(selectedSecond, tempc);
 8001efe:	4b17      	ldr	r3, [pc, #92]	@ (8001f5c <showSelectedTime+0x108>)
 8001f00:	f993 3000 	ldrsb.w	r3, [r3]
 8001f04:	461a      	mov	r2, r3
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f7ff fbde 	bl	80016cc <itoa>
	if(selectedSecond < 10) {
 8001f10:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <showSelectedTime+0x108>)
 8001f12:	f993 3000 	ldrsb.w	r3, [r3]
 8001f16:	2b09      	cmp	r3, #9
 8001f18:	dc0d      	bgt.n	8001f36 <showSelectedTime+0xe2>
		lcd_send_cmd(0x80|0x20);
 8001f1a:	20a0      	movs	r0, #160	@ 0xa0
 8001f1c:	f7fe fac0 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 8001f20:	480b      	ldr	r0, [pc, #44]	@ (8001f50 <showSelectedTime+0xfc>)
 8001f22:	f7fe fb6e 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80|0x21);
 8001f26:	20a1      	movs	r0, #161	@ 0xa1
 8001f28:	f7fe faba 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fb67 	bl	8000602 <lcd_send_string>
	}
	else {
		lcd_send_cmd(0x80|0x20);
		lcd_send_string(tempc);
	}
}
 8001f34:	e006      	b.n	8001f44 <showSelectedTime+0xf0>
		lcd_send_cmd(0x80|0x20);
 8001f36:	20a0      	movs	r0, #160	@ 0xa0
 8001f38:	f7fe fab2 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fb5f 	bl	8000602 <lcd_send_string>
}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	0800534c 	.word	0x0800534c
 8001f54:	08005350 	.word	0x08005350
 8001f58:	20000001 	.word	0x20000001
 8001f5c:	20000002 	.word	0x20000002

08001f60 <showSelectedFeedTime>:

/***********************************************/
void showSelectedFeedTime() {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
/***********************************************/
	char tempc [10];
	itoa(selectedFeedHour, tempc);
 8001f66:	4b3c      	ldr	r3, [pc, #240]	@ (8002058 <showSelectedFeedTime+0xf8>)
 8001f68:	f993 3000 	ldrsb.w	r3, [r3]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f7ff fbaa 	bl	80016cc <itoa>

	if(selectedFeedHour < 10) {
 8001f78:	4b37      	ldr	r3, [pc, #220]	@ (8002058 <showSelectedFeedTime+0xf8>)
 8001f7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f7e:	2b09      	cmp	r3, #9
 8001f80:	dc0d      	bgt.n	8001f9e <showSelectedFeedTime+0x3e>
		lcd_send_cmd(0x80|0x1A);
 8001f82:	209a      	movs	r0, #154	@ 0x9a
 8001f84:	f7fe fa8c 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 8001f88:	4834      	ldr	r0, [pc, #208]	@ (800205c <showSelectedFeedTime+0xfc>)
 8001f8a:	f7fe fb3a 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80|0x1B);
 8001f8e:	209b      	movs	r0, #155	@ 0x9b
 8001f90:	f7fe fa86 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fb33 	bl	8000602 <lcd_send_string>
 8001f9c:	e006      	b.n	8001fac <showSelectedFeedTime+0x4c>
	}
	else {
		lcd_send_cmd(0x80|0x1A);
 8001f9e:	209a      	movs	r0, #154	@ 0x9a
 8001fa0:	f7fe fa7e 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fb2b 	bl	8000602 <lcd_send_string>
	}

	lcd_send_cmd(0x80|0x1C);
 8001fac:	209c      	movs	r0, #156	@ 0x9c
 8001fae:	f7fe fa77 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string(":");
 8001fb2:	482b      	ldr	r0, [pc, #172]	@ (8002060 <showSelectedFeedTime+0x100>)
 8001fb4:	f7fe fb25 	bl	8000602 <lcd_send_string>

	itoa(selectedFeedMinute, tempc);
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002064 <showSelectedFeedTime+0x104>)
 8001fba:	f993 3000 	ldrsb.w	r3, [r3]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	f7ff fb81 	bl	80016cc <itoa>
	if(selectedFeedMinute < 10) {
 8001fca:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <showSelectedFeedTime+0x104>)
 8001fcc:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd0:	2b09      	cmp	r3, #9
 8001fd2:	dc0d      	bgt.n	8001ff0 <showSelectedFeedTime+0x90>
		lcd_send_cmd(0x80|0x1D);
 8001fd4:	209d      	movs	r0, #157	@ 0x9d
 8001fd6:	f7fe fa63 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 8001fda:	4820      	ldr	r0, [pc, #128]	@ (800205c <showSelectedFeedTime+0xfc>)
 8001fdc:	f7fe fb11 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80|0x1E);
 8001fe0:	209e      	movs	r0, #158	@ 0x9e
 8001fe2:	f7fe fa5d 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fb0a 	bl	8000602 <lcd_send_string>
 8001fee:	e006      	b.n	8001ffe <showSelectedFeedTime+0x9e>
	}
	else {
		lcd_send_cmd(0x80|0x1D);
 8001ff0:	209d      	movs	r0, #157	@ 0x9d
 8001ff2:	f7fe fa55 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fb02 	bl	8000602 <lcd_send_string>
	}

	lcd_send_cmd(0x80|0x1F);
 8001ffe:	209f      	movs	r0, #159	@ 0x9f
 8002000:	f7fe fa4e 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string(":");
 8002004:	4816      	ldr	r0, [pc, #88]	@ (8002060 <showSelectedFeedTime+0x100>)
 8002006:	f7fe fafc 	bl	8000602 <lcd_send_string>

	itoa(selectedFeedSecond, tempc);
 800200a:	4b17      	ldr	r3, [pc, #92]	@ (8002068 <showSelectedFeedTime+0x108>)
 800200c:	f993 3000 	ldrsb.w	r3, [r3]
 8002010:	461a      	mov	r2, r3
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f7ff fb58 	bl	80016cc <itoa>
	if(selectedFeedSecond < 10) {
 800201c:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <showSelectedFeedTime+0x108>)
 800201e:	f993 3000 	ldrsb.w	r3, [r3]
 8002022:	2b09      	cmp	r3, #9
 8002024:	dc0d      	bgt.n	8002042 <showSelectedFeedTime+0xe2>
		lcd_send_cmd(0x80|0x20);
 8002026:	20a0      	movs	r0, #160	@ 0xa0
 8002028:	f7fe fa3a 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 800202c:	480b      	ldr	r0, [pc, #44]	@ (800205c <showSelectedFeedTime+0xfc>)
 800202e:	f7fe fae8 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80|0x21);
 8002032:	20a1      	movs	r0, #161	@ 0xa1
 8002034:	f7fe fa34 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fae1 	bl	8000602 <lcd_send_string>
	}
	else {
		lcd_send_cmd(0x80|0x20);
		lcd_send_string(tempc);
	}
}
 8002040:	e006      	b.n	8002050 <showSelectedFeedTime+0xf0>
		lcd_send_cmd(0x80|0x20);
 8002042:	20a0      	movs	r0, #160	@ 0xa0
 8002044:	f7fe fa2c 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fad9 	bl	8000602 <lcd_send_string>
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000006 	.word	0x20000006
 800205c:	0800534c 	.word	0x0800534c
 8002060:	08005350 	.word	0x08005350
 8002064:	20000007 	.word	0x20000007
 8002068:	20000008 	.word	0x20000008

0800206c <showSelectedDate>:

/***********************************************/
void showSelectedDate() {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
/***********************************************/
	char tempc [10];
	itoa(selectedDay, tempc);
 8002072:	4b3c      	ldr	r3, [pc, #240]	@ (8002164 <showSelectedDate+0xf8>)
 8002074:	f993 3000 	ldrsb.w	r3, [r3]
 8002078:	461a      	mov	r2, r3
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f7ff fb24 	bl	80016cc <itoa>

	if(selectedDay < 10) {
 8002084:	4b37      	ldr	r3, [pc, #220]	@ (8002164 <showSelectedDate+0xf8>)
 8002086:	f993 3000 	ldrsb.w	r3, [r3]
 800208a:	2b09      	cmp	r3, #9
 800208c:	dc0d      	bgt.n	80020aa <showSelectedDate+0x3e>
		lcd_send_cmd(0x80|0x1A);
 800208e:	209a      	movs	r0, #154	@ 0x9a
 8002090:	f7fe fa06 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 8002094:	4834      	ldr	r0, [pc, #208]	@ (8002168 <showSelectedDate+0xfc>)
 8002096:	f7fe fab4 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80|0x1B);
 800209a:	209b      	movs	r0, #155	@ 0x9b
 800209c:	f7fe fa00 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe faad 	bl	8000602 <lcd_send_string>
 80020a8:	e006      	b.n	80020b8 <showSelectedDate+0x4c>
	}
	else {
		lcd_send_cmd(0x80|0x1A);
 80020aa:	209a      	movs	r0, #154	@ 0x9a
 80020ac:	f7fe f9f8 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe faa5 	bl	8000602 <lcd_send_string>
	}

	lcd_send_cmd(0x80|0x1C);
 80020b8:	209c      	movs	r0, #156	@ 0x9c
 80020ba:	f7fe f9f1 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("/");
 80020be:	482b      	ldr	r0, [pc, #172]	@ (800216c <showSelectedDate+0x100>)
 80020c0:	f7fe fa9f 	bl	8000602 <lcd_send_string>

	itoa(selectedMonth, tempc);
 80020c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <showSelectedDate+0x104>)
 80020c6:	f993 3000 	ldrsb.w	r3, [r3]
 80020ca:	461a      	mov	r2, r3
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	4619      	mov	r1, r3
 80020d0:	4610      	mov	r0, r2
 80020d2:	f7ff fafb 	bl	80016cc <itoa>
	if(selectedMonth < 10) {
 80020d6:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <showSelectedDate+0x104>)
 80020d8:	f993 3000 	ldrsb.w	r3, [r3]
 80020dc:	2b09      	cmp	r3, #9
 80020de:	dc0d      	bgt.n	80020fc <showSelectedDate+0x90>
		lcd_send_cmd(0x80|0x1D);
 80020e0:	209d      	movs	r0, #157	@ 0x9d
 80020e2:	f7fe f9dd 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 80020e6:	4820      	ldr	r0, [pc, #128]	@ (8002168 <showSelectedDate+0xfc>)
 80020e8:	f7fe fa8b 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80|0x1E);
 80020ec:	209e      	movs	r0, #158	@ 0x9e
 80020ee:	f7fe f9d7 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa84 	bl	8000602 <lcd_send_string>
 80020fa:	e006      	b.n	800210a <showSelectedDate+0x9e>
	}
	else {
		lcd_send_cmd(0x80|0x1D);
 80020fc:	209d      	movs	r0, #157	@ 0x9d
 80020fe:	f7fe f9cf 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fa7c 	bl	8000602 <lcd_send_string>
	}

	lcd_send_cmd(0x80|0x1F);
 800210a:	209f      	movs	r0, #159	@ 0x9f
 800210c:	f7fe f9c8 	bl	80004a0 <lcd_send_cmd>
	lcd_send_string("/");
 8002110:	4816      	ldr	r0, [pc, #88]	@ (800216c <showSelectedDate+0x100>)
 8002112:	f7fe fa76 	bl	8000602 <lcd_send_string>

	itoa(selectedYear, tempc);
 8002116:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <showSelectedDate+0x108>)
 8002118:	f993 3000 	ldrsb.w	r3, [r3]
 800211c:	461a      	mov	r2, r3
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f7ff fad2 	bl	80016cc <itoa>
	if(selectedYear < 10) {
 8002128:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <showSelectedDate+0x108>)
 800212a:	f993 3000 	ldrsb.w	r3, [r3]
 800212e:	2b09      	cmp	r3, #9
 8002130:	dc0d      	bgt.n	800214e <showSelectedDate+0xe2>
		lcd_send_cmd(0x80|0x20);
 8002132:	20a0      	movs	r0, #160	@ 0xa0
 8002134:	f7fe f9b4 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string("0");
 8002138:	480b      	ldr	r0, [pc, #44]	@ (8002168 <showSelectedDate+0xfc>)
 800213a:	f7fe fa62 	bl	8000602 <lcd_send_string>
		lcd_send_cmd(0x80|0x21);
 800213e:	20a1      	movs	r0, #161	@ 0xa1
 8002140:	f7fe f9ae 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fa5b 	bl	8000602 <lcd_send_string>
	}
	else {
		lcd_send_cmd(0x80|0x20);
		lcd_send_string(tempc);
	}
}
 800214c:	e006      	b.n	800215c <showSelectedDate+0xf0>
		lcd_send_cmd(0x80|0x20);
 800214e:	20a0      	movs	r0, #160	@ 0xa0
 8002150:	f7fe f9a6 	bl	80004a0 <lcd_send_cmd>
		lcd_send_string(tempc);
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fa53 	bl	8000602 <lcd_send_string>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000005 	.word	0x20000005
 8002168:	0800534c 	.word	0x0800534c
 800216c:	08005354 	.word	0x08005354
 8002170:	20000004 	.word	0x20000004
 8002174:	20000003 	.word	0x20000003

08002178 <checkIfIsTimeToFeed>:

/***********************************************/
void checkIfIsTimeToFeed() {
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
/***********************************************/
	RTC_TimeTypeDef TempsTime = { 0 };
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	2100      	movs	r1, #0
 8002182:	460a      	mov	r2, r1
 8002184:	801a      	strh	r2, [r3, #0]
 8002186:	460a      	mov	r2, r1
 8002188:	709a      	strb	r2, [r3, #2]

	HAL_RTC_GetTime(&hrtc, &TempsTime, RTC_FORMAT_BIN);
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2200      	movs	r2, #0
 800218e:	4619      	mov	r1, r3
 8002190:	4810      	ldr	r0, [pc, #64]	@ (80021d4 <checkIfIsTimeToFeed+0x5c>)
 8002192:	f001 ff1b 	bl	8003fcc <HAL_RTC_GetTime>
	if(TempsTime.Hours == selectedFeedHour && TempsTime.Minutes == selectedFeedMinute && TempsTime.Seconds == selectedFeedSecond) {
 8002196:	793b      	ldrb	r3, [r7, #4]
 8002198:	461a      	mov	r2, r3
 800219a:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <checkIfIsTimeToFeed+0x60>)
 800219c:	f993 3000 	ldrsb.w	r3, [r3]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d112      	bne.n	80021ca <checkIfIsTimeToFeed+0x52>
 80021a4:	797b      	ldrb	r3, [r7, #5]
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <checkIfIsTimeToFeed+0x64>)
 80021aa:	f993 3000 	ldrsb.w	r3, [r3]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d10b      	bne.n	80021ca <checkIfIsTimeToFeed+0x52>
 80021b2:	79bb      	ldrb	r3, [r7, #6]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <checkIfIsTimeToFeed+0x68>)
 80021b8:	f993 3000 	ldrsb.w	r3, [r3]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d104      	bne.n	80021ca <checkIfIsTimeToFeed+0x52>
		handle_event(FEED_TIME_EVENT);
 80021c0:	2005      	movs	r0, #5
 80021c2:	f7fe fd4b 	bl	8000c5c <handle_event>
		startFeeding();
 80021c6:	f000 f80d 	bl	80021e4 <startFeeding>
	}
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000088 	.word	0x20000088
 80021d8:	20000006 	.word	0x20000006
 80021dc:	20000007 	.word	0x20000007
 80021e0:	20000008 	.word	0x20000008

080021e4 <startFeeding>:

/***********************************************/
void startFeeding() {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
/***********************************************/
	triggerOnce();
 80021e8:	f7fe fc64 	bl	8000ab4 <triggerOnce>
	HAL_GPIO_WritePin(MOTOR_Enable_GPIO_Port, MOTOR_Enable_Pin, GPIO_PIN_SET);
 80021ec:	2201      	movs	r2, #1
 80021ee:	2101      	movs	r1, #1
 80021f0:	4802      	ldr	r0, [pc, #8]	@ (80021fc <startFeeding+0x18>)
 80021f2:	f000 fb68 	bl	80028c6 <HAL_GPIO_WritePin>
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40010800 	.word	0x40010800

08002200 <stopFeeding>:

/***********************************************/
void stopFeeding() {
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
/***********************************************/
	HAL_GPIO_WritePin(MOTOR_Enable_GPIO_Port, MOTOR_Enable_Pin, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	2101      	movs	r1, #1
 8002208:	4803      	ldr	r0, [pc, #12]	@ (8002218 <stopFeeding+0x18>)
 800220a:	f000 fb5c 	bl	80028c6 <HAL_GPIO_WritePin>
	handle_event(END_FEED_TIME_EVENT);
 800220e:	2006      	movs	r0, #6
 8002210:	f7fe fd24 	bl	8000c5c <handle_event>
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40010800 	.word	0x40010800

0800221c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800221c:	f7ff fa50 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002220:	480b      	ldr	r0, [pc, #44]	@ (8002250 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002222:	490c      	ldr	r1, [pc, #48]	@ (8002254 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002224:	4a0c      	ldr	r2, [pc, #48]	@ (8002258 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002228:	e002      	b.n	8002230 <LoopCopyDataInit>

0800222a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800222c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222e:	3304      	adds	r3, #4

08002230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002234:	d3f9      	bcc.n	800222a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002236:	4a09      	ldr	r2, [pc, #36]	@ (800225c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002238:	4c09      	ldr	r4, [pc, #36]	@ (8002260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800223c:	e001      	b.n	8002242 <LoopFillZerobss>

0800223e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002240:	3204      	adds	r2, #4

08002242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002244:	d3fb      	bcc.n	800223e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002246:	f003 f84b 	bl	80052e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800224a:	f7fe f9ef 	bl	800062c <main>
  bx lr
 800224e:	4770      	bx	lr
  ldr r0, =_sdata
 8002250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002254:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002258:	08005518 	.word	0x08005518
  ldr r2, =_sbss
 800225c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002260:	200001a8 	.word	0x200001a8

08002264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC1_2_IRQHandler>
	...

08002268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800226c:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <HAL_Init+0x28>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a07      	ldr	r2, [pc, #28]	@ (8002290 <HAL_Init+0x28>)
 8002272:	f043 0310 	orr.w	r3, r3, #16
 8002276:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002278:	2003      	movs	r0, #3
 800227a:	f000 f947 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800227e:	2000      	movs	r0, #0
 8002280:	f000 f808 	bl	8002294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002284:	f7ff f8a4 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40022000 	.word	0x40022000

08002294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800229c:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_InitTick+0x54>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <HAL_InitTick+0x58>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f95f 	bl	8002576 <HAL_SYSTICK_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e00e      	b.n	80022e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d80a      	bhi.n	80022de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c8:	2200      	movs	r2, #0
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f000 f927 	bl	8002522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d4:	4a06      	ldr	r2, [pc, #24]	@ (80022f0 <HAL_InitTick+0x5c>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e000      	b.n	80022e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2000000c 	.word	0x2000000c
 80022ec:	20000014 	.word	0x20000014
 80022f0:	20000010 	.word	0x20000010

080022f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f8:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <HAL_IncTick+0x1c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <HAL_IncTick+0x20>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	4a03      	ldr	r2, [pc, #12]	@ (8002314 <HAL_IncTick+0x20>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	20000014 	.word	0x20000014
 8002314:	200001a4 	.word	0x200001a4

08002318 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return uwTick;
 800231c:	4b02      	ldr	r3, [pc, #8]	@ (8002328 <HAL_GetTick+0x10>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	200001a4 	.word	0x200001a4

0800232c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff fff0 	bl	8002318 <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d005      	beq.n	8002352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002346:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <HAL_Delay+0x44>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002352:	bf00      	nop
 8002354:	f7ff ffe0 	bl	8002318 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	429a      	cmp	r2, r3
 8002362:	d8f7      	bhi.n	8002354 <HAL_Delay+0x28>
  {
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000014 	.word	0x20000014

08002374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002384:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800239c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	@ (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__NVIC_GetPriorityGrouping+0x18>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 0307 	and.w	r3, r3, #7
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db0b      	blt.n	8002402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4906      	ldr	r1, [pc, #24]	@ (800240c <__NVIC_EnableIRQ+0x34>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2001      	movs	r0, #1
 80023fa:	fa00 f202 	lsl.w	r2, r0, r2
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	@ (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	@ (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	@ 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
         );
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	@ 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f7ff ff90 	bl	8002410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff2d 	bl	8002374 <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff42 	bl	80023bc <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff90 	bl	8002464 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5f 	bl	8002410 <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff35 	bl	80023d8 <__NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffa2 	bl	80024c8 <SysTick_Config>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002590:	b480      	push	{r7}
 8002592:	b08b      	sub	sp, #44	@ 0x2c
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a2:	e169      	b.n	8002878 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025a4:	2201      	movs	r2, #1
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	429a      	cmp	r2, r3
 80025be:	f040 8158 	bne.w	8002872 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a9a      	ldr	r2, [pc, #616]	@ (8002830 <HAL_GPIO_Init+0x2a0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d05e      	beq.n	800268a <HAL_GPIO_Init+0xfa>
 80025cc:	4a98      	ldr	r2, [pc, #608]	@ (8002830 <HAL_GPIO_Init+0x2a0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d875      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 80025d2:	4a98      	ldr	r2, [pc, #608]	@ (8002834 <HAL_GPIO_Init+0x2a4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d058      	beq.n	800268a <HAL_GPIO_Init+0xfa>
 80025d8:	4a96      	ldr	r2, [pc, #600]	@ (8002834 <HAL_GPIO_Init+0x2a4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d86f      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 80025de:	4a96      	ldr	r2, [pc, #600]	@ (8002838 <HAL_GPIO_Init+0x2a8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d052      	beq.n	800268a <HAL_GPIO_Init+0xfa>
 80025e4:	4a94      	ldr	r2, [pc, #592]	@ (8002838 <HAL_GPIO_Init+0x2a8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d869      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 80025ea:	4a94      	ldr	r2, [pc, #592]	@ (800283c <HAL_GPIO_Init+0x2ac>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d04c      	beq.n	800268a <HAL_GPIO_Init+0xfa>
 80025f0:	4a92      	ldr	r2, [pc, #584]	@ (800283c <HAL_GPIO_Init+0x2ac>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d863      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 80025f6:	4a92      	ldr	r2, [pc, #584]	@ (8002840 <HAL_GPIO_Init+0x2b0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d046      	beq.n	800268a <HAL_GPIO_Init+0xfa>
 80025fc:	4a90      	ldr	r2, [pc, #576]	@ (8002840 <HAL_GPIO_Init+0x2b0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d85d      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 8002602:	2b12      	cmp	r3, #18
 8002604:	d82a      	bhi.n	800265c <HAL_GPIO_Init+0xcc>
 8002606:	2b12      	cmp	r3, #18
 8002608:	d859      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 800260a:	a201      	add	r2, pc, #4	@ (adr r2, 8002610 <HAL_GPIO_Init+0x80>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	0800268b 	.word	0x0800268b
 8002614:	08002665 	.word	0x08002665
 8002618:	08002677 	.word	0x08002677
 800261c:	080026b9 	.word	0x080026b9
 8002620:	080026bf 	.word	0x080026bf
 8002624:	080026bf 	.word	0x080026bf
 8002628:	080026bf 	.word	0x080026bf
 800262c:	080026bf 	.word	0x080026bf
 8002630:	080026bf 	.word	0x080026bf
 8002634:	080026bf 	.word	0x080026bf
 8002638:	080026bf 	.word	0x080026bf
 800263c:	080026bf 	.word	0x080026bf
 8002640:	080026bf 	.word	0x080026bf
 8002644:	080026bf 	.word	0x080026bf
 8002648:	080026bf 	.word	0x080026bf
 800264c:	080026bf 	.word	0x080026bf
 8002650:	080026bf 	.word	0x080026bf
 8002654:	0800266d 	.word	0x0800266d
 8002658:	08002681 	.word	0x08002681
 800265c:	4a79      	ldr	r2, [pc, #484]	@ (8002844 <HAL_GPIO_Init+0x2b4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002662:	e02c      	b.n	80026be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	623b      	str	r3, [r7, #32]
          break;
 800266a:	e029      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	3304      	adds	r3, #4
 8002672:	623b      	str	r3, [r7, #32]
          break;
 8002674:	e024      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	3308      	adds	r3, #8
 800267c:	623b      	str	r3, [r7, #32]
          break;
 800267e:	e01f      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	330c      	adds	r3, #12
 8002686:	623b      	str	r3, [r7, #32]
          break;
 8002688:	e01a      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002692:	2304      	movs	r3, #4
 8002694:	623b      	str	r3, [r7, #32]
          break;
 8002696:	e013      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d105      	bne.n	80026ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a0:	2308      	movs	r3, #8
 80026a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	611a      	str	r2, [r3, #16]
          break;
 80026aa:	e009      	b.n	80026c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026ac:	2308      	movs	r3, #8
 80026ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	615a      	str	r2, [r3, #20]
          break;
 80026b6:	e003      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026b8:	2300      	movs	r3, #0
 80026ba:	623b      	str	r3, [r7, #32]
          break;
 80026bc:	e000      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          break;
 80026be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2bff      	cmp	r3, #255	@ 0xff
 80026c4:	d801      	bhi.n	80026ca <HAL_GPIO_Init+0x13a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	e001      	b.n	80026ce <HAL_GPIO_Init+0x13e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3304      	adds	r3, #4
 80026ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2bff      	cmp	r3, #255	@ 0xff
 80026d4:	d802      	bhi.n	80026dc <HAL_GPIO_Init+0x14c>
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	e002      	b.n	80026e2 <HAL_GPIO_Init+0x152>
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	3b08      	subs	r3, #8
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	210f      	movs	r1, #15
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	401a      	ands	r2, r3
 80026f4:	6a39      	ldr	r1, [r7, #32]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	431a      	orrs	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80b1 	beq.w	8002872 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002710:	4b4d      	ldr	r3, [pc, #308]	@ (8002848 <HAL_GPIO_Init+0x2b8>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	4a4c      	ldr	r2, [pc, #304]	@ (8002848 <HAL_GPIO_Init+0x2b8>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6193      	str	r3, [r2, #24]
 800271c:	4b4a      	ldr	r3, [pc, #296]	@ (8002848 <HAL_GPIO_Init+0x2b8>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002728:	4a48      	ldr	r2, [pc, #288]	@ (800284c <HAL_GPIO_Init+0x2bc>)
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	3302      	adds	r3, #2
 8002730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002734:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	220f      	movs	r2, #15
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a40      	ldr	r2, [pc, #256]	@ (8002850 <HAL_GPIO_Init+0x2c0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d013      	beq.n	800277c <HAL_GPIO_Init+0x1ec>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3f      	ldr	r2, [pc, #252]	@ (8002854 <HAL_GPIO_Init+0x2c4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00d      	beq.n	8002778 <HAL_GPIO_Init+0x1e8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3e      	ldr	r2, [pc, #248]	@ (8002858 <HAL_GPIO_Init+0x2c8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d007      	beq.n	8002774 <HAL_GPIO_Init+0x1e4>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3d      	ldr	r2, [pc, #244]	@ (800285c <HAL_GPIO_Init+0x2cc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d101      	bne.n	8002770 <HAL_GPIO_Init+0x1e0>
 800276c:	2303      	movs	r3, #3
 800276e:	e006      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 8002770:	2304      	movs	r3, #4
 8002772:	e004      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 8002774:	2302      	movs	r3, #2
 8002776:	e002      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 800277c:	2300      	movs	r3, #0
 800277e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002780:	f002 0203 	and.w	r2, r2, #3
 8002784:	0092      	lsls	r2, r2, #2
 8002786:	4093      	lsls	r3, r2
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800278e:	492f      	ldr	r1, [pc, #188]	@ (800284c <HAL_GPIO_Init+0x2bc>)
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	3302      	adds	r3, #2
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	492c      	ldr	r1, [pc, #176]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	43db      	mvns	r3, r3
 80027be:	4928      	ldr	r1, [pc, #160]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027d0:	4b23      	ldr	r3, [pc, #140]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	4922      	ldr	r1, [pc, #136]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60cb      	str	r3, [r1, #12]
 80027dc:	e006      	b.n	80027ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027de:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	491e      	ldr	r1, [pc, #120]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027f8:	4b19      	ldr	r3, [pc, #100]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4918      	ldr	r1, [pc, #96]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002806:	4b16      	ldr	r3, [pc, #88]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	43db      	mvns	r3, r3
 800280e:	4914      	ldr	r1, [pc, #80]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 8002810:	4013      	ands	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d021      	beq.n	8002864 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002820:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	490e      	ldr	r1, [pc, #56]	@ (8002860 <HAL_GPIO_Init+0x2d0>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
 800282c:	e021      	b.n	8002872 <HAL_GPIO_Init+0x2e2>
 800282e:	bf00      	nop
 8002830:	10320000 	.word	0x10320000
 8002834:	10310000 	.word	0x10310000
 8002838:	10220000 	.word	0x10220000
 800283c:	10210000 	.word	0x10210000
 8002840:	10120000 	.word	0x10120000
 8002844:	10110000 	.word	0x10110000
 8002848:	40021000 	.word	0x40021000
 800284c:	40010000 	.word	0x40010000
 8002850:	40010800 	.word	0x40010800
 8002854:	40010c00 	.word	0x40010c00
 8002858:	40011000 	.word	0x40011000
 800285c:	40011400 	.word	0x40011400
 8002860:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002864:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <HAL_GPIO_Init+0x304>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	43db      	mvns	r3, r3
 800286c:	4909      	ldr	r1, [pc, #36]	@ (8002894 <HAL_GPIO_Init+0x304>)
 800286e:	4013      	ands	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	3301      	adds	r3, #1
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	f47f ae8e 	bne.w	80025a4 <HAL_GPIO_Init+0x14>
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	372c      	adds	r7, #44	@ 0x2c
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	40010400 	.word	0x40010400

08002898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	887b      	ldrh	r3, [r7, #2]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	e001      	b.n	80028ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	460b      	mov	r3, r1
 80028d0:	807b      	strh	r3, [r7, #2]
 80028d2:	4613      	mov	r3, r2
 80028d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d6:	787b      	ldrb	r3, [r7, #1]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028dc:	887a      	ldrh	r2, [r7, #2]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028e2:	e003      	b.n	80028ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	041a      	lsls	r2, r3, #16
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	611a      	str	r2, [r3, #16]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002902:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290e:	4a05      	ldr	r2, [pc, #20]	@ (8002924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f806 	bl	8002928 <HAL_GPIO_EXTI_Callback>
  }
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40010400 	.word	0x40010400

08002928 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e12b      	b.n	8002ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fd66 	bl	8001434 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	@ 0x24
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800298e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800299e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029a0:	f001 f83e 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80029a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a81      	ldr	r2, [pc, #516]	@ (8002bb0 <HAL_I2C_Init+0x274>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d807      	bhi.n	80029c0 <HAL_I2C_Init+0x84>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a80      	ldr	r2, [pc, #512]	@ (8002bb4 <HAL_I2C_Init+0x278>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	bf94      	ite	ls
 80029b8:	2301      	movls	r3, #1
 80029ba:	2300      	movhi	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e006      	b.n	80029ce <HAL_I2C_Init+0x92>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a7d      	ldr	r2, [pc, #500]	@ (8002bb8 <HAL_I2C_Init+0x27c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	bf94      	ite	ls
 80029c8:	2301      	movls	r3, #1
 80029ca:	2300      	movhi	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0e7      	b.n	8002ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a78      	ldr	r2, [pc, #480]	@ (8002bbc <HAL_I2C_Init+0x280>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0c9b      	lsrs	r3, r3, #18
 80029e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a6a      	ldr	r2, [pc, #424]	@ (8002bb0 <HAL_I2C_Init+0x274>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d802      	bhi.n	8002a10 <HAL_I2C_Init+0xd4>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	e009      	b.n	8002a24 <HAL_I2C_Init+0xe8>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	4a69      	ldr	r2, [pc, #420]	@ (8002bc0 <HAL_I2C_Init+0x284>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	3301      	adds	r3, #1
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	495c      	ldr	r1, [pc, #368]	@ (8002bb0 <HAL_I2C_Init+0x274>)
 8002a40:	428b      	cmp	r3, r1
 8002a42:	d819      	bhi.n	8002a78 <HAL_I2C_Init+0x13c>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e59      	subs	r1, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a52:	1c59      	adds	r1, r3, #1
 8002a54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a58:	400b      	ands	r3, r1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_I2C_Init+0x138>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e59      	subs	r1, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a72:	e051      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e04f      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d111      	bne.n	8002aa4 <HAL_I2C_Init+0x168>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e58      	subs	r0, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e012      	b.n	8002aca <HAL_I2C_Init+0x18e>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	0099      	lsls	r1, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Init+0x196>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e022      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10e      	bne.n	8002af8 <HAL_I2C_Init+0x1bc>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1e58      	subs	r0, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6859      	ldr	r1, [r3, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	440b      	add	r3, r1
 8002ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002af6:	e00f      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	0099      	lsls	r1, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	6809      	ldr	r1, [r1, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6911      	ldr	r1, [r2, #16]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68d2      	ldr	r2, [r2, #12]
 8002b52:	4311      	orrs	r1, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	000186a0 	.word	0x000186a0
 8002bb4:	001e847f 	.word	0x001e847f
 8002bb8:	003d08ff 	.word	0x003d08ff
 8002bbc:	431bde83 	.word	0x431bde83
 8002bc0:	10624dd3 	.word	0x10624dd3

08002bc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	817b      	strh	r3, [r7, #10]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bd8:	f7ff fb9e 	bl	8002318 <HAL_GetTick>
 8002bdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	f040 80e0 	bne.w	8002dac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	2319      	movs	r3, #25
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4970      	ldr	r1, [pc, #448]	@ (8002db8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f964 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0d3      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_I2C_Master_Transmit+0x50>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e0cc      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d007      	beq.n	8002c3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2221      	movs	r2, #33	@ 0x21
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2210      	movs	r2, #16
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	893a      	ldrh	r2, [r7, #8]
 8002c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a50      	ldr	r2, [pc, #320]	@ (8002dbc <HAL_I2C_Master_Transmit+0x1f8>)
 8002c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c7c:	8979      	ldrh	r1, [r7, #10]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	6a3a      	ldr	r2, [r7, #32]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f89c 	bl	8002dc0 <I2C_MasterRequestWrite>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e08d      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ca8:	e066      	b.n	8002d78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	6a39      	ldr	r1, [r7, #32]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fa22 	bl	80030f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d107      	bne.n	8002cd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e06b      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d11b      	bne.n	8002d4c <HAL_I2C_Master_Transmit+0x188>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d017      	beq.n	8002d4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	6a39      	ldr	r1, [r7, #32]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fa19 	bl	8003188 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d107      	bne.n	8002d74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e01a      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d194      	bne.n	8002caa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	00100002 	.word	0x00100002
 8002dbc:	ffff0000 	.word	0xffff0000

08002dc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d006      	beq.n	8002dea <I2C_MasterRequestWrite+0x2a>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d003      	beq.n	8002dea <I2C_MasterRequestWrite+0x2a>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002de8:	d108      	bne.n	8002dfc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e00b      	b.n	8002e14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	2b12      	cmp	r3, #18
 8002e02:	d107      	bne.n	8002e14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f84f 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e3a:	d103      	bne.n	8002e44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e035      	b.n	8002eb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e50:	d108      	bne.n	8002e64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e52:	897b      	ldrh	r3, [r7, #10]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e60:	611a      	str	r2, [r3, #16]
 8002e62:	e01b      	b.n	8002e9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e64:	897b      	ldrh	r3, [r7, #10]
 8002e66:	11db      	asrs	r3, r3, #7
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 0306 	and.w	r3, r3, #6
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f063 030f 	orn	r3, r3, #15
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	490e      	ldr	r1, [pc, #56]	@ (8002ebc <I2C_MasterRequestWrite+0xfc>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f898 	bl	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e010      	b.n	8002eb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e92:	897b      	ldrh	r3, [r7, #10]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4907      	ldr	r1, [pc, #28]	@ (8002ec0 <I2C_MasterRequestWrite+0x100>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f888 	bl	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	00010008 	.word	0x00010008
 8002ec0:	00010002 	.word	0x00010002

08002ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed4:	e048      	b.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d044      	beq.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7ff fa1b 	bl	8002318 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d139      	bne.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	0c1b      	lsrs	r3, r3, #16
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d10d      	bne.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	43da      	mvns	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	e00c      	b.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	43da      	mvns	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4013      	ands	r3, r2
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d116      	bne.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	f043 0220 	orr.w	r2, r3, #32
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e023      	b.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d10d      	bne.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	e00c      	b.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	43da      	mvns	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d093      	beq.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fc6:	e071      	b.n	80030ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd6:	d123      	bne.n	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300c:	f043 0204 	orr.w	r2, r3, #4
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e067      	b.n	80030f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003026:	d041      	beq.n	80030ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003028:	f7ff f976 	bl	8002318 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d302      	bcc.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d136      	bne.n	80030ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10c      	bne.n	8003062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	43da      	mvns	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4013      	ands	r3, r2
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	bf14      	ite	ne
 800305a:	2301      	movne	r3, #1
 800305c:	2300      	moveq	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	e00b      	b.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	43da      	mvns	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	4013      	ands	r3, r2
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf14      	ite	ne
 8003074:	2301      	movne	r3, #1
 8003076:	2300      	moveq	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	f043 0220 	orr.w	r2, r3, #32
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e021      	b.n	80030f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	0c1b      	lsrs	r3, r3, #16
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d10c      	bne.n	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	43da      	mvns	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4013      	ands	r3, r2
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf14      	ite	ne
 80030c8:	2301      	movne	r3, #1
 80030ca:	2300      	moveq	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	e00b      	b.n	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	43da      	mvns	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f47f af6d 	bne.w	8002fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003104:	e034      	b.n	8003170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f886 	bl	8003218 <I2C_IsAcknowledgeFailed>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e034      	b.n	8003180 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d028      	beq.n	8003170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7ff f8fb 	bl	8002318 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d11d      	bne.n	8003170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313e:	2b80      	cmp	r3, #128	@ 0x80
 8003140:	d016      	beq.n	8003170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e007      	b.n	8003180 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317a:	2b80      	cmp	r3, #128	@ 0x80
 800317c:	d1c3      	bne.n	8003106 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003194:	e034      	b.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f83e 	bl	8003218 <I2C_IsAcknowledgeFailed>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e034      	b.n	8003210 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d028      	beq.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ae:	f7ff f8b3 	bl	8002318 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d302      	bcc.n	80031c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d11d      	bne.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d016      	beq.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e007      	b.n	8003210 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b04      	cmp	r3, #4
 800320c:	d1c3      	bne.n	8003196 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322e:	d11b      	bne.n	8003268 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003238:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	f043 0204 	orr.w	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003278:	4b03      	ldr	r3, [pc, #12]	@ (8003288 <HAL_PWR_EnableBkUpAccess+0x14>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	420e0020 	.word	0x420e0020

0800328c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e272      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8087 	beq.w	80033ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ac:	4b92      	ldr	r3, [pc, #584]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d00c      	beq.n	80032d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032b8:	4b8f      	ldr	r3, [pc, #572]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d112      	bne.n	80032ea <HAL_RCC_OscConfig+0x5e>
 80032c4:	4b8c      	ldr	r3, [pc, #560]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d0:	d10b      	bne.n	80032ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d2:	4b89      	ldr	r3, [pc, #548]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d06c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x12c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d168      	bne.n	80033b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e24c      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x76>
 80032f4:	4b80      	ldr	r3, [pc, #512]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a7f      	ldr	r2, [pc, #508]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	e02e      	b.n	8003360 <HAL_RCC_OscConfig+0xd4>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x98>
 800330a:	4b7b      	ldr	r3, [pc, #492]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7a      	ldr	r2, [pc, #488]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003310:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b78      	ldr	r3, [pc, #480]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a77      	ldr	r2, [pc, #476]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800331c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e01d      	b.n	8003360 <HAL_RCC_OscConfig+0xd4>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0xbc>
 800332e:	4b72      	ldr	r3, [pc, #456]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a71      	ldr	r2, [pc, #452]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b6f      	ldr	r3, [pc, #444]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6e      	ldr	r2, [pc, #440]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e00b      	b.n	8003360 <HAL_RCC_OscConfig+0xd4>
 8003348:	4b6b      	ldr	r3, [pc, #428]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a6a      	ldr	r2, [pc, #424]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800334e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	4b68      	ldr	r3, [pc, #416]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a67      	ldr	r2, [pc, #412]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800335a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800335e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d013      	beq.n	8003390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe ffd6 	bl	8002318 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003370:	f7fe ffd2 	bl	8002318 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	@ 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e200      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	4b5d      	ldr	r3, [pc, #372]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0xe4>
 800338e:	e014      	b.n	80033ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fe ffc2 	bl	8002318 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003398:	f7fe ffbe 	bl	8002318 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	@ 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e1ec      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	4b53      	ldr	r3, [pc, #332]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x10c>
 80033b6:	e000      	b.n	80033ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d063      	beq.n	800348e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033c6:	4b4c      	ldr	r3, [pc, #304]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033d2:	4b49      	ldr	r3, [pc, #292]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d11c      	bne.n	8003418 <HAL_RCC_OscConfig+0x18c>
 80033de:	4b46      	ldr	r3, [pc, #280]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d116      	bne.n	8003418 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ea:	4b43      	ldr	r3, [pc, #268]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_RCC_OscConfig+0x176>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d001      	beq.n	8003402 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e1c0      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003402:	4b3d      	ldr	r3, [pc, #244]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4939      	ldr	r1, [pc, #228]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003416:	e03a      	b.n	800348e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d020      	beq.n	8003462 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003420:	4b36      	ldr	r3, [pc, #216]	@ (80034fc <HAL_RCC_OscConfig+0x270>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe ff77 	bl	8002318 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342e:	f7fe ff73 	bl	8002318 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e1a1      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	4b2d      	ldr	r3, [pc, #180]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344c:	4b2a      	ldr	r3, [pc, #168]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4927      	ldr	r1, [pc, #156]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800345c:	4313      	orrs	r3, r2
 800345e:	600b      	str	r3, [r1, #0]
 8003460:	e015      	b.n	800348e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003462:	4b26      	ldr	r3, [pc, #152]	@ (80034fc <HAL_RCC_OscConfig+0x270>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe ff56 	bl	8002318 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003470:	f7fe ff52 	bl	8002318 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e180      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	4b1d      	ldr	r3, [pc, #116]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d03a      	beq.n	8003510 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d019      	beq.n	80034d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a2:	4b17      	ldr	r3, [pc, #92]	@ (8003500 <HAL_RCC_OscConfig+0x274>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a8:	f7fe ff36 	bl	8002318 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b0:	f7fe ff32 	bl	8002318 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e160      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	4b0d      	ldr	r3, [pc, #52]	@ (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034ce:	2001      	movs	r0, #1
 80034d0:	f000 face 	bl	8003a70 <RCC_Delay>
 80034d4:	e01c      	b.n	8003510 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003500 <HAL_RCC_OscConfig+0x274>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034dc:	f7fe ff1c 	bl	8002318 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e2:	e00f      	b.n	8003504 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e4:	f7fe ff18 	bl	8002318 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d908      	bls.n	8003504 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e146      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	42420000 	.word	0x42420000
 8003500:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003504:	4b92      	ldr	r3, [pc, #584]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e9      	bne.n	80034e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80a6 	beq.w	800366a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003522:	4b8b      	ldr	r3, [pc, #556]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	4b88      	ldr	r3, [pc, #544]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	4a87      	ldr	r2, [pc, #540]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003538:	61d3      	str	r3, [r2, #28]
 800353a:	4b85      	ldr	r3, [pc, #532]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354a:	4b82      	ldr	r3, [pc, #520]	@ (8003754 <HAL_RCC_OscConfig+0x4c8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d118      	bne.n	8003588 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003556:	4b7f      	ldr	r3, [pc, #508]	@ (8003754 <HAL_RCC_OscConfig+0x4c8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a7e      	ldr	r2, [pc, #504]	@ (8003754 <HAL_RCC_OscConfig+0x4c8>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003562:	f7fe fed9 	bl	8002318 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356a:	f7fe fed5 	bl	8002318 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b64      	cmp	r3, #100	@ 0x64
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e103      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	4b75      	ldr	r3, [pc, #468]	@ (8003754 <HAL_RCC_OscConfig+0x4c8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x312>
 8003590:	4b6f      	ldr	r3, [pc, #444]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	4a6e      	ldr	r2, [pc, #440]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6213      	str	r3, [r2, #32]
 800359c:	e02d      	b.n	80035fa <HAL_RCC_OscConfig+0x36e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x334>
 80035a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4a69      	ldr	r2, [pc, #420]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6213      	str	r3, [r2, #32]
 80035b2:	4b67      	ldr	r3, [pc, #412]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4a66      	ldr	r2, [pc, #408]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	6213      	str	r3, [r2, #32]
 80035be:	e01c      	b.n	80035fa <HAL_RCC_OscConfig+0x36e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d10c      	bne.n	80035e2 <HAL_RCC_OscConfig+0x356>
 80035c8:	4b61      	ldr	r3, [pc, #388]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	4a60      	ldr	r2, [pc, #384]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	6213      	str	r3, [r2, #32]
 80035d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6213      	str	r3, [r2, #32]
 80035e0:	e00b      	b.n	80035fa <HAL_RCC_OscConfig+0x36e>
 80035e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6213      	str	r3, [r2, #32]
 80035ee:	4b58      	ldr	r3, [pc, #352]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4a57      	ldr	r2, [pc, #348]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d015      	beq.n	800362e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003602:	f7fe fe89 	bl	8002318 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003608:	e00a      	b.n	8003620 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f7fe fe85 	bl	8002318 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0b1      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003620:	4b4b      	ldr	r3, [pc, #300]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ee      	beq.n	800360a <HAL_RCC_OscConfig+0x37e>
 800362c:	e014      	b.n	8003658 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362e:	f7fe fe73 	bl	8002318 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003634:	e00a      	b.n	800364c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fe fe6f 	bl	8002318 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e09b      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364c:	4b40      	ldr	r3, [pc, #256]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ee      	bne.n	8003636 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d105      	bne.n	800366a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365e:	4b3c      	ldr	r3, [pc, #240]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4a3b      	ldr	r2, [pc, #236]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003668:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8087 	beq.w	8003782 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003674:	4b36      	ldr	r3, [pc, #216]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b08      	cmp	r3, #8
 800367e:	d061      	beq.n	8003744 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d146      	bne.n	8003716 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003688:	4b33      	ldr	r3, [pc, #204]	@ (8003758 <HAL_RCC_OscConfig+0x4cc>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fe fe43 	bl	8002318 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003696:	f7fe fe3f 	bl	8002318 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e06d      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a8:	4b29      	ldr	r3, [pc, #164]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036bc:	d108      	bne.n	80036d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036be:	4b24      	ldr	r3, [pc, #144]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	4921      	ldr	r1, [pc, #132]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a19      	ldr	r1, [r3, #32]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	430b      	orrs	r3, r1
 80036e2:	491b      	ldr	r1, [pc, #108]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <HAL_RCC_OscConfig+0x4cc>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ee:	f7fe fe13 	bl	8002318 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fe fe0f 	bl	8002318 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e03d      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003708:	4b11      	ldr	r3, [pc, #68]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x46a>
 8003714:	e035      	b.n	8003782 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <HAL_RCC_OscConfig+0x4cc>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fdfc 	bl	8002318 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fdf8 	bl	8002318 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e026      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003736:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x498>
 8003742:	e01e      	b.n	8003782 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d107      	bne.n	800375c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e019      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
 8003750:	40021000 	.word	0x40021000
 8003754:	40007000 	.word	0x40007000
 8003758:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800375c:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <HAL_RCC_OscConfig+0x500>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	429a      	cmp	r2, r3
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000

08003790 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0d0      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d910      	bls.n	80037d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b67      	ldr	r3, [pc, #412]	@ (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 0207 	bic.w	r2, r3, #7
 80037ba:	4965      	ldr	r1, [pc, #404]	@ (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b63      	ldr	r3, [pc, #396]	@ (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0b8      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ec:	4b59      	ldr	r3, [pc, #356]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4a58      	ldr	r2, [pc, #352]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003804:	4b53      	ldr	r3, [pc, #332]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4a52      	ldr	r2, [pc, #328]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800380e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b50      	ldr	r3, [pc, #320]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	494d      	ldr	r1, [pc, #308]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d040      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	4b47      	ldr	r3, [pc, #284]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d115      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e07f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	4b41      	ldr	r3, [pc, #260]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e073      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385e:	4b3d      	ldr	r3, [pc, #244]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e06b      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386e:	4b39      	ldr	r3, [pc, #228]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4936      	ldr	r1, [pc, #216]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003880:	f7fe fd4a 	bl	8002318 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	e00a      	b.n	800389e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003888:	f7fe fd46 	bl	8002318 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e053      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	4b2d      	ldr	r3, [pc, #180]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 020c 	and.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d1eb      	bne.n	8003888 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038b0:	4b27      	ldr	r3, [pc, #156]	@ (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d210      	bcs.n	80038e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b24      	ldr	r3, [pc, #144]	@ (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 0207 	bic.w	r2, r3, #7
 80038c6:	4922      	ldr	r1, [pc, #136]	@ (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b20      	ldr	r3, [pc, #128]	@ (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e032      	b.n	8003946 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ec:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4916      	ldr	r1, [pc, #88]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800390a:	4b12      	ldr	r3, [pc, #72]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	490e      	ldr	r1, [pc, #56]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800391e:	f000 f821 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8003922:	4602      	mov	r2, r0
 8003924:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	490a      	ldr	r1, [pc, #40]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	5ccb      	ldrb	r3, [r1, r3]
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	4a09      	ldr	r2, [pc, #36]	@ (800395c <HAL_RCC_ClockConfig+0x1cc>)
 8003938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800393a:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <HAL_RCC_ClockConfig+0x1d0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fca8 	bl	8002294 <HAL_InitTick>

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40022000 	.word	0x40022000
 8003954:	40021000 	.word	0x40021000
 8003958:	080054d0 	.word	0x080054d0
 800395c:	2000000c 	.word	0x2000000c
 8003960:	20000010 	.word	0x20000010

08003964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800397e:	4b1e      	ldr	r3, [pc, #120]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b04      	cmp	r3, #4
 800398c:	d002      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x30>
 800398e:	2b08      	cmp	r3, #8
 8003990:	d003      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x36>
 8003992:	e027      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003994:	4b19      	ldr	r3, [pc, #100]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x98>)
 8003996:	613b      	str	r3, [r7, #16]
      break;
 8003998:	e027      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	0c9b      	lsrs	r3, r3, #18
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	4a17      	ldr	r2, [pc, #92]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039a4:	5cd3      	ldrb	r3, [r2, r3]
 80039a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d010      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039b2:	4b11      	ldr	r3, [pc, #68]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	0c5b      	lsrs	r3, r3, #17
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	4a11      	ldr	r2, [pc, #68]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a0d      	ldr	r2, [pc, #52]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x98>)
 80039c6:	fb03 f202 	mul.w	r2, r3, r2
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	e004      	b.n	80039de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003a08 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039d8:	fb02 f303 	mul.w	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	613b      	str	r3, [r7, #16]
      break;
 80039e2:	e002      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x98>)
 80039e6:	613b      	str	r3, [r7, #16]
      break;
 80039e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ea:	693b      	ldr	r3, [r7, #16]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	007a1200 	.word	0x007a1200
 8003a00:	080054e8 	.word	0x080054e8
 8003a04:	080054f8 	.word	0x080054f8
 8003a08:	003d0900 	.word	0x003d0900

08003a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a10:	4b02      	ldr	r3, [pc, #8]	@ (8003a1c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	2000000c 	.word	0x2000000c

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff fff2 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4903      	ldr	r1, [pc, #12]	@ (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021000 	.word	0x40021000
 8003a44:	080054e0 	.word	0x080054e0

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a4c:	f7ff ffde 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	0adb      	lsrs	r3, r3, #11
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4903      	ldr	r1, [pc, #12]	@ (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	080054e0 	.word	0x080054e0

08003a70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a78:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <RCC_Delay+0x34>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa8 <RCC_Delay+0x38>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	0a5b      	lsrs	r3, r3, #9
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a8c:	bf00      	nop
  }
  while (Delay --);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1e5a      	subs	r2, r3, #1
 8003a92:	60fa      	str	r2, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f9      	bne.n	8003a8c <RCC_Delay+0x1c>
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	2000000c 	.word	0x2000000c
 8003aa8:	10624dd3 	.word	0x10624dd3

08003aac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d07d      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003acc:	4b4f      	ldr	r3, [pc, #316]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10d      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	4a4b      	ldr	r2, [pc, #300]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae2:	61d3      	str	r3, [r2, #28]
 8003ae4:	4b49      	ldr	r3, [pc, #292]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af0:	2301      	movs	r3, #1
 8003af2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	4b46      	ldr	r3, [pc, #280]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d118      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b00:	4b43      	ldr	r3, [pc, #268]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a42      	ldr	r2, [pc, #264]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0c:	f7fe fc04 	bl	8002318 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b12:	e008      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b14:	f7fe fc00 	bl	8002318 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	@ 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e06d      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	4b3a      	ldr	r3, [pc, #232]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b32:	4b36      	ldr	r3, [pc, #216]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d02e      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d027      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b50:	4b2e      	ldr	r3, [pc, #184]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b60:	4b2c      	ldr	r3, [pc, #176]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b66:	4a29      	ldr	r2, [pc, #164]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d014      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fe fbcf 	bl	8002318 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fe fbcb 	bl	8002318 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e036      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	4b1d      	ldr	r3, [pc, #116]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ee      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4917      	ldr	r1, [pc, #92]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d105      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb8:	4b14      	ldr	r3, [pc, #80]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	4a13      	ldr	r2, [pc, #76]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	490b      	ldr	r1, [pc, #44]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bee:	4b07      	ldr	r3, [pc, #28]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4904      	ldr	r1, [pc, #16]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40007000 	.word	0x40007000
 8003c14:	42420440 	.word	0x42420440

08003c18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	2300      	movs	r3, #0
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	2300      	movs	r3, #0
 8003c32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b10      	cmp	r3, #16
 8003c3e:	f200 808a 	bhi.w	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d045      	beq.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d075      	beq.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c4e:	e082      	b.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003c50:	4b46      	ldr	r3, [pc, #280]	@ (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c56:	4b45      	ldr	r3, [pc, #276]	@ (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d07b      	beq.n	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	0c9b      	lsrs	r3, r3, #18
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	4a41      	ldr	r2, [pc, #260]	@ (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003c6c:	5cd3      	ldrb	r3, [r2, r3]
 8003c6e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d015      	beq.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	0c5b      	lsrs	r3, r3, #17
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	4a3b      	ldr	r2, [pc, #236]	@ (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003c86:	5cd3      	ldrb	r3, [r2, r3]
 8003c88:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00d      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c94:	4a38      	ldr	r2, [pc, #224]	@ (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	e004      	b.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4a34      	ldr	r2, [pc, #208]	@ (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	61bb      	str	r3, [r7, #24]
      break;
 8003cc2:	e04a      	b.n	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	61bb      	str	r3, [r7, #24]
      break;
 8003cd2:	e042      	b.n	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003cd4:	4b25      	ldr	r3, [pc, #148]	@ (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ce4:	d108      	bne.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003cf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	e01f      	b.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d02:	d109      	bne.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d04:	4b19      	ldr	r3, [pc, #100]	@ (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003d10:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	e00f      	b.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d22:	d11c      	bne.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d24:	4b11      	ldr	r3, [pc, #68]	@ (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d016      	beq.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003d30:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003d34:	61bb      	str	r3, [r7, #24]
      break;
 8003d36:	e012      	b.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d38:	e011      	b.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d3a:	f7ff fe85 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	0b9b      	lsrs	r3, r3, #14
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	61bb      	str	r3, [r7, #24]
      break;
 8003d54:	e004      	b.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d56:	bf00      	nop
 8003d58:	e002      	b.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d5e:	bf00      	nop
    }
  }
  return (frequency);
 8003d60:	69bb      	ldr	r3, [r7, #24]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	080054fc 	.word	0x080054fc
 8003d74:	0800550c 	.word	0x0800550c
 8003d78:	007a1200 	.word	0x007a1200
 8003d7c:	003d0900 	.word	0x003d0900
 8003d80:	aaaaaaab 	.word	0xaaaaaaab

08003d84 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e07a      	b.n	8003e90 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	7c5b      	ldrb	r3, [r3, #17]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d105      	bne.n	8003db0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd fb92 	bl	80014d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 faea 	bl	8004390 <HAL_RTC_WaitForSynchro>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e061      	b.n	8003e90 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fba3 	bl	8004518 <RTC_EnterInitMode>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2204      	movs	r2, #4
 8003ddc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e056      	b.n	8003e90 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0207 	bic.w	r2, r2, #7
 8003df0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003dfa:	4b27      	ldr	r3, [pc, #156]	@ (8003e98 <HAL_RTC_Init+0x114>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	4a26      	ldr	r2, [pc, #152]	@ (8003e98 <HAL_RTC_Init+0x114>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003e06:	4b24      	ldr	r3, [pc, #144]	@ (8003e98 <HAL_RTC_Init+0x114>)
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	4921      	ldr	r1, [pc, #132]	@ (8003e98 <HAL_RTC_Init+0x114>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d003      	beq.n	8003e2a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e00e      	b.n	8003e48 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	f7ff fef4 	bl	8003c18 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e30:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e026      	b.n	8003e90 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	0c1a      	lsrs	r2, r3, #16
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f002 020f 	and.w	r2, r2, #15
 8003e54:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	b292      	uxth	r2, r2
 8003e5e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fb81 	bl	8004568 <RTC_ExitInitMode>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e00c      	b.n	8003e90 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40006c00 	.word	0x40006c00

08003e9c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	2300      	movs	r3, #0
 8003eae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_RTC_SetTime+0x20>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e080      	b.n	8003fc2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	7c1b      	ldrb	r3, [r3, #16]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_RTC_SetTime+0x30>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e07a      	b.n	8003fc2 <HAL_RTC_SetTime+0x126>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d113      	bne.n	8003f06 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003ee8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a5b      	subs	r3, r3, r1
 8003ef8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003efa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003f00:	4413      	add	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	e01e      	b.n	8003f44 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fb71 	bl	80045f2 <RTC_Bcd2ToByte>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003f18:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fb66 	bl	80045f2 <RTC_Bcd2ToByte>
 8003f26:	4603      	mov	r3, r0
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f32:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	789b      	ldrb	r3, [r3, #2]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fb5a 	bl	80045f2 <RTC_Bcd2ToByte>
 8003f3e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f40:	4423      	add	r3, r4
 8003f42:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003f44:	6979      	ldr	r1, [r7, #20]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fa7f 	bl	800444a <RTC_WriteTimeCounter>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2204      	movs	r2, #4
 8003f56:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e02f      	b.n	8003fc2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0205 	bic.w	r2, r2, #5
 8003f70:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 fa90 	bl	8004498 <RTC_ReadAlarmCounter>
 8003f78:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d018      	beq.n	8003fb4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d214      	bcs.n	8003fb4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003f90:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003f94:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003f96:	6939      	ldr	r1, [r7, #16]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fa96 	bl	80044ca <RTC_WriteAlarmCounter>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e006      	b.n	8003fc2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd90      	pop	{r4, r7, pc}
	...

08003fcc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_RTC_GetTime+0x28>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0b5      	b.n	8004164 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e0ac      	b.n	8004164 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f9ed 	bl	80043ea <RTC_ReadTimeCounter>
 8004010:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4a55      	ldr	r2, [pc, #340]	@ (800416c <HAL_RTC_GetTime+0x1a0>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	0adb      	lsrs	r3, r3, #11
 800401c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4b52      	ldr	r3, [pc, #328]	@ (800416c <HAL_RTC_GetTime+0x1a0>)
 8004022:	fba3 1302 	umull	r1, r3, r3, r2
 8004026:	0adb      	lsrs	r3, r3, #11
 8004028:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	4a4f      	ldr	r2, [pc, #316]	@ (8004170 <HAL_RTC_GetTime+0x1a4>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	b2da      	uxtb	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	4a4a      	ldr	r2, [pc, #296]	@ (800416c <HAL_RTC_GetTime+0x1a0>)
 8004044:	fba2 1203 	umull	r1, r2, r2, r3
 8004048:	0ad2      	lsrs	r2, r2, #11
 800404a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800404e:	fb01 f202 	mul.w	r2, r1, r2
 8004052:	1a9a      	subs	r2, r3, r2
 8004054:	4b46      	ldr	r3, [pc, #280]	@ (8004170 <HAL_RTC_GetTime+0x1a4>)
 8004056:	fba3 1302 	umull	r1, r3, r3, r2
 800405a:	0959      	lsrs	r1, r3, #5
 800405c:	460b      	mov	r3, r1
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1a5b      	subs	r3, r3, r1
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	1ad1      	subs	r1, r2, r3
 8004066:	b2ca      	uxtb	r2, r1
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b17      	cmp	r3, #23
 8004070:	d955      	bls.n	800411e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4a3f      	ldr	r2, [pc, #252]	@ (8004174 <HAL_RTC_GetTime+0x1a8>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800407e:	6939      	ldr	r1, [r7, #16]
 8004080:	4b3c      	ldr	r3, [pc, #240]	@ (8004174 <HAL_RTC_GetTime+0x1a8>)
 8004082:	fba3 2301 	umull	r2, r3, r3, r1
 8004086:	091a      	lsrs	r2, r3, #4
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	1aca      	subs	r2, r1, r3
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f9fd 	bl	8004498 <RTC_ReadAlarmCounter>
 800409e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d008      	beq.n	80040ba <HAL_RTC_GetTime+0xee>
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d904      	bls.n	80040ba <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	e002      	b.n	80040c0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295
 80040be:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004178 <HAL_RTC_GetTime+0x1ac>)
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80040ce:	69b9      	ldr	r1, [r7, #24]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f9ba 	bl	800444a <RTC_WriteTimeCounter>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e041      	b.n	8004164 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d00c      	beq.n	8004102 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	4413      	add	r3, r2
 80040ee:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80040f0:	69f9      	ldr	r1, [r7, #28]
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f9e9 	bl	80044ca <RTC_WriteAlarmCounter>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e030      	b.n	8004164 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004102:	69f9      	ldr	r1, [r7, #28]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f9e0 	bl	80044ca <RTC_WriteAlarmCounter>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e027      	b.n	8004164 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004114:	6979      	ldr	r1, [r7, #20]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fa88 	bl	800462c <RTC_DateUpdate>
 800411c:	e003      	b.n	8004126 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01a      	beq.n	8004162 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fa41 	bl	80045b8 <RTC_ByteToBcd2>
 8004136:	4603      	mov	r3, r0
 8004138:	461a      	mov	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fa38 	bl	80045b8 <RTC_ByteToBcd2>
 8004148:	4603      	mov	r3, r0
 800414a:	461a      	mov	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	789b      	ldrb	r3, [r3, #2]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fa2f 	bl	80045b8 <RTC_ByteToBcd2>
 800415a:	4603      	mov	r3, r0
 800415c:	461a      	mov	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	91a2b3c5 	.word	0x91a2b3c5
 8004170:	88888889 	.word	0x88888889
 8004174:	aaaaaaab 	.word	0xaaaaaaab
 8004178:	00015180 	.word	0x00015180

0800417c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	2300      	movs	r3, #0
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_RTC_SetDate+0x24>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e097      	b.n	80042d4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	7c1b      	ldrb	r3, [r3, #16]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_RTC_SetDate+0x34>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e091      	b.n	80042d4 <HAL_RTC_SetDate+0x158>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2202      	movs	r2, #2
 80041ba:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10c      	bne.n	80041dc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	78da      	ldrb	r2, [r3, #3]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	785a      	ldrb	r2, [r3, #1]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	789a      	ldrb	r2, [r3, #2]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	739a      	strb	r2, [r3, #14]
 80041da:	e01a      	b.n	8004212 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	78db      	ldrb	r3, [r3, #3]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fa06 	bl	80045f2 <RTC_Bcd2ToByte>
 80041e6:	4603      	mov	r3, r0
 80041e8:	461a      	mov	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 f9fd 	bl	80045f2 <RTC_Bcd2ToByte>
 80041f8:	4603      	mov	r3, r0
 80041fa:	461a      	mov	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	789b      	ldrb	r3, [r3, #2]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f9f4 	bl	80045f2 <RTC_Bcd2ToByte>
 800420a:	4603      	mov	r3, r0
 800420c:	461a      	mov	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	7bdb      	ldrb	r3, [r3, #15]
 8004216:	4618      	mov	r0, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	7b59      	ldrb	r1, [r3, #13]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	7b9b      	ldrb	r3, [r3, #14]
 8004220:	461a      	mov	r2, r3
 8004222:	f000 fadf 	bl	80047e4 <RTC_WeekDayNum>
 8004226:	4603      	mov	r3, r0
 8004228:	461a      	mov	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	7b1a      	ldrb	r2, [r3, #12]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f8d7 	bl	80043ea <RTC_ReadTimeCounter>
 800423c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4a26      	ldr	r2, [pc, #152]	@ (80042dc <HAL_RTC_SetDate+0x160>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	0adb      	lsrs	r3, r3, #11
 8004248:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b18      	cmp	r3, #24
 800424e:	d93a      	bls.n	80042c6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	4a23      	ldr	r2, [pc, #140]	@ (80042e0 <HAL_RTC_SetDate+0x164>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	4a22      	ldr	r2, [pc, #136]	@ (80042e4 <HAL_RTC_SetDate+0x168>)
 800425c:	fb02 f303 	mul.w	r3, r2, r3
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004266:	69f9      	ldr	r1, [r7, #28]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f8ee 	bl	800444a <RTC_WriteTimeCounter>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2204      	movs	r2, #4
 8004278:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e027      	b.n	80042d4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f907 	bl	8004498 <RTC_ReadAlarmCounter>
 800428a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d018      	beq.n	80042c6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	429a      	cmp	r2, r3
 800429a:	d214      	bcs.n	80042c6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80042a2:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80042a6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80042a8:	69b9      	ldr	r1, [r7, #24]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f90d 	bl	80044ca <RTC_WriteAlarmCounter>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2204      	movs	r2, #4
 80042ba:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e006      	b.n	80042d4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	91a2b3c5 	.word	0x91a2b3c5
 80042e0:	aaaaaaab 	.word	0xaaaaaaab
 80042e4:	00015180 	.word	0x00015180

080042e8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80042f4:	f107 0314 	add.w	r3, r7, #20
 80042f8:	2100      	movs	r1, #0
 80042fa:	460a      	mov	r2, r1
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	460a      	mov	r2, r1
 8004300:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_RTC_GetDate+0x26>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e03a      	b.n	8004388 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004312:	f107 0314 	add.w	r3, r7, #20
 8004316:	2200      	movs	r2, #0
 8004318:	4619      	mov	r1, r3
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fe56 	bl	8003fcc <HAL_RTC_GetTime>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e02e      	b.n	8004388 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	7b1a      	ldrb	r2, [r3, #12]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	7bda      	ldrb	r2, [r3, #15]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	7b5a      	ldrb	r2, [r3, #13]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	7b9a      	ldrb	r2, [r3, #14]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01a      	beq.n	8004386 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	78db      	ldrb	r3, [r3, #3]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 f92f 	bl	80045b8 <RTC_ByteToBcd2>
 800435a:	4603      	mov	r3, r0
 800435c:	461a      	mov	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	785b      	ldrb	r3, [r3, #1]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f926 	bl	80045b8 <RTC_ByteToBcd2>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	789b      	ldrb	r3, [r3, #2]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f91d 	bl	80045b8 <RTC_ByteToBcd2>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e01d      	b.n	80043e2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0208 	bic.w	r2, r2, #8
 80043b4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80043b6:	f7fd ffaf 	bl	8002318 <HAL_GetTick>
 80043ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80043bc:	e009      	b.n	80043d2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80043be:	f7fd ffab 	bl	8002318 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043cc:	d901      	bls.n	80043d2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e007      	b.n	80043e2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ee      	beq.n	80043be <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b087      	sub	sp, #28
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	827b      	strh	r3, [r7, #18]
 80043f6:	2300      	movs	r3, #0
 80043f8:	823b      	strh	r3, [r7, #16]
 80043fa:	2300      	movs	r3, #0
 80043fc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800441a:	8a7a      	ldrh	r2, [r7, #18]
 800441c:	8a3b      	ldrh	r3, [r7, #16]
 800441e:	429a      	cmp	r2, r3
 8004420:	d008      	beq.n	8004434 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004422:	8a3b      	ldrh	r3, [r7, #16]
 8004424:	041a      	lsls	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	b29b      	uxth	r3, r3
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	e004      	b.n	800443e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004434:	8a7b      	ldrh	r3, [r7, #18]
 8004436:	041a      	lsls	r2, r3, #16
 8004438:	89fb      	ldrh	r3, [r7, #14]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800443e:	697b      	ldr	r3, [r7, #20]
}
 8004440:	4618      	mov	r0, r3
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f85d 	bl	8004518 <RTC_EnterInitMode>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
 8004468:	e011      	b.n	800448e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	0c12      	lsrs	r2, r2, #16
 8004472:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	b292      	uxth	r2, r2
 800447c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f872 	bl	8004568 <RTC_ExitInitMode>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800448e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	81fb      	strh	r3, [r7, #14]
 80044a4:	2300      	movs	r3, #0
 80044a6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80044b8:	89fb      	ldrh	r3, [r7, #14]
 80044ba:	041a      	lsls	r2, r3, #16
 80044bc:	89bb      	ldrh	r3, [r7, #12]
 80044be:	4313      	orrs	r3, r2
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr

080044ca <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f81d 	bl	8004518 <RTC_EnterInitMode>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	73fb      	strb	r3, [r7, #15]
 80044e8:	e011      	b.n	800450e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	0c12      	lsrs	r2, r2, #16
 80044f2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	b292      	uxth	r2, r2
 80044fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f832 	bl	8004568 <RTC_ExitInitMode>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800450e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004524:	f7fd fef8 	bl	8002318 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800452a:	e009      	b.n	8004540 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800452c:	f7fd fef4 	bl	8002318 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800453a:	d901      	bls.n	8004540 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e00f      	b.n	8004560 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0ee      	beq.n	800452c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0210 	orr.w	r2, r2, #16
 800455c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0210 	bic.w	r2, r2, #16
 8004582:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004584:	f7fd fec8 	bl	8002318 <HAL_GetTick>
 8004588:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800458a:	e009      	b.n	80045a0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800458c:	f7fd fec4 	bl	8002318 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800459a:	d901      	bls.n	80045a0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e007      	b.n	80045b0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0ee      	beq.n	800458c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80045c6:	e005      	b.n	80045d4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3301      	adds	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	3b0a      	subs	r3, #10
 80045d2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80045d4:	79fb      	ldrb	r3, [r7, #7]
 80045d6:	2b09      	cmp	r3, #9
 80045d8:	d8f6      	bhi.n	80045c8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	b2db      	uxtb	r3, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	4603      	mov	r3, r0
 80045fa:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	b2db      	uxtb	r3, r3
 8004606:	461a      	mov	r2, r3
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	b2da      	uxtb	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	4413      	add	r3, r2
 8004620:	b2db      	uxtb	r3, r3
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	2300      	movs	r3, #0
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	7bdb      	ldrb	r3, [r3, #15]
 800464a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	7b5b      	ldrb	r3, [r3, #13]
 8004650:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	7b9b      	ldrb	r3, [r3, #14]
 8004656:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004658:	2300      	movs	r3, #0
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	e06f      	b.n	800473e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d011      	beq.n	8004688 <RTC_DateUpdate+0x5c>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d00e      	beq.n	8004688 <RTC_DateUpdate+0x5c>
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b05      	cmp	r3, #5
 800466e:	d00b      	beq.n	8004688 <RTC_DateUpdate+0x5c>
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b07      	cmp	r3, #7
 8004674:	d008      	beq.n	8004688 <RTC_DateUpdate+0x5c>
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d005      	beq.n	8004688 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b0a      	cmp	r3, #10
 8004680:	d002      	beq.n	8004688 <RTC_DateUpdate+0x5c>
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b0c      	cmp	r3, #12
 8004686:	d117      	bne.n	80046b8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b1e      	cmp	r3, #30
 800468c:	d803      	bhi.n	8004696 <RTC_DateUpdate+0x6a>
      {
        day++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3301      	adds	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004694:	e050      	b.n	8004738 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b0c      	cmp	r3, #12
 800469a:	d005      	beq.n	80046a8 <RTC_DateUpdate+0x7c>
        {
          month++;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	3301      	adds	r3, #1
 80046a0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80046a2:	2301      	movs	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80046a6:	e047      	b.n	8004738 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80046a8:	2301      	movs	r3, #1
 80046aa:	613b      	str	r3, [r7, #16]
          day = 1U;
 80046ac:	2301      	movs	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
          year++;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	3301      	adds	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80046b6:	e03f      	b.n	8004738 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d008      	beq.n	80046d0 <RTC_DateUpdate+0xa4>
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b06      	cmp	r3, #6
 80046c2:	d005      	beq.n	80046d0 <RTC_DateUpdate+0xa4>
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b09      	cmp	r3, #9
 80046c8:	d002      	beq.n	80046d0 <RTC_DateUpdate+0xa4>
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b0b      	cmp	r3, #11
 80046ce:	d10c      	bne.n	80046ea <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b1d      	cmp	r3, #29
 80046d4:	d803      	bhi.n	80046de <RTC_DateUpdate+0xb2>
      {
        day++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3301      	adds	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80046dc:	e02c      	b.n	8004738 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	3301      	adds	r3, #1
 80046e2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80046e4:	2301      	movs	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80046e8:	e026      	b.n	8004738 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d123      	bne.n	8004738 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b1b      	cmp	r3, #27
 80046f4:	d803      	bhi.n	80046fe <RTC_DateUpdate+0xd2>
      {
        day++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3301      	adds	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	e01c      	b.n	8004738 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b1c      	cmp	r3, #28
 8004702:	d111      	bne.n	8004728 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	b29b      	uxth	r3, r3
 8004708:	4618      	mov	r0, r3
 800470a:	f000 f839 	bl	8004780 <RTC_IsLeapYear>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <RTC_DateUpdate+0xf0>
        {
          day++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3301      	adds	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	e00d      	b.n	8004738 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	3301      	adds	r3, #1
 8004720:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004722:	2301      	movs	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e007      	b.n	8004738 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b1d      	cmp	r3, #29
 800472c:	d104      	bne.n	8004738 <RTC_DateUpdate+0x10c>
      {
        month++;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	3301      	adds	r3, #1
 8004732:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004734:	2301      	movs	r3, #1
 8004736:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	3301      	adds	r3, #1
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d38b      	bcc.n	800465e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	b2da      	uxtb	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	4619      	mov	r1, r3
 8004768:	6978      	ldr	r0, [r7, #20]
 800476a:	f000 f83b 	bl	80047e4 <RTC_WeekDayNum>
 800476e:	4603      	mov	r3, r0
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	731a      	strb	r2, [r3, #12]
}
 8004776:	bf00      	nop
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	e01d      	b.n	80047d6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	4a10      	ldr	r2, [pc, #64]	@ (80047e0 <RTC_IsLeapYear+0x60>)
 800479e:	fba2 1203 	umull	r1, r2, r2, r3
 80047a2:	0952      	lsrs	r2, r2, #5
 80047a4:	2164      	movs	r1, #100	@ 0x64
 80047a6:	fb01 f202 	mul.w	r2, r1, r2
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e00f      	b.n	80047d6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	4a09      	ldr	r2, [pc, #36]	@ (80047e0 <RTC_IsLeapYear+0x60>)
 80047ba:	fba2 1203 	umull	r1, r2, r2, r3
 80047be:	09d2      	lsrs	r2, r2, #7
 80047c0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80047c4:	fb01 f202 	mul.w	r2, r1, r2
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80047d4:	2300      	movs	r3, #0
  }
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	51eb851f 	.word	0x51eb851f

080047e4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	70fb      	strb	r3, [r7, #3]
 80047f0:	4613      	mov	r3, r2
 80047f2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8004802:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d82d      	bhi.n	8004866 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	4613      	mov	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4413      	add	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	4a2c      	ldr	r2, [pc, #176]	@ (80048c8 <RTC_WeekDayNum+0xe4>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	085a      	lsrs	r2, r3, #1
 800481e:	78bb      	ldrb	r3, [r7, #2]
 8004820:	441a      	add	r2, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	441a      	add	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	3b01      	subs	r3, #1
 800482a:	089b      	lsrs	r3, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	3b01      	subs	r3, #1
 8004832:	4926      	ldr	r1, [pc, #152]	@ (80048cc <RTC_WeekDayNum+0xe8>)
 8004834:	fba1 1303 	umull	r1, r3, r1, r3
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	1ad2      	subs	r2, r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	3b01      	subs	r3, #1
 8004840:	4922      	ldr	r1, [pc, #136]	@ (80048cc <RTC_WeekDayNum+0xe8>)
 8004842:	fba1 1303 	umull	r1, r3, r1, r3
 8004846:	09db      	lsrs	r3, r3, #7
 8004848:	4413      	add	r3, r2
 800484a:	1d1a      	adds	r2, r3, #4
 800484c:	4b20      	ldr	r3, [pc, #128]	@ (80048d0 <RTC_WeekDayNum+0xec>)
 800484e:	fba3 1302 	umull	r1, r3, r3, r2
 8004852:	1ad1      	subs	r1, r2, r3
 8004854:	0849      	lsrs	r1, r1, #1
 8004856:	440b      	add	r3, r1
 8004858:	0899      	lsrs	r1, r3, #2
 800485a:	460b      	mov	r3, r1
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	1a5b      	subs	r3, r3, r1
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	e029      	b.n	80048ba <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	4613      	mov	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	4413      	add	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	4a15      	ldr	r2, [pc, #84]	@ (80048c8 <RTC_WeekDayNum+0xe4>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	085a      	lsrs	r2, r3, #1
 800487a:	78bb      	ldrb	r3, [r7, #2]
 800487c:	441a      	add	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	441a      	add	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	089b      	lsrs	r3, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4910      	ldr	r1, [pc, #64]	@ (80048cc <RTC_WeekDayNum+0xe8>)
 800488c:	fba1 1303 	umull	r1, r3, r1, r3
 8004890:	095b      	lsrs	r3, r3, #5
 8004892:	1ad2      	subs	r2, r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	490d      	ldr	r1, [pc, #52]	@ (80048cc <RTC_WeekDayNum+0xe8>)
 8004898:	fba1 1303 	umull	r1, r3, r1, r3
 800489c:	09db      	lsrs	r3, r3, #7
 800489e:	4413      	add	r3, r2
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	4b0b      	ldr	r3, [pc, #44]	@ (80048d0 <RTC_WeekDayNum+0xec>)
 80048a4:	fba3 1302 	umull	r1, r3, r3, r2
 80048a8:	1ad1      	subs	r1, r2, r3
 80048aa:	0849      	lsrs	r1, r1, #1
 80048ac:	440b      	add	r3, r1
 80048ae:	0899      	lsrs	r1, r3, #2
 80048b0:	460b      	mov	r3, r1
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	1a5b      	subs	r3, r3, r1
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	b2db      	uxtb	r3, r3
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	38e38e39 	.word	0x38e38e39
 80048cc:	51eb851f 	.word	0x51eb851f
 80048d0:	24924925 	.word	0x24924925

080048d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e041      	b.n	800496a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fc fe0e 	bl	800151c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f000 fa8a 	bl	8004e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d001      	beq.n	800498c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e03a      	b.n	8004a02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a18      	ldr	r2, [pc, #96]	@ (8004a0c <HAL_TIM_Base_Start_IT+0x98>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00e      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x58>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b6:	d009      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x58>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a14      	ldr	r2, [pc, #80]	@ (8004a10 <HAL_TIM_Base_Start_IT+0x9c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x58>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a13      	ldr	r2, [pc, #76]	@ (8004a14 <HAL_TIM_Base_Start_IT+0xa0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d111      	bne.n	80049f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b06      	cmp	r3, #6
 80049dc:	d010      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ee:	e007      	b.n	8004a00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800

08004a18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0201 	bic.w	r2, r2, #1
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6a1a      	ldr	r2, [r3, #32]
 8004a36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10f      	bne.n	8004a60 <HAL_TIM_Base_Stop_IT+0x48>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d107      	bne.n	8004a60 <HAL_TIM_Base_Stop_IT+0x48>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr

08004a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d020      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01b      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0202 	mvn.w	r2, #2
 8004aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f998 	bl	8004df4 <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f98b 	bl	8004de2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f99a 	bl	8004e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d020      	beq.n	8004b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01b      	beq.n	8004b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0204 	mvn.w	r2, #4
 8004af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f972 	bl	8004df4 <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f965 	bl	8004de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f974 	bl	8004e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d020      	beq.n	8004b70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01b      	beq.n	8004b70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0208 	mvn.w	r2, #8
 8004b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2204      	movs	r2, #4
 8004b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f94c 	bl	8004df4 <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f93f 	bl	8004de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f94e 	bl	8004e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d020      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01b      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0210 	mvn.w	r2, #16
 8004b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2208      	movs	r2, #8
 8004b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f926 	bl	8004df4 <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e005      	b.n	8004bb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f919 	bl	8004de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f928 	bl	8004e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00c      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0201 	mvn.w	r2, #1
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fb ff9e 	bl	8000b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa7f 	bl	8005102 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00c      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f8f8 	bl	8004e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0220 	mvn.w	r2, #32
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fa52 	bl	80050f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIM_ConfigClockSource+0x1c>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e0b4      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x186>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca8:	d03e      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0xd4>
 8004caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cae:	f200 8087 	bhi.w	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb6:	f000 8086 	beq.w	8004dc6 <HAL_TIM_ConfigClockSource+0x172>
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbe:	d87f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b70      	cmp	r3, #112	@ 0x70
 8004cc2:	d01a      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0xa6>
 8004cc4:	2b70      	cmp	r3, #112	@ 0x70
 8004cc6:	d87b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b60      	cmp	r3, #96	@ 0x60
 8004cca:	d050      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x11a>
 8004ccc:	2b60      	cmp	r3, #96	@ 0x60
 8004cce:	d877      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b50      	cmp	r3, #80	@ 0x50
 8004cd2:	d03c      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0xfa>
 8004cd4:	2b50      	cmp	r3, #80	@ 0x50
 8004cd6:	d873      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b40      	cmp	r3, #64	@ 0x40
 8004cda:	d058      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x13a>
 8004cdc:	2b40      	cmp	r3, #64	@ 0x40
 8004cde:	d86f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce0:	2b30      	cmp	r3, #48	@ 0x30
 8004ce2:	d064      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004ce4:	2b30      	cmp	r3, #48	@ 0x30
 8004ce6:	d86b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d060      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d867      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05c      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d05a      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cf8:	e062      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d0a:	f000 f974 	bl	8004ff6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	609a      	str	r2, [r3, #8]
      break;
 8004d26:	e04f      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d38:	f000 f95d 	bl	8004ff6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d4a:	609a      	str	r2, [r3, #8]
      break;
 8004d4c:	e03c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f000 f8d4 	bl	8004f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2150      	movs	r1, #80	@ 0x50
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f92b 	bl	8004fc2 <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e02c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f000 f8f2 	bl	8004f64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2160      	movs	r1, #96	@ 0x60
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f91b 	bl	8004fc2 <TIM_ITRx_SetConfig>
      break;
 8004d8c:	e01c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f000 f8b4 	bl	8004f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2140      	movs	r1, #64	@ 0x40
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 f90b 	bl	8004fc2 <TIM_ITRx_SetConfig>
      break;
 8004dac:	e00c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f000 f902 	bl	8004fc2 <TIM_ITRx_SetConfig>
      break;
 8004dbe:	e003      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc4:	e000      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr
	...

08004e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004efc <TIM_Base_SetConfig+0xd0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <TIM_Base_SetConfig+0x30>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4a:	d007      	beq.n	8004e5c <TIM_Base_SetConfig+0x30>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8004f00 <TIM_Base_SetConfig+0xd4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_Base_SetConfig+0x30>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a2b      	ldr	r2, [pc, #172]	@ (8004f04 <TIM_Base_SetConfig+0xd8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d108      	bne.n	8004e6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a22      	ldr	r2, [pc, #136]	@ (8004efc <TIM_Base_SetConfig+0xd0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00b      	beq.n	8004e8e <TIM_Base_SetConfig+0x62>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7c:	d007      	beq.n	8004e8e <TIM_Base_SetConfig+0x62>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a1f      	ldr	r2, [pc, #124]	@ (8004f00 <TIM_Base_SetConfig+0xd4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d003      	beq.n	8004e8e <TIM_Base_SetConfig+0x62>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a1e      	ldr	r2, [pc, #120]	@ (8004f04 <TIM_Base_SetConfig+0xd8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d108      	bne.n	8004ea0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8004efc <TIM_Base_SetConfig+0xd0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d103      	bne.n	8004ed4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f023 0201 	bic.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	611a      	str	r2, [r3, #16]
  }
}
 8004ef2:	bf00      	nop
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800

08004f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 030a 	bic.w	r3, r3, #10
 8004f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f023 0210 	bic.w	r2, r3, #16
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	031b      	lsls	r3, r3, #12
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	621a      	str	r2, [r3, #32]
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f043 0307 	orr.w	r3, r3, #7
 8004fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	609a      	str	r2, [r3, #8]
}
 8004fec:	bf00      	nop
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr

08004ff6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b087      	sub	sp, #28
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005010:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	021a      	lsls	r2, r3, #8
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	431a      	orrs	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4313      	orrs	r3, r2
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	609a      	str	r2, [r3, #8]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005048:	2302      	movs	r3, #2
 800504a:	e046      	b.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a16      	ldr	r2, [pc, #88]	@ (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00e      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005098:	d009      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a12      	ldr	r2, [pc, #72]	@ (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a10      	ldr	r2, [pc, #64]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d10c      	bne.n	80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr
 80050e4:	40012c00 	.word	0x40012c00
 80050e8:	40000400 	.word	0x40000400
 80050ec:	40000800 	.word	0x40000800

080050f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e042      	b.n	80051ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fc fa2e 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2224      	movs	r2, #36	@ 0x24
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f82b 	bl	80051b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800516c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695a      	ldr	r2, [r3, #20]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800517c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800518c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80051ee:	f023 030c 	bic.w	r3, r3, #12
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	430b      	orrs	r3, r1
 80051fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a2c      	ldr	r2, [pc, #176]	@ (80052c8 <UART_SetConfig+0x114>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d103      	bne.n	8005224 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800521c:	f7fe fc14 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	e002      	b.n	800522a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005224:	f7fe fbfc 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8005228:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	009a      	lsls	r2, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	4a22      	ldr	r2, [pc, #136]	@ (80052cc <UART_SetConfig+0x118>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	0119      	lsls	r1, r3, #4
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009a      	lsls	r2, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005260:	4b1a      	ldr	r3, [pc, #104]	@ (80052cc <UART_SetConfig+0x118>)
 8005262:	fba3 0302 	umull	r0, r3, r3, r2
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	2064      	movs	r0, #100	@ 0x64
 800526a:	fb00 f303 	mul.w	r3, r0, r3
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	3332      	adds	r3, #50	@ 0x32
 8005274:	4a15      	ldr	r2, [pc, #84]	@ (80052cc <UART_SetConfig+0x118>)
 8005276:	fba2 2303 	umull	r2, r3, r2, r3
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005280:	4419      	add	r1, r3
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	009a      	lsls	r2, r3, #2
 800528c:	441a      	add	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	fbb2 f2f3 	udiv	r2, r2, r3
 8005298:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <UART_SetConfig+0x118>)
 800529a:	fba3 0302 	umull	r0, r3, r3, r2
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	2064      	movs	r0, #100	@ 0x64
 80052a2:	fb00 f303 	mul.w	r3, r0, r3
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	3332      	adds	r3, #50	@ 0x32
 80052ac:	4a07      	ldr	r2, [pc, #28]	@ (80052cc <UART_SetConfig+0x118>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	f003 020f 	and.w	r2, r3, #15
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	440a      	add	r2, r1
 80052be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40013800 	.word	0x40013800
 80052cc:	51eb851f 	.word	0x51eb851f

080052d0 <memset>:
 80052d0:	4603      	mov	r3, r0
 80052d2:	4402      	add	r2, r0
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d100      	bne.n	80052da <memset+0xa>
 80052d8:	4770      	bx	lr
 80052da:	f803 1b01 	strb.w	r1, [r3], #1
 80052de:	e7f9      	b.n	80052d4 <memset+0x4>

080052e0 <__libc_init_array>:
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	2600      	movs	r6, #0
 80052e4:	4d0c      	ldr	r5, [pc, #48]	@ (8005318 <__libc_init_array+0x38>)
 80052e6:	4c0d      	ldr	r4, [pc, #52]	@ (800531c <__libc_init_array+0x3c>)
 80052e8:	1b64      	subs	r4, r4, r5
 80052ea:	10a4      	asrs	r4, r4, #2
 80052ec:	42a6      	cmp	r6, r4
 80052ee:	d109      	bne.n	8005304 <__libc_init_array+0x24>
 80052f0:	f000 f81a 	bl	8005328 <_init>
 80052f4:	2600      	movs	r6, #0
 80052f6:	4d0a      	ldr	r5, [pc, #40]	@ (8005320 <__libc_init_array+0x40>)
 80052f8:	4c0a      	ldr	r4, [pc, #40]	@ (8005324 <__libc_init_array+0x44>)
 80052fa:	1b64      	subs	r4, r4, r5
 80052fc:	10a4      	asrs	r4, r4, #2
 80052fe:	42a6      	cmp	r6, r4
 8005300:	d105      	bne.n	800530e <__libc_init_array+0x2e>
 8005302:	bd70      	pop	{r4, r5, r6, pc}
 8005304:	f855 3b04 	ldr.w	r3, [r5], #4
 8005308:	4798      	blx	r3
 800530a:	3601      	adds	r6, #1
 800530c:	e7ee      	b.n	80052ec <__libc_init_array+0xc>
 800530e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005312:	4798      	blx	r3
 8005314:	3601      	adds	r6, #1
 8005316:	e7f2      	b.n	80052fe <__libc_init_array+0x1e>
 8005318:	08005510 	.word	0x08005510
 800531c:	08005510 	.word	0x08005510
 8005320:	08005510 	.word	0x08005510
 8005324:	08005514 	.word	0x08005514

08005328 <_init>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	bf00      	nop
 800532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532e:	bc08      	pop	{r3}
 8005330:	469e      	mov	lr, r3
 8005332:	4770      	bx	lr

08005334 <_fini>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr
