
MilkaFeeder25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e30  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08004f3c  08004f3c  00005f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800510c  0800510c  00007018  2**0
                  CONTENTS
  4 .ARM          00000000  0800510c  0800510c  00007018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800510c  0800510c  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800510c  0800510c  0000610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005110  08005110  00006110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005114  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000018  0800512c  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  0800512c  000071a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001164c  00000000  00000000  00007041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fa  00000000  00000000  0001868d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  0001af88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc2  00000000  00000000  0001c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018123  00000000  00000000  0001cec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a0b  00000000  00000000  00034fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f1db  00000000  00000000  000499f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8bcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048fc  00000000  00000000  000d8c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000dd50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f24 	.word	0x08004f24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08004f24 	.word	0x08004f24

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E  // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	@ 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	@ 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	@ (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f002 fb11 	bl	80027c0 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000034 	.word	0x20000034

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	@ 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	@ 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	@ (8000208 <lcd_send_data+0x5c>)
 80001fa:	f002 fae1 	bl	80027c0 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000034 	.word	0x20000034

0800020c <lcd_clear>:

void lcd_clear (void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ff9a 	bl	800014c <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8000218:	2300      	movs	r3, #0
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	e005      	b.n	800022a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800021e:	2020      	movs	r0, #32
 8000220:	f7ff ffc4 	bl	80001ac <lcd_send_data>
	for (int i=0; i<100; i++)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3301      	adds	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b63      	cmp	r3, #99	@ 0x63
 800022e:	ddf6      	ble.n	800021e <lcd_clear+0x12>
	}
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <lcd_init>:

void lcd_init (void)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800023e:	2032      	movs	r0, #50	@ 0x32
 8000240:	f001 fe72 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000244:	2030      	movs	r0, #48	@ 0x30
 8000246:	f7ff ff81 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800024a:	2005      	movs	r0, #5
 800024c:	f001 fe6c 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000250:	2030      	movs	r0, #48	@ 0x30
 8000252:	f7ff ff7b 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000256:	2001      	movs	r0, #1
 8000258:	f001 fe66 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x30);
 800025c:	2030      	movs	r0, #48	@ 0x30
 800025e:	f7ff ff75 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000262:	200a      	movs	r0, #10
 8000264:	f001 fe60 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000268:	2020      	movs	r0, #32
 800026a:	f7ff ff6f 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 800026e:	200a      	movs	r0, #10
 8000270:	f001 fe5a 	bl	8001f28 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000274:	2028      	movs	r0, #40	@ 0x28
 8000276:	f7ff ff69 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 800027a:	2001      	movs	r0, #1
 800027c:	f001 fe54 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000280:	2008      	movs	r0, #8
 8000282:	f7ff ff63 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000286:	2001      	movs	r0, #1
 8000288:	f001 fe4e 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800028c:	2001      	movs	r0, #1
 800028e:	f7ff ff5d 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000292:	2001      	movs	r0, #1
 8000294:	f001 fe48 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000298:	2006      	movs	r0, #6
 800029a:	f7ff ff57 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 800029e:	2001      	movs	r0, #1
 80002a0:	f001 fe42 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002a4:	200c      	movs	r0, #12
 80002a6:	f7ff ff51 	bl	800014c <lcd_send_cmd>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}

080002ae <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002ae:	b580      	push	{r7, lr}
 80002b0:	b082      	sub	sp, #8
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80002b6:	e006      	b.n	80002c6 <lcd_send_string+0x18>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	1c5a      	adds	r2, r3, #1
 80002bc:	607a      	str	r2, [r7, #4]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f7ff ff73 	bl	80001ac <lcd_send_data>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1f4      	bne.n	80002b8 <lcd_send_string+0xa>
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f001 fdc2 	bl	8001e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f81c 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f9b0 	bl	8000648 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002e8:	f000 f872 	bl	80003d0 <MX_I2C1_Init>
  MX_RTC_Init();
 80002ec:	f000 f89e 	bl	800042c <MX_RTC_Init>
  MX_TIM2_Init();
 80002f0:	f000 f8e6 	bl	80004c0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80002f4:	f000 f97e 	bl	80005f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80002f8:	f000 f92e 	bl	8000558 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80002fc:	f7ff ff9d 	bl	800023a <lcd_init>
  lcd_clear();
 8000300:	f7ff ff84 	bl	800020c <lcd_clear>
  HAL_TIM_Base_Start_IT(&htim2);
 8000304:	4804      	ldr	r0, [pc, #16]	@ (8000318 <main+0x40>)
 8000306:	f004 f933 	bl	8004570 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  handleLCDMonitor();
 800030a:	f001 f949 	bl	80015a0 <handleLCDMonitor>
	  checkIfIsTimeToFeed();
 800030e:	f001 fd31 	bl	8001d74 <checkIfIsTimeToFeed>
	  handleLCDMonitor();
 8000312:	bf00      	nop
 8000314:	e7f9      	b.n	800030a <main+0x32>
 8000316:	bf00      	nop
 8000318:	2000009c 	.word	0x2000009c

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b094      	sub	sp, #80	@ 0x50
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000326:	2228      	movs	r2, #40	@ 0x28
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f004 fdce 	bl	8004ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	f107 0314 	add.w	r3, r7, #20
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800034c:	2306      	movs	r3, #6
 800034e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000350:	2301      	movs	r3, #1
 8000352:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000354:	2301      	movs	r3, #1
 8000356:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000358:	2310      	movs	r3, #16
 800035a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035c:	2302      	movs	r3, #2
 800035e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000360:	2300      	movs	r3, #0
 8000362:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000364:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000368:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800036e:	4618      	mov	r0, r3
 8000370:	f002 fd8a 	bl	8002e88 <HAL_RCC_OscConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800037a:	f000 faa3 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037e:	230f      	movs	r3, #15
 8000380:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000382:	2302      	movs	r3, #2
 8000384:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800038e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000394:	f107 0314 	add.w	r3, r7, #20
 8000398:	2102      	movs	r1, #2
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fff6 	bl	800338c <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80003a6:	f000 fa8d 	bl	80008c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80003aa:	2301      	movs	r3, #1
 80003ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80003ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003b2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4618      	mov	r0, r3
 80003b8:	f003 f976 	bl	80036a8 <HAL_RCCEx_PeriphCLKConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80003c2:	f000 fa7f 	bl	80008c4 <Error_Handler>
  }
}
 80003c6:	bf00      	nop
 80003c8:	3750      	adds	r7, #80	@ 0x50
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d4:	4b12      	ldr	r3, [pc, #72]	@ (8000420 <MX_I2C1_Init+0x50>)
 80003d6:	4a13      	ldr	r2, [pc, #76]	@ (8000424 <MX_I2C1_Init+0x54>)
 80003d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003da:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <MX_I2C1_Init+0x50>)
 80003dc:	4a12      	ldr	r2, [pc, #72]	@ (8000428 <MX_I2C1_Init+0x58>)
 80003de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <MX_I2C1_Init+0x50>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <MX_I2C1_Init+0x50>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000420 <MX_I2C1_Init+0x50>)
 80003ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <MX_I2C1_Init+0x50>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003fa:	4b09      	ldr	r3, [pc, #36]	@ (8000420 <MX_I2C1_Init+0x50>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000400:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <MX_I2C1_Init+0x50>)
 8000402:	2200      	movs	r2, #0
 8000404:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000406:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <MX_I2C1_Init+0x50>)
 8000408:	2200      	movs	r2, #0
 800040a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800040c:	4804      	ldr	r0, [pc, #16]	@ (8000420 <MX_I2C1_Init+0x50>)
 800040e:	f002 f893 	bl	8002538 <HAL_I2C_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000418:	f000 fa54 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000034 	.word	0x20000034
 8000424:	40005400 	.word	0x40005400
 8000428:	000186a0 	.word	0x000186a0

0800042c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2100      	movs	r1, #0
 8000436:	460a      	mov	r2, r1
 8000438:	801a      	strh	r2, [r3, #0]
 800043a:	460a      	mov	r2, r1
 800043c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800043e:	2300      	movs	r3, #0
 8000440:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000442:	4b1d      	ldr	r3, [pc, #116]	@ (80004b8 <MX_RTC_Init+0x8c>)
 8000444:	4a1d      	ldr	r2, [pc, #116]	@ (80004bc <MX_RTC_Init+0x90>)
 8000446:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000448:	4b1b      	ldr	r3, [pc, #108]	@ (80004b8 <MX_RTC_Init+0x8c>)
 800044a:	f04f 32ff 	mov.w	r2, #4294967295
 800044e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000450:	4b19      	ldr	r3, [pc, #100]	@ (80004b8 <MX_RTC_Init+0x8c>)
 8000452:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000456:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000458:	4817      	ldr	r0, [pc, #92]	@ (80004b8 <MX_RTC_Init+0x8c>)
 800045a:	f003 fa91 	bl	8003980 <HAL_RTC_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000464:	f000 fa2e 	bl	80008c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000468:	2300      	movs	r3, #0
 800046a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800046c:	2300      	movs	r3, #0
 800046e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000470:	2300      	movs	r3, #0
 8000472:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2201      	movs	r2, #1
 8000478:	4619      	mov	r1, r3
 800047a:	480f      	ldr	r0, [pc, #60]	@ (80004b8 <MX_RTC_Init+0x8c>)
 800047c:	f003 fb0c 	bl	8003a98 <HAL_RTC_SetTime>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000486:	f000 fa1d 	bl	80008c4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800048a:	2301      	movs	r3, #1
 800048c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800048e:	2301      	movs	r3, #1
 8000490:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000492:	2301      	movs	r3, #1
 8000494:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000496:	2300      	movs	r3, #0
 8000498:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800049a:	463b      	mov	r3, r7
 800049c:	2201      	movs	r2, #1
 800049e:	4619      	mov	r1, r3
 80004a0:	4805      	ldr	r0, [pc, #20]	@ (80004b8 <MX_RTC_Init+0x8c>)
 80004a2:	f003 fc69 	bl	8003d78 <HAL_RTC_SetDate>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80004ac:	f000 fa0a 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000088 	.word	0x20000088
 80004bc:	40002800 	.word	0x40002800

080004c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c6:	f107 0308 	add.w	r3, r7, #8
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d4:	463b      	mov	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_TIM2_Init+0x94>)
 80004de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_TIM2_Init+0x94>)
 80004e6:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80004ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ec:	4b19      	ldr	r3, [pc, #100]	@ (8000554 <MX_TIM2_Init+0x94>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80004f2:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_TIM2_Init+0x94>)
 80004f4:	220a      	movs	r2, #10
 80004f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f8:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_TIM2_Init+0x94>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fe:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <MX_TIM2_Init+0x94>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000504:	4813      	ldr	r0, [pc, #76]	@ (8000554 <MX_TIM2_Init+0x94>)
 8000506:	f003 ffe3 	bl	80044d0 <HAL_TIM_Base_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000510:	f000 f9d8 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000518:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	4619      	mov	r1, r3
 8000520:	480c      	ldr	r0, [pc, #48]	@ (8000554 <MX_TIM2_Init+0x94>)
 8000522:	f004 f995 	bl	8004850 <HAL_TIM_ConfigClockSource>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800052c:	f000 f9ca 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000530:	2300      	movs	r3, #0
 8000532:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_TIM2_Init+0x94>)
 800053e:	f004 fb77 	bl	8004c30 <HAL_TIMEx_MasterConfigSynchronization>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000548:	f000 f9bc 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2000009c 	.word	0x2000009c

08000558 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000574:	4b1d      	ldr	r3, [pc, #116]	@ (80005ec <MX_TIM3_Init+0x94>)
 8000576:	4a1e      	ldr	r2, [pc, #120]	@ (80005f0 <MX_TIM3_Init+0x98>)
 8000578:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000 - 1;
 800057a:	4b1c      	ldr	r3, [pc, #112]	@ (80005ec <MX_TIM3_Init+0x94>)
 800057c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000580:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000582:	4b1a      	ldr	r3, [pc, #104]	@ (80005ec <MX_TIM3_Init+0x94>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2001;
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <MX_TIM3_Init+0x94>)
 800058a:	f240 72d1 	movw	r2, #2001	@ 0x7d1
 800058e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000590:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <MX_TIM3_Init+0x94>)
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000596:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <MX_TIM3_Init+0x94>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800059c:	4813      	ldr	r0, [pc, #76]	@ (80005ec <MX_TIM3_Init+0x94>)
 800059e:	f003 ff97 	bl	80044d0 <HAL_TIM_Base_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80005a8:	f000 f98c 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	4619      	mov	r1, r3
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <MX_TIM3_Init+0x94>)
 80005ba:	f004 f949 	bl	8004850 <HAL_TIM_ConfigClockSource>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80005c4:	f000 f97e 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c8:	2300      	movs	r3, #0
 80005ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <MX_TIM3_Init+0x94>)
 80005d6:	f004 fb2b 	bl	8004c30 <HAL_TIMEx_MasterConfigSynchronization>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80005e0:	f000 f970 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200000e4 	.word	0x200000e4
 80005f0:	40000400 	.word	0x40000400

080005f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_USART2_UART_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <MX_USART2_UART_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <MX_USART2_UART_Init+0x4c>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_USART2_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_USART2_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <MX_USART2_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_USART2_UART_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <MX_USART2_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_USART2_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_USART2_UART_Init+0x4c>)
 800062c:	f004 fb70 	bl	8004d10 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000636:	f000 f945 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000012c 	.word	0x2000012c
 8000644:	40004400 	.word	0x40004400

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065c:	4b2d      	ldr	r3, [pc, #180]	@ (8000714 <MX_GPIO_Init+0xcc>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a2c      	ldr	r2, [pc, #176]	@ (8000714 <MX_GPIO_Init+0xcc>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <MX_GPIO_Init+0xcc>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0310 	and.w	r3, r3, #16
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b27      	ldr	r3, [pc, #156]	@ (8000714 <MX_GPIO_Init+0xcc>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a26      	ldr	r2, [pc, #152]	@ (8000714 <MX_GPIO_Init+0xcc>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <MX_GPIO_Init+0xcc>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b21      	ldr	r3, [pc, #132]	@ (8000714 <MX_GPIO_Init+0xcc>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a20      	ldr	r2, [pc, #128]	@ (8000714 <MX_GPIO_Init+0xcc>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b1e      	ldr	r3, [pc, #120]	@ (8000714 <MX_GPIO_Init+0xcc>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_Enable_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2121      	movs	r1, #33	@ 0x21
 80006a8:	481b      	ldr	r0, [pc, #108]	@ (8000718 <MX_GPIO_Init+0xd0>)
 80006aa:	f001 ff0a 	bl	80024c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b4:	4b19      	ldr	r3, [pc, #100]	@ (800071c <MX_GPIO_Init+0xd4>)
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	4817      	ldr	r0, [pc, #92]	@ (8000720 <MX_GPIO_Init+0xd8>)
 80006c4:	f001 fd62 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_Enable_Pin LD2_Pin */
  GPIO_InitStruct.Pin = MOTOR_Enable_Pin|LD2_Pin;
 80006c8:	2321      	movs	r3, #33	@ 0x21
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	480e      	ldr	r0, [pc, #56]	@ (8000718 <MX_GPIO_Init+0xd0>)
 80006e0:	f001 fd54 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_Button_Pin UP_Button_Pin DOWN_Button_Pin ENTER_Button_Pin */
  GPIO_InitStruct.Pin = SET_Button_Pin|UP_Button_Pin|DOWN_Button_Pin|ENTER_Button_Pin;
 80006e4:	2378      	movs	r3, #120	@ 0x78
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	480b      	ldr	r0, [pc, #44]	@ (8000724 <MX_GPIO_Init+0xdc>)
 80006f8:	f001 fd48 	bl	800218c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	2028      	movs	r0, #40	@ 0x28
 8000702:	f001 fd0c 	bl	800211e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000706:	2028      	movs	r0, #40	@ 0x28
 8000708:	f001 fd25 	bl	8002156 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	40010800 	.word	0x40010800
 800071c:	10210000 	.word	0x10210000
 8000720:	40011000 	.word	0x40011000
 8000724:	40010c00 	.word	0x40010c00

08000728 <triggerOnce>:

/* USER CODE BEGIN 4 */
void triggerOnce(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
    // 1. Stop the timer (in case it's still running or flagged)
    HAL_TIM_Base_Stop_IT(&htim3);
 800072c:	4808      	ldr	r0, [pc, #32]	@ (8000750 <triggerOnce+0x28>)
 800072e:	f003 ff71 	bl	8004614 <HAL_TIM_Base_Stop_IT>

    // 2. Clear any pending update flags
    __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000732:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <triggerOnce+0x28>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f06f 0201 	mvn.w	r2, #1
 800073a:	611a      	str	r2, [r3, #16]

    // 3. Reset the counter
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 800073c:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <triggerOnce+0x28>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	@ 0x24

    // 4. (Re)Start the timer in interrupt mode
    HAL_TIM_Base_Start_IT(&htim3);
 8000744:	4802      	ldr	r0, [pc, #8]	@ (8000750 <triggerOnce+0x28>)
 8000746:	f003 ff13 	bl	8004570 <HAL_TIM_Base_Start_IT>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000e4 	.word	0x200000e4

08000754 <setTimerInterval>:

void setTimerInterval(uint32_t newPeriod)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    // 1. Stop the timer first
    HAL_TIM_Base_Stop_IT(&htim3);
 800075c:	480b      	ldr	r0, [pc, #44]	@ (800078c <setTimerInterval+0x38>)
 800075e:	f003 ff59 	bl	8004614 <HAL_TIM_Base_Stop_IT>

    // 2. Update auto-reload (ARR)
    __HAL_TIM_SET_AUTORELOAD(&htim3, newPeriod);
 8000762:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <setTimerInterval+0x38>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	62da      	str	r2, [r3, #44]	@ 0x2c
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <setTimerInterval+0x38>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	60d3      	str	r3, [r2, #12]

    // 3. Reset the counter to 0 for a clean start
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <setTimerInterval+0x38>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	@ 0x24

    // 4. Clear any pending update flag
    __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000778:	4b04      	ldr	r3, [pc, #16]	@ (800078c <setTimerInterval+0x38>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f06f 0201 	mvn.w	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000e4 	.word	0x200000e4

08000790 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007a0:	d102      	bne.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x18>
    	debounce_buttons();
 80007a2:	f000 f847 	bl	8000834 <debounce_buttons>
    else if (htim->Instance == TIM3)
    {
    	stopFeeding();
    	HAL_TIM_Base_Stop_IT(&htim3);
    }
}
 80007a6:	e009      	b.n	80007bc <HAL_TIM_PeriodElapsedCallback+0x2c>
    else if (htim->Instance == TIM3)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d104      	bne.n	80007bc <HAL_TIM_PeriodElapsedCallback+0x2c>
    	stopFeeding();
 80007b2:	f001 fb23 	bl	8001dfc <stopFeeding>
    	HAL_TIM_Base_Stop_IT(&htim3);
 80007b6:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007b8:	f003 ff2c 	bl	8004614 <HAL_TIM_Base_Stop_IT>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40000400 	.word	0x40000400
 80007c8:	200000e4 	.word	0x200000e4

080007cc <read_button_pin>:

uint8_t read_button_pin(uint8_t buttonIndex) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
    // This function reads the actual pin state directly:
    switch(buttonIndex) {
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	d823      	bhi.n	8000824 <read_button_pin+0x58>
 80007dc:	a201      	add	r2, pc, #4	@ (adr r2, 80007e4 <read_button_pin+0x18>)
 80007de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e2:	bf00      	nop
 80007e4:	080007f5 	.word	0x080007f5
 80007e8:	08000801 	.word	0x08000801
 80007ec:	0800080d 	.word	0x0800080d
 80007f0:	08000819 	.word	0x08000819
      case 0: return HAL_GPIO_ReadPin(GPIOB, SET_Button_Pin);
 80007f4:	2108      	movs	r1, #8
 80007f6:	480e      	ldr	r0, [pc, #56]	@ (8000830 <read_button_pin+0x64>)
 80007f8:	f001 fe4c 	bl	8002494 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	e012      	b.n	8000826 <read_button_pin+0x5a>
      case 1: return HAL_GPIO_ReadPin(GPIOB, UP_Button_Pin);
 8000800:	2110      	movs	r1, #16
 8000802:	480b      	ldr	r0, [pc, #44]	@ (8000830 <read_button_pin+0x64>)
 8000804:	f001 fe46 	bl	8002494 <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	e00c      	b.n	8000826 <read_button_pin+0x5a>
      case 2: return HAL_GPIO_ReadPin(GPIOB, DOWN_Button_Pin);
 800080c:	2120      	movs	r1, #32
 800080e:	4808      	ldr	r0, [pc, #32]	@ (8000830 <read_button_pin+0x64>)
 8000810:	f001 fe40 	bl	8002494 <HAL_GPIO_ReadPin>
 8000814:	4603      	mov	r3, r0
 8000816:	e006      	b.n	8000826 <read_button_pin+0x5a>
      case 3: return HAL_GPIO_ReadPin(GPIOB, ENTER_Button_Pin);
 8000818:	2140      	movs	r1, #64	@ 0x40
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <read_button_pin+0x64>)
 800081c:	f001 fe3a 	bl	8002494 <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	e000      	b.n	8000826 <read_button_pin+0x5a>
    }
    return 1;
 8000824:	2301      	movs	r3, #1
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40010c00 	.word	0x40010c00

08000834 <debounce_buttons>:

void debounce_buttons() {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
    for (uint8_t i=0; i < BUTTON_COUNT; i++) {
 800083a:	2300      	movs	r3, #0
 800083c:	71fb      	strb	r3, [r7, #7]
 800083e:	e034      	b.n	80008aa <debounce_buttons+0x76>
        uint8_t rawState = read_button_pin(i);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffc2 	bl	80007cc <read_button_pin>
 8000848:	4603      	mov	r3, r0
 800084a:	71bb      	strb	r3, [r7, #6]

        // Check if rawState differs from stable state
        if (rawState != buttonStableState[i]) {
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <debounce_buttons+0x88>)
 8000850:	5cd3      	ldrb	r3, [r2, r3]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	429a      	cmp	r2, r3
 8000858:	d020      	beq.n	800089c <debounce_buttons+0x68>
            buttonCounter[i]++;
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4a18      	ldr	r2, [pc, #96]	@ (80008c0 <debounce_buttons+0x8c>)
 800085e:	5cd2      	ldrb	r2, [r2, r3]
 8000860:	3201      	adds	r2, #1
 8000862:	b2d1      	uxtb	r1, r2
 8000864:	4a16      	ldr	r2, [pc, #88]	@ (80008c0 <debounce_buttons+0x8c>)
 8000866:	54d1      	strb	r1, [r2, r3]
            if (buttonCounter[i] >= DEBOUNCE_DELAY) {
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <debounce_buttons+0x8c>)
 800086c:	5cd3      	ldrb	r3, [r2, r3]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d918      	bls.n	80008a4 <debounce_buttons+0x70>
                // Confirm stable change
                buttonStableState[i] = rawState;
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4911      	ldr	r1, [pc, #68]	@ (80008bc <debounce_buttons+0x88>)
 8000876:	79ba      	ldrb	r2, [r7, #6]
 8000878:	54ca      	strb	r2, [r1, r3]
                buttonCounter[i] = 0;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4a10      	ldr	r2, [pc, #64]	@ (80008c0 <debounce_buttons+0x8c>)
 800087e:	2100      	movs	r1, #0
 8000880:	54d1      	strb	r1, [r2, r3]

                 if (buttonStableState[i] == 1)
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	4a0d      	ldr	r2, [pc, #52]	@ (80008bc <debounce_buttons+0x88>)
 8000886:	5cd3      	ldrb	r3, [r2, r3]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b01      	cmp	r3, #1
 800088c:	d10a      	bne.n	80008a4 <debounce_buttons+0x70>
                 {
                	 handle_event(i + 1);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	3301      	adds	r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f81b 	bl	80008d0 <handle_event>
 800089a:	e003      	b.n	80008a4 <debounce_buttons+0x70>
                 }
            }
        }
        else {
            // No difference, reset the counter
            buttonCounter[i] = 0;
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <debounce_buttons+0x8c>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i=0; i < BUTTON_COUNT; i++) {
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	3301      	adds	r3, #1
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d9c7      	bls.n	8000840 <debounce_buttons+0xc>
        }
    }
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000174 	.word	0x20000174
 80008c0:	20000178 	.word	0x20000178

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <handle_event>:
int8_t selectedFeedMinute = 31;
int8_t selectedFeedSecond = 10;
int16_t feedDuration 	  = 2000;

/***********************************************/
void handle_event(AppEvent event) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
/***********************************************/
	switch (currentState) {
 80008da:	4bab      	ldr	r3, [pc, #684]	@ (8000b88 <handle_event+0x2b8>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b0c      	cmp	r3, #12
 80008e0:	f200 831b 	bhi.w	8000f1a <handle_event+0x64a>
 80008e4:	a201      	add	r2, pc, #4	@ (adr r2, 80008ec <handle_event+0x1c>)
 80008e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ea:	bf00      	nop
 80008ec:	08000921 	.word	0x08000921
 80008f0:	08000955 	.word	0x08000955
 80008f4:	08000967 	.word	0x08000967
 80008f8:	080009a9 	.word	0x080009a9
 80008fc:	08000a2d 	.word	0x08000a2d
 8000900:	08000ab1 	.word	0x08000ab1
 8000904:	08000b35 	.word	0x08000b35
 8000908:	08000bcd 	.word	0x08000bcd
 800090c:	08000c51 	.word	0x08000c51
 8000910:	08000ddd 	.word	0x08000ddd
 8000914:	08000d59 	.word	0x08000d59
 8000918:	08000cd5 	.word	0x08000cd5
 800091c:	08000e81 	.word	0x08000e81

		case IDLE_STATE:

			switch (event) {
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b05      	cmp	r3, #5
 8000924:	d010      	beq.n	8000948 <handle_event+0x78>
 8000926:	2b05      	cmp	r3, #5
 8000928:	dc12      	bgt.n	8000950 <handle_event+0x80>
 800092a:	2b01      	cmp	r3, #1
 800092c:	d002      	beq.n	8000934 <handle_event+0x64>
 800092e:	2b04      	cmp	r3, #4
 8000930:	d004      	beq.n	800093c <handle_event+0x6c>
					currentState = FEED_STATE;
					break;

				default:

					break;
 8000932:	e00d      	b.n	8000950 <handle_event+0x80>
					currentState = MAIN_MANU_STATE;
 8000934:	4b94      	ldr	r3, [pc, #592]	@ (8000b88 <handle_event+0x2b8>)
 8000936:	2202      	movs	r2, #2
 8000938:	701a      	strb	r2, [r3, #0]
					break;
 800093a:	e00a      	b.n	8000952 <handle_event+0x82>
					currentState = FEED_STATE;
 800093c:	4b92      	ldr	r3, [pc, #584]	@ (8000b88 <handle_event+0x2b8>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
					startFeeding();
 8000942:	f001 fa4d 	bl	8001de0 <startFeeding>
					break;
 8000946:	e004      	b.n	8000952 <handle_event+0x82>
					currentState = FEED_STATE;
 8000948:	4b8f      	ldr	r3, [pc, #572]	@ (8000b88 <handle_event+0x2b8>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
					break;
 800094e:	e000      	b.n	8000952 <handle_event+0x82>
					break;
 8000950:	bf00      	nop
			}

			break;
 8000952:	e2e3      	b.n	8000f1c <handle_event+0x64c>

		case FEED_STATE:

			switch (event) {
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	2b06      	cmp	r3, #6
 8000958:	d103      	bne.n	8000962 <handle_event+0x92>
				case END_FEED_TIME_EVENT:
					currentState = IDLE_STATE;
 800095a:	4b8b      	ldr	r3, [pc, #556]	@ (8000b88 <handle_event+0x2b8>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
					break;
 8000960:	e000      	b.n	8000964 <handle_event+0x94>

				default:

					break;
 8000962:	bf00      	nop
			}
			break;
 8000964:	e2da      	b.n	8000f1c <handle_event+0x64c>

		case MAIN_MANU_STATE:

			switch (event) {
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	3b02      	subs	r3, #2
 800096a:	2b03      	cmp	r3, #3
 800096c:	d81a      	bhi.n	80009a4 <handle_event+0xd4>
 800096e:	a201      	add	r2, pc, #4	@ (adr r2, 8000974 <handle_event+0xa4>)
 8000970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000974:	0800098d 	.word	0x0800098d
 8000978:	08000995 	.word	0x08000995
 800097c:	08000985 	.word	0x08000985
 8000980:	0800099d 	.word	0x0800099d
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_FEED_PERIOD_STATE;
 8000984:	4b80      	ldr	r3, [pc, #512]	@ (8000b88 <handle_event+0x2b8>)
 8000986:	220c      	movs	r2, #12
 8000988:	701a      	strb	r2, [r3, #0]
					break;
 800098a:	e00c      	b.n	80009a6 <handle_event+0xd6>

				case UP_BUTTON_PRESSED_EVENT:
					currentState = SET_HOUR_FEED_STATE;
 800098c:	4b7e      	ldr	r3, [pc, #504]	@ (8000b88 <handle_event+0x2b8>)
 800098e:	2203      	movs	r2, #3
 8000990:	701a      	strb	r2, [r3, #0]
					break;
 8000992:	e008      	b.n	80009a6 <handle_event+0xd6>

				case DOWN_BUTTON_PRESSED_EVENT:
					currentState = SET_HOUR_TIME_STATE;
 8000994:	4b7c      	ldr	r3, [pc, #496]	@ (8000b88 <handle_event+0x2b8>)
 8000996:	2206      	movs	r2, #6
 8000998:	701a      	strb	r2, [r3, #0]

					break;
 800099a:	e004      	b.n	80009a6 <handle_event+0xd6>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 800099c:	4b7a      	ldr	r3, [pc, #488]	@ (8000b88 <handle_event+0x2b8>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]

					break;
 80009a2:	e000      	b.n	80009a6 <handle_event+0xd6>

				default:

					break;
 80009a4:	bf00      	nop
			}

			break;
 80009a6:	e2b9      	b.n	8000f1c <handle_event+0x64c>

		case SET_HOUR_FEED_STATE:

			switch (event) {
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	3b02      	subs	r3, #2
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d837      	bhi.n	8000a20 <handle_event+0x150>
 80009b0:	a201      	add	r2, pc, #4	@ (adr r2, 80009b8 <handle_event+0xe8>)
 80009b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b6:	bf00      	nop
 80009b8:	080009d9 	.word	0x080009d9
 80009bc:	080009fd 	.word	0x080009fd
 80009c0:	080009c9 	.word	0x080009c9
 80009c4:	080009d1 	.word	0x080009d1
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_MINUTE_FEED_STATE;
 80009c8:	4b6f      	ldr	r3, [pc, #444]	@ (8000b88 <handle_event+0x2b8>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	701a      	strb	r2, [r3, #0]
					break;
 80009ce:	e02c      	b.n	8000a2a <handle_event+0x15a>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 80009d0:	4b6d      	ldr	r3, [pc, #436]	@ (8000b88 <handle_event+0x2b8>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
					break;
 80009d6:	e028      	b.n	8000a2a <handle_event+0x15a>

				case UP_BUTTON_PRESSED_EVENT:
					selectedFeedHour++;
 80009d8:	4b6c      	ldr	r3, [pc, #432]	@ (8000b8c <handle_event+0x2bc>)
 80009da:	f993 3000 	ldrsb.w	r3, [r3]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	3301      	adds	r3, #1
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	b25a      	sxtb	r2, r3
 80009e6:	4b69      	ldr	r3, [pc, #420]	@ (8000b8c <handle_event+0x2bc>)
 80009e8:	701a      	strb	r2, [r3, #0]
					if(selectedFeedHour == 24) selectedFeedHour = 0;
 80009ea:	4b68      	ldr	r3, [pc, #416]	@ (8000b8c <handle_event+0x2bc>)
 80009ec:	f993 3000 	ldrsb.w	r3, [r3]
 80009f0:	2b18      	cmp	r3, #24
 80009f2:	d117      	bne.n	8000a24 <handle_event+0x154>
 80009f4:	4b65      	ldr	r3, [pc, #404]	@ (8000b8c <handle_event+0x2bc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
					break;
 80009fa:	e013      	b.n	8000a24 <handle_event+0x154>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedFeedHour--;
 80009fc:	4b63      	ldr	r3, [pc, #396]	@ (8000b8c <handle_event+0x2bc>)
 80009fe:	f993 3000 	ldrsb.w	r3, [r3]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	3b01      	subs	r3, #1
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	b25a      	sxtb	r2, r3
 8000a0a:	4b60      	ldr	r3, [pc, #384]	@ (8000b8c <handle_event+0x2bc>)
 8000a0c:	701a      	strb	r2, [r3, #0]
					if(selectedFeedHour < 0) selectedFeedHour = 23;
 8000a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8000b8c <handle_event+0x2bc>)
 8000a10:	f993 3000 	ldrsb.w	r3, [r3]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	da07      	bge.n	8000a28 <handle_event+0x158>
 8000a18:	4b5c      	ldr	r3, [pc, #368]	@ (8000b8c <handle_event+0x2bc>)
 8000a1a:	2217      	movs	r2, #23
 8000a1c:	701a      	strb	r2, [r3, #0]
					break;
 8000a1e:	e003      	b.n	8000a28 <handle_event+0x158>

				default:

					break;
 8000a20:	bf00      	nop
 8000a22:	e27b      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000a24:	bf00      	nop
 8000a26:	e279      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000a28:	bf00      	nop
			}

			break;
 8000a2a:	e277      	b.n	8000f1c <handle_event+0x64c>

		case SET_MINUTE_FEED_STATE:

			switch (event) {
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	3b02      	subs	r3, #2
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	d837      	bhi.n	8000aa4 <handle_event+0x1d4>
 8000a34:	a201      	add	r2, pc, #4	@ (adr r2, 8000a3c <handle_event+0x16c>)
 8000a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3a:	bf00      	nop
 8000a3c:	08000a5d 	.word	0x08000a5d
 8000a40:	08000a81 	.word	0x08000a81
 8000a44:	08000a4d 	.word	0x08000a4d
 8000a48:	08000a55 	.word	0x08000a55
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_SECOND_FEED_STATE;
 8000a4c:	4b4e      	ldr	r3, [pc, #312]	@ (8000b88 <handle_event+0x2b8>)
 8000a4e:	2205      	movs	r2, #5
 8000a50:	701a      	strb	r2, [r3, #0]
					break;
 8000a52:	e02c      	b.n	8000aae <handle_event+0x1de>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000a54:	4b4c      	ldr	r3, [pc, #304]	@ (8000b88 <handle_event+0x2b8>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
					break;
 8000a5a:	e028      	b.n	8000aae <handle_event+0x1de>

				case UP_BUTTON_PRESSED_EVENT:
					selectedFeedMinute++;
 8000a5c:	4b4c      	ldr	r3, [pc, #304]	@ (8000b90 <handle_event+0x2c0>)
 8000a5e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	3301      	adds	r3, #1
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	b25a      	sxtb	r2, r3
 8000a6a:	4b49      	ldr	r3, [pc, #292]	@ (8000b90 <handle_event+0x2c0>)
 8000a6c:	701a      	strb	r2, [r3, #0]
					if(selectedFeedMinute == 60) selectedFeedMinute = 0;
 8000a6e:	4b48      	ldr	r3, [pc, #288]	@ (8000b90 <handle_event+0x2c0>)
 8000a70:	f993 3000 	ldrsb.w	r3, [r3]
 8000a74:	2b3c      	cmp	r3, #60	@ 0x3c
 8000a76:	d117      	bne.n	8000aa8 <handle_event+0x1d8>
 8000a78:	4b45      	ldr	r3, [pc, #276]	@ (8000b90 <handle_event+0x2c0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
					break;
 8000a7e:	e013      	b.n	8000aa8 <handle_event+0x1d8>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedFeedMinute--;
 8000a80:	4b43      	ldr	r3, [pc, #268]	@ (8000b90 <handle_event+0x2c0>)
 8000a82:	f993 3000 	ldrsb.w	r3, [r3]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	b25a      	sxtb	r2, r3
 8000a8e:	4b40      	ldr	r3, [pc, #256]	@ (8000b90 <handle_event+0x2c0>)
 8000a90:	701a      	strb	r2, [r3, #0]
					if(selectedFeedMinute < 0) selectedFeedMinute = 59;
 8000a92:	4b3f      	ldr	r3, [pc, #252]	@ (8000b90 <handle_event+0x2c0>)
 8000a94:	f993 3000 	ldrsb.w	r3, [r3]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	da07      	bge.n	8000aac <handle_event+0x1dc>
 8000a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b90 <handle_event+0x2c0>)
 8000a9e:	223b      	movs	r2, #59	@ 0x3b
 8000aa0:	701a      	strb	r2, [r3, #0]
					break;
 8000aa2:	e003      	b.n	8000aac <handle_event+0x1dc>

				default:

					break;
 8000aa4:	bf00      	nop
 8000aa6:	e239      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000aa8:	bf00      	nop
 8000aaa:	e237      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000aac:	bf00      	nop
			}

			break;
 8000aae:	e235      	b.n	8000f1c <handle_event+0x64c>

		case SET_SECOND_FEED_STATE:

			switch (event) {
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	3b02      	subs	r3, #2
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d837      	bhi.n	8000b28 <handle_event+0x258>
 8000ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac0 <handle_event+0x1f0>)
 8000aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abe:	bf00      	nop
 8000ac0:	08000ae1 	.word	0x08000ae1
 8000ac4:	08000b05 	.word	0x08000b05
 8000ac8:	08000ad1 	.word	0x08000ad1
 8000acc:	08000ad9 	.word	0x08000ad9
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = IDLE_STATE;
 8000ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b88 <handle_event+0x2b8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
					break;
 8000ad6:	e02c      	b.n	8000b32 <handle_event+0x262>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b88 <handle_event+0x2b8>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
					break;
 8000ade:	e028      	b.n	8000b32 <handle_event+0x262>

				case UP_BUTTON_PRESSED_EVENT:
					selectedFeedSecond++;
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b94 <handle_event+0x2c4>)
 8000ae2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	b25a      	sxtb	r2, r3
 8000aee:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <handle_event+0x2c4>)
 8000af0:	701a      	strb	r2, [r3, #0]
					if(selectedFeedSecond == 60) selectedFeedSecond = 0;
 8000af2:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <handle_event+0x2c4>)
 8000af4:	f993 3000 	ldrsb.w	r3, [r3]
 8000af8:	2b3c      	cmp	r3, #60	@ 0x3c
 8000afa:	d117      	bne.n	8000b2c <handle_event+0x25c>
 8000afc:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <handle_event+0x2c4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
					break;
 8000b02:	e013      	b.n	8000b2c <handle_event+0x25c>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedFeedSecond--;
 8000b04:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <handle_event+0x2c4>)
 8000b06:	f993 3000 	ldrsb.w	r3, [r3]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	b25a      	sxtb	r2, r3
 8000b12:	4b20      	ldr	r3, [pc, #128]	@ (8000b94 <handle_event+0x2c4>)
 8000b14:	701a      	strb	r2, [r3, #0]
					if(selectedFeedSecond < 0) selectedFeedSecond = 59;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <handle_event+0x2c4>)
 8000b18:	f993 3000 	ldrsb.w	r3, [r3]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	da07      	bge.n	8000b30 <handle_event+0x260>
 8000b20:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <handle_event+0x2c4>)
 8000b22:	223b      	movs	r2, #59	@ 0x3b
 8000b24:	701a      	strb	r2, [r3, #0]
					break;
 8000b26:	e003      	b.n	8000b30 <handle_event+0x260>

				default:

					break;
 8000b28:	bf00      	nop
 8000b2a:	e1f7      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000b2c:	bf00      	nop
 8000b2e:	e1f5      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000b30:	bf00      	nop
			}

			break;
 8000b32:	e1f3      	b.n	8000f1c <handle_event+0x64c>

		case SET_HOUR_TIME_STATE:

			switch (event) {
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	3b02      	subs	r3, #2
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d841      	bhi.n	8000bc0 <handle_event+0x2f0>
 8000b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b44 <handle_event+0x274>)
 8000b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b42:	bf00      	nop
 8000b44:	08000b65 	.word	0x08000b65
 8000b48:	08000b9d 	.word	0x08000b9d
 8000b4c:	08000b55 	.word	0x08000b55
 8000b50:	08000b5d 	.word	0x08000b5d
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_MINUTE_TIME_STATE;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <handle_event+0x2b8>)
 8000b56:	2207      	movs	r2, #7
 8000b58:	701a      	strb	r2, [r3, #0]
					break;
 8000b5a:	e036      	b.n	8000bca <handle_event+0x2fa>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <handle_event+0x2b8>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
					break;
 8000b62:	e032      	b.n	8000bca <handle_event+0x2fa>

				case UP_BUTTON_PRESSED_EVENT:
					selectedHour++;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <handle_event+0x2c8>)
 8000b66:	f993 3000 	ldrsb.w	r3, [r3]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	b25a      	sxtb	r2, r3
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <handle_event+0x2c8>)
 8000b74:	701a      	strb	r2, [r3, #0]
					if(selectedHour == 24) selectedHour = 0;
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <handle_event+0x2c8>)
 8000b78:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7c:	2b18      	cmp	r3, #24
 8000b7e:	d121      	bne.n	8000bc4 <handle_event+0x2f4>
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <handle_event+0x2c8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
					break;
 8000b86:	e01d      	b.n	8000bc4 <handle_event+0x2f4>
 8000b88:	2000017c 	.word	0x2000017c
 8000b8c:	20000006 	.word	0x20000006
 8000b90:	20000007 	.word	0x20000007
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000000 	.word	0x20000000

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedHour--;
 8000b9c:	4ba5      	ldr	r3, [pc, #660]	@ (8000e34 <handle_event+0x564>)
 8000b9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	b25a      	sxtb	r2, r3
 8000baa:	4ba2      	ldr	r3, [pc, #648]	@ (8000e34 <handle_event+0x564>)
 8000bac:	701a      	strb	r2, [r3, #0]
					if(selectedHour < 0) selectedHour = 23;
 8000bae:	4ba1      	ldr	r3, [pc, #644]	@ (8000e34 <handle_event+0x564>)
 8000bb0:	f993 3000 	ldrsb.w	r3, [r3]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	da07      	bge.n	8000bc8 <handle_event+0x2f8>
 8000bb8:	4b9e      	ldr	r3, [pc, #632]	@ (8000e34 <handle_event+0x564>)
 8000bba:	2217      	movs	r2, #23
 8000bbc:	701a      	strb	r2, [r3, #0]
					break;
 8000bbe:	e003      	b.n	8000bc8 <handle_event+0x2f8>

				default:

					break;
 8000bc0:	bf00      	nop
 8000bc2:	e1ab      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000bc4:	bf00      	nop
 8000bc6:	e1a9      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000bc8:	bf00      	nop
			}

			break;
 8000bca:	e1a7      	b.n	8000f1c <handle_event+0x64c>

		case SET_MINUTE_TIME_STATE:

			switch (event) {
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	3b02      	subs	r3, #2
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d837      	bhi.n	8000c44 <handle_event+0x374>
 8000bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8000bdc <handle_event+0x30c>)
 8000bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bda:	bf00      	nop
 8000bdc:	08000bfd 	.word	0x08000bfd
 8000be0:	08000c21 	.word	0x08000c21
 8000be4:	08000bed 	.word	0x08000bed
 8000be8:	08000bf5 	.word	0x08000bf5
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_SECOND_TIME_STATE;
 8000bec:	4b92      	ldr	r3, [pc, #584]	@ (8000e38 <handle_event+0x568>)
 8000bee:	2208      	movs	r2, #8
 8000bf0:	701a      	strb	r2, [r3, #0]
					break;
 8000bf2:	e02c      	b.n	8000c4e <handle_event+0x37e>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000bf4:	4b90      	ldr	r3, [pc, #576]	@ (8000e38 <handle_event+0x568>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
					break;
 8000bfa:	e028      	b.n	8000c4e <handle_event+0x37e>

				case UP_BUTTON_PRESSED_EVENT:
					selectedMinute++;
 8000bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8000e3c <handle_event+0x56c>)
 8000bfe:	f993 3000 	ldrsb.w	r3, [r3]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	3301      	adds	r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	b25a      	sxtb	r2, r3
 8000c0a:	4b8c      	ldr	r3, [pc, #560]	@ (8000e3c <handle_event+0x56c>)
 8000c0c:	701a      	strb	r2, [r3, #0]
					if(selectedMinute == 60) selectedMinute = 0;
 8000c0e:	4b8b      	ldr	r3, [pc, #556]	@ (8000e3c <handle_event+0x56c>)
 8000c10:	f993 3000 	ldrsb.w	r3, [r3]
 8000c14:	2b3c      	cmp	r3, #60	@ 0x3c
 8000c16:	d117      	bne.n	8000c48 <handle_event+0x378>
 8000c18:	4b88      	ldr	r3, [pc, #544]	@ (8000e3c <handle_event+0x56c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
					break;
 8000c1e:	e013      	b.n	8000c48 <handle_event+0x378>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedMinute--;
 8000c20:	4b86      	ldr	r3, [pc, #536]	@ (8000e3c <handle_event+0x56c>)
 8000c22:	f993 3000 	ldrsb.w	r3, [r3]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	b25a      	sxtb	r2, r3
 8000c2e:	4b83      	ldr	r3, [pc, #524]	@ (8000e3c <handle_event+0x56c>)
 8000c30:	701a      	strb	r2, [r3, #0]
					if(selectedMinute < 0) selectedMinute = 59;
 8000c32:	4b82      	ldr	r3, [pc, #520]	@ (8000e3c <handle_event+0x56c>)
 8000c34:	f993 3000 	ldrsb.w	r3, [r3]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	da07      	bge.n	8000c4c <handle_event+0x37c>
 8000c3c:	4b7f      	ldr	r3, [pc, #508]	@ (8000e3c <handle_event+0x56c>)
 8000c3e:	223b      	movs	r2, #59	@ 0x3b
 8000c40:	701a      	strb	r2, [r3, #0]
					break;
 8000c42:	e003      	b.n	8000c4c <handle_event+0x37c>

				default:

					break;
 8000c44:	bf00      	nop
 8000c46:	e169      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000c48:	bf00      	nop
 8000c4a:	e167      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000c4c:	bf00      	nop
			}

			break;
 8000c4e:	e165      	b.n	8000f1c <handle_event+0x64c>

		case SET_SECOND_TIME_STATE:

			switch (event) {
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	3b02      	subs	r3, #2
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d837      	bhi.n	8000cc8 <handle_event+0x3f8>
 8000c58:	a201      	add	r2, pc, #4	@ (adr r2, 8000c60 <handle_event+0x390>)
 8000c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5e:	bf00      	nop
 8000c60:	08000c81 	.word	0x08000c81
 8000c64:	08000ca5 	.word	0x08000ca5
 8000c68:	08000c71 	.word	0x08000c71
 8000c6c:	08000c79 	.word	0x08000c79
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_DAY_STATE;
 8000c70:	4b71      	ldr	r3, [pc, #452]	@ (8000e38 <handle_event+0x568>)
 8000c72:	220b      	movs	r2, #11
 8000c74:	701a      	strb	r2, [r3, #0]
					break;
 8000c76:	e02c      	b.n	8000cd2 <handle_event+0x402>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000c78:	4b6f      	ldr	r3, [pc, #444]	@ (8000e38 <handle_event+0x568>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
					break;
 8000c7e:	e028      	b.n	8000cd2 <handle_event+0x402>

				case UP_BUTTON_PRESSED_EVENT:
					selectedSecond++;
 8000c80:	4b6f      	ldr	r3, [pc, #444]	@ (8000e40 <handle_event+0x570>)
 8000c82:	f993 3000 	ldrsb.w	r3, [r3]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	b25a      	sxtb	r2, r3
 8000c8e:	4b6c      	ldr	r3, [pc, #432]	@ (8000e40 <handle_event+0x570>)
 8000c90:	701a      	strb	r2, [r3, #0]
					if(selectedSecond == 60) selectedSecond = 0;
 8000c92:	4b6b      	ldr	r3, [pc, #428]	@ (8000e40 <handle_event+0x570>)
 8000c94:	f993 3000 	ldrsb.w	r3, [r3]
 8000c98:	2b3c      	cmp	r3, #60	@ 0x3c
 8000c9a:	d117      	bne.n	8000ccc <handle_event+0x3fc>
 8000c9c:	4b68      	ldr	r3, [pc, #416]	@ (8000e40 <handle_event+0x570>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
					break;
 8000ca2:	e013      	b.n	8000ccc <handle_event+0x3fc>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedSecond--;
 8000ca4:	4b66      	ldr	r3, [pc, #408]	@ (8000e40 <handle_event+0x570>)
 8000ca6:	f993 3000 	ldrsb.w	r3, [r3]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	3b01      	subs	r3, #1
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	b25a      	sxtb	r2, r3
 8000cb2:	4b63      	ldr	r3, [pc, #396]	@ (8000e40 <handle_event+0x570>)
 8000cb4:	701a      	strb	r2, [r3, #0]
					if(selectedSecond < 0) selectedSecond = 59;
 8000cb6:	4b62      	ldr	r3, [pc, #392]	@ (8000e40 <handle_event+0x570>)
 8000cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	da07      	bge.n	8000cd0 <handle_event+0x400>
 8000cc0:	4b5f      	ldr	r3, [pc, #380]	@ (8000e40 <handle_event+0x570>)
 8000cc2:	223b      	movs	r2, #59	@ 0x3b
 8000cc4:	701a      	strb	r2, [r3, #0]
					break;
 8000cc6:	e003      	b.n	8000cd0 <handle_event+0x400>

				default:

					break;
 8000cc8:	bf00      	nop
 8000cca:	e127      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000ccc:	bf00      	nop
 8000cce:	e125      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000cd0:	bf00      	nop
			}

			break;
 8000cd2:	e123      	b.n	8000f1c <handle_event+0x64c>

		case SET_DAY_STATE:

			switch (event) {
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	3b02      	subs	r3, #2
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d837      	bhi.n	8000d4c <handle_event+0x47c>
 8000cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce4 <handle_event+0x414>)
 8000cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce2:	bf00      	nop
 8000ce4:	08000d05 	.word	0x08000d05
 8000ce8:	08000d29 	.word	0x08000d29
 8000cec:	08000cf5 	.word	0x08000cf5
 8000cf0:	08000cfd 	.word	0x08000cfd
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_MONTH_STATE;
 8000cf4:	4b50      	ldr	r3, [pc, #320]	@ (8000e38 <handle_event+0x568>)
 8000cf6:	220a      	movs	r2, #10
 8000cf8:	701a      	strb	r2, [r3, #0]
					break;
 8000cfa:	e02c      	b.n	8000d56 <handle_event+0x486>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8000e38 <handle_event+0x568>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
					break;
 8000d02:	e028      	b.n	8000d56 <handle_event+0x486>

				case UP_BUTTON_PRESSED_EVENT:
					selectedDay++;
 8000d04:	4b4f      	ldr	r3, [pc, #316]	@ (8000e44 <handle_event+0x574>)
 8000d06:	f993 3000 	ldrsb.w	r3, [r3]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	b25a      	sxtb	r2, r3
 8000d12:	4b4c      	ldr	r3, [pc, #304]	@ (8000e44 <handle_event+0x574>)
 8000d14:	701a      	strb	r2, [r3, #0]
					if(selectedDay == 32) selectedDay = 0;
 8000d16:	4b4b      	ldr	r3, [pc, #300]	@ (8000e44 <handle_event+0x574>)
 8000d18:	f993 3000 	ldrsb.w	r3, [r3]
 8000d1c:	2b20      	cmp	r3, #32
 8000d1e:	d117      	bne.n	8000d50 <handle_event+0x480>
 8000d20:	4b48      	ldr	r3, [pc, #288]	@ (8000e44 <handle_event+0x574>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
					break;
 8000d26:	e013      	b.n	8000d50 <handle_event+0x480>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedDay--;
 8000d28:	4b46      	ldr	r3, [pc, #280]	@ (8000e44 <handle_event+0x574>)
 8000d2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	3b01      	subs	r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	b25a      	sxtb	r2, r3
 8000d36:	4b43      	ldr	r3, [pc, #268]	@ (8000e44 <handle_event+0x574>)
 8000d38:	701a      	strb	r2, [r3, #0]
					if(selectedDay < 0) selectedDay = 31;
 8000d3a:	4b42      	ldr	r3, [pc, #264]	@ (8000e44 <handle_event+0x574>)
 8000d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	da07      	bge.n	8000d54 <handle_event+0x484>
 8000d44:	4b3f      	ldr	r3, [pc, #252]	@ (8000e44 <handle_event+0x574>)
 8000d46:	221f      	movs	r2, #31
 8000d48:	701a      	strb	r2, [r3, #0]
					break;
 8000d4a:	e003      	b.n	8000d54 <handle_event+0x484>

				default:

					break;
 8000d4c:	bf00      	nop
 8000d4e:	e0e5      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000d50:	bf00      	nop
 8000d52:	e0e3      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000d54:	bf00      	nop
			}

			break;
 8000d56:	e0e1      	b.n	8000f1c <handle_event+0x64c>

		case SET_MONTH_STATE:

			switch (event) {
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d837      	bhi.n	8000dd0 <handle_event+0x500>
 8000d60:	a201      	add	r2, pc, #4	@ (adr r2, 8000d68 <handle_event+0x498>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000d89 	.word	0x08000d89
 8000d6c:	08000dad 	.word	0x08000dad
 8000d70:	08000d79 	.word	0x08000d79
 8000d74:	08000d81 	.word	0x08000d81
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = SET_YEAR_STATE;
 8000d78:	4b2f      	ldr	r3, [pc, #188]	@ (8000e38 <handle_event+0x568>)
 8000d7a:	2209      	movs	r2, #9
 8000d7c:	701a      	strb	r2, [r3, #0]
					break;
 8000d7e:	e02c      	b.n	8000dda <handle_event+0x50a>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000d80:	4b2d      	ldr	r3, [pc, #180]	@ (8000e38 <handle_event+0x568>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
					break;
 8000d86:	e028      	b.n	8000dda <handle_event+0x50a>

				case UP_BUTTON_PRESSED_EVENT:
					selectedMonth++;
 8000d88:	4b2f      	ldr	r3, [pc, #188]	@ (8000e48 <handle_event+0x578>)
 8000d8a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	3301      	adds	r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	b25a      	sxtb	r2, r3
 8000d96:	4b2c      	ldr	r3, [pc, #176]	@ (8000e48 <handle_event+0x578>)
 8000d98:	701a      	strb	r2, [r3, #0]
					if(selectedMonth == 13) selectedMonth = 0;
 8000d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e48 <handle_event+0x578>)
 8000d9c:	f993 3000 	ldrsb.w	r3, [r3]
 8000da0:	2b0d      	cmp	r3, #13
 8000da2:	d117      	bne.n	8000dd4 <handle_event+0x504>
 8000da4:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <handle_event+0x578>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
					break;
 8000daa:	e013      	b.n	8000dd4 <handle_event+0x504>

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedMonth--;
 8000dac:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <handle_event+0x578>)
 8000dae:	f993 3000 	ldrsb.w	r3, [r3]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	3b01      	subs	r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	b25a      	sxtb	r2, r3
 8000dba:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <handle_event+0x578>)
 8000dbc:	701a      	strb	r2, [r3, #0]
					if(selectedMonth < 0) selectedMonth = 12;
 8000dbe:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <handle_event+0x578>)
 8000dc0:	f993 3000 	ldrsb.w	r3, [r3]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da07      	bge.n	8000dd8 <handle_event+0x508>
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <handle_event+0x578>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	701a      	strb	r2, [r3, #0]
					break;
 8000dce:	e003      	b.n	8000dd8 <handle_event+0x508>

				default:

					break;
 8000dd0:	bf00      	nop
 8000dd2:	e0a3      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000dd4:	bf00      	nop
 8000dd6:	e0a1      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000dd8:	bf00      	nop
				}

			break;
 8000dda:	e09f      	b.n	8000f1c <handle_event+0x64c>

		case SET_YEAR_STATE:

			switch (event) {
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	3b02      	subs	r3, #2
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d847      	bhi.n	8000e74 <handle_event+0x5a4>
 8000de4:	a201      	add	r2, pc, #4	@ (adr r2, 8000dec <handle_event+0x51c>)
 8000de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dea:	bf00      	nop
 8000dec:	08000e11 	.word	0x08000e11
 8000df0:	08000e51 	.word	0x08000e51
 8000df4:	08000dfd 	.word	0x08000dfd
 8000df8:	08000e09 	.word	0x08000e09
				case ENTER_BUTTON_PRESSED_EVENT:
					currentState = IDLE_STATE;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <handle_event+0x568>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
					setTimeDate();
 8000e02:	f000 f895 	bl	8000f30 <setTimeDate>
					break;
 8000e06:	e03a      	b.n	8000e7e <handle_event+0x5ae>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <handle_event+0x568>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
					break;
 8000e0e:	e036      	b.n	8000e7e <handle_event+0x5ae>

				case UP_BUTTON_PRESSED_EVENT:
					selectedYear++;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <handle_event+0x57c>)
 8000e12:	f993 3000 	ldrsb.w	r3, [r3]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	3301      	adds	r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	b25a      	sxtb	r2, r3
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <handle_event+0x57c>)
 8000e20:	701a      	strb	r2, [r3, #0]
					if(selectedYear == 100) selectedYear = 0;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <handle_event+0x57c>)
 8000e24:	f993 3000 	ldrsb.w	r3, [r3]
 8000e28:	2b64      	cmp	r3, #100	@ 0x64
 8000e2a:	d125      	bne.n	8000e78 <handle_event+0x5a8>
 8000e2c:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <handle_event+0x57c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
					break;
 8000e32:	e021      	b.n	8000e78 <handle_event+0x5a8>
 8000e34:	20000000 	.word	0x20000000
 8000e38:	2000017c 	.word	0x2000017c
 8000e3c:	20000001 	.word	0x20000001
 8000e40:	20000002 	.word	0x20000002
 8000e44:	20000005 	.word	0x20000005
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	20000003 	.word	0x20000003

				case DOWN_BUTTON_PRESSED_EVENT:
					selectedYear--;
 8000e50:	4b34      	ldr	r3, [pc, #208]	@ (8000f24 <handle_event+0x654>)
 8000e52:	f993 3000 	ldrsb.w	r3, [r3]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	b25a      	sxtb	r2, r3
 8000e5e:	4b31      	ldr	r3, [pc, #196]	@ (8000f24 <handle_event+0x654>)
 8000e60:	701a      	strb	r2, [r3, #0]
					if(selectedYear < 0) selectedYear = 99;
 8000e62:	4b30      	ldr	r3, [pc, #192]	@ (8000f24 <handle_event+0x654>)
 8000e64:	f993 3000 	ldrsb.w	r3, [r3]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	da07      	bge.n	8000e7c <handle_event+0x5ac>
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f24 <handle_event+0x654>)
 8000e6e:	2263      	movs	r2, #99	@ 0x63
 8000e70:	701a      	strb	r2, [r3, #0]
					break;
 8000e72:	e003      	b.n	8000e7c <handle_event+0x5ac>

				default:

					break;
 8000e74:	bf00      	nop
 8000e76:	e051      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000e78:	bf00      	nop
 8000e7a:	e04f      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000e7c:	bf00      	nop
				}

			break;
 8000e7e:	e04d      	b.n	8000f1c <handle_event+0x64c>

		case SET_FEED_PERIOD_STATE:

			switch (event) {
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	3b02      	subs	r3, #2
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d842      	bhi.n	8000f0e <handle_event+0x63e>
 8000e88:	a201      	add	r2, pc, #4	@ (adr r2, 8000e90 <handle_event+0x5c0>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000ebd 	.word	0x08000ebd
 8000e94:	08000ee7 	.word	0x08000ee7
 8000e98:	08000ea1 	.word	0x08000ea1
 8000e9c:	08000eb5 	.word	0x08000eb5
				case ENTER_BUTTON_PRESSED_EVENT:
					setTimerInterval(feedDuration);
 8000ea0:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <handle_event+0x658>)
 8000ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fc54 	bl	8000754 <setTimerInterval>
					currentState = IDLE_STATE;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <handle_event+0x65c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
					break;
 8000eb2:	e031      	b.n	8000f18 <handle_event+0x648>

				case FEED_TIME_EVENT:
					currentState = FEED_STATE;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <handle_event+0x65c>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
					break;
 8000eba:	e02d      	b.n	8000f18 <handle_event+0x648>

				case UP_BUTTON_PRESSED_EVENT:
					feedDuration+=100;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <handle_event+0x658>)
 8000ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	3364      	adds	r3, #100	@ 0x64
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <handle_event+0x658>)
 8000ecc:	801a      	strh	r2, [r3, #0]
					if(feedDuration == 10000) feedDuration = 1000;
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <handle_event+0x658>)
 8000ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d11a      	bne.n	8000f12 <handle_event+0x642>
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <handle_event+0x658>)
 8000ede:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ee2:	801a      	strh	r2, [r3, #0]
					break;
 8000ee4:	e015      	b.n	8000f12 <handle_event+0x642>

				case DOWN_BUTTON_PRESSED_EVENT:
					feedDuration-=100;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <handle_event+0x658>)
 8000ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	3b64      	subs	r3, #100	@ 0x64
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <handle_event+0x658>)
 8000ef6:	801a      	strh	r2, [r3, #0]
					if(feedDuration < 1000) feedDuration = 9999;
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <handle_event+0x658>)
 8000efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f02:	da08      	bge.n	8000f16 <handle_event+0x646>
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <handle_event+0x658>)
 8000f06:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f0a:	801a      	strh	r2, [r3, #0]
					break;
 8000f0c:	e003      	b.n	8000f16 <handle_event+0x646>

				default:

					break;
 8000f0e:	bf00      	nop
 8000f10:	e004      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000f12:	bf00      	nop
 8000f14:	e002      	b.n	8000f1c <handle_event+0x64c>
					break;
 8000f16:	bf00      	nop
			}

			break;
 8000f18:	e000      	b.n	8000f1c <handle_event+0x64c>

		default:

			break;
 8000f1a:	bf00      	nop
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000003 	.word	0x20000003
 8000f28:	2000000a 	.word	0x2000000a
 8000f2c:	2000017c 	.word	0x2000017c

08000f30 <setTimeDate>:

/***********************************************/
void setTimeDate() {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
/***********************************************/
	static RTC_TimeTypeDef setTime = {0};
	static RTC_DateTypeDef setDate = {0};

	setTime.Hours = selectedHour;
 8000f34:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <setTimeDate+0x78>)
 8000f36:	f993 3000 	ldrsb.w	r3, [r3]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <setTimeDate+0x7c>)
 8000f3e:	701a      	strb	r2, [r3, #0]
	setTime.Minutes = selectedMinute;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <setTimeDate+0x80>)
 8000f42:	f993 3000 	ldrsb.w	r3, [r3]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <setTimeDate+0x7c>)
 8000f4a:	705a      	strb	r2, [r3, #1]
	setTime.Seconds = selectedSecond;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <setTimeDate+0x84>)
 8000f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <setTimeDate+0x7c>)
 8000f56:	709a      	strb	r2, [r3, #2]
	setDate.Year = selectedYear;
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <setTimeDate+0x88>)
 8000f5a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <setTimeDate+0x8c>)
 8000f62:	70da      	strb	r2, [r3, #3]
	setDate.Month = selectedMonth;
 8000f64:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <setTimeDate+0x90>)
 8000f66:	f993 3000 	ldrsb.w	r3, [r3]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <setTimeDate+0x8c>)
 8000f6e:	705a      	strb	r2, [r3, #1]
	setDate.Date = selectedDay;
 8000f70:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <setTimeDate+0x94>)
 8000f72:	f993 3000 	ldrsb.w	r3, [r3]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <setTimeDate+0x8c>)
 8000f7a:	709a      	strb	r2, [r3, #2]

	if (HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	490b      	ldr	r1, [pc, #44]	@ (8000fac <setTimeDate+0x7c>)
 8000f80:	4811      	ldr	r0, [pc, #68]	@ (8000fc8 <setTimeDate+0x98>)
 8000f82:	f002 fd89 	bl	8003a98 <HAL_RTC_SetTime>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <setTimeDate+0x60>
	{
		Error_Handler();
 8000f8c:	f7ff fc9a 	bl	80008c4 <Error_Handler>
	}

	if (HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BIN) != HAL_OK)
 8000f90:	2200      	movs	r2, #0
 8000f92:	490a      	ldr	r1, [pc, #40]	@ (8000fbc <setTimeDate+0x8c>)
 8000f94:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <setTimeDate+0x98>)
 8000f96:	f002 feef 	bl	8003d78 <HAL_RTC_SetDate>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <setTimeDate+0x74>
	{
		Error_Handler();
 8000fa0:	f7ff fc90 	bl	80008c4 <Error_Handler>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000180 	.word	0x20000180
 8000fb0:	20000001 	.word	0x20000001
 8000fb4:	20000002 	.word	0x20000002
 8000fb8:	20000003 	.word	0x20000003
 8000fbc:	20000184 	.word	0x20000184
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	20000005 	.word	0x20000005
 8000fc8:	20000088 	.word	0x20000088

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_MspInit+0x5c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <HAL_MspInit+0x5c>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6193      	str	r3, [r2, #24]
 8000fde:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_MspInit+0x5c>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <HAL_MspInit+0x5c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a0e      	ldr	r2, [pc, #56]	@ (8001028 <HAL_MspInit+0x5c>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <HAL_MspInit+0x5c>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_MspInit+0x60>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4a04      	ldr	r2, [pc, #16]	@ (800102c <HAL_MspInit+0x60>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000

08001030 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1d      	ldr	r2, [pc, #116]	@ (80010c0 <HAL_I2C_MspInit+0x90>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d132      	bne.n	80010b6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <HAL_I2C_MspInit+0x94>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a1b      	ldr	r2, [pc, #108]	@ (80010c4 <HAL_I2C_MspInit+0x94>)
 8001056:	f043 0308 	orr.w	r3, r3, #8
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <HAL_I2C_MspInit+0x94>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001068:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106e:	2312      	movs	r3, #18
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <HAL_I2C_MspInit+0x98>)
 800107e:	f001 f885 	bl	800218c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_I2C_MspInit+0x9c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
 8001098:	4a0c      	ldr	r2, [pc, #48]	@ (80010cc <HAL_I2C_MspInit+0x9c>)
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <HAL_I2C_MspInit+0x94>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_I2C_MspInit+0x94>)
 80010a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_I2C_MspInit+0x94>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	@ 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40005400 	.word	0x40005400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	40010000 	.word	0x40010000

080010d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0b      	ldr	r2, [pc, #44]	@ (800110c <HAL_RTC_MspInit+0x3c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d110      	bne.n	8001104 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80010e2:	f001 fec5 	bl	8002e70 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <HAL_RTC_MspInit+0x40>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a09      	ldr	r2, [pc, #36]	@ (8001110 <HAL_RTC_MspInit+0x40>)
 80010ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <HAL_RTC_MspInit+0x40>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010fe:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <HAL_RTC_MspInit+0x44>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40002800 	.word	0x40002800
 8001110:	40021000 	.word	0x40021000
 8001114:	4242043c 	.word	0x4242043c

08001118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001128:	d114      	bne.n	8001154 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112a:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <HAL_TIM_Base_MspInit+0x78>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a18      	ldr	r2, [pc, #96]	@ (8001190 <HAL_TIM_Base_MspInit+0x78>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <HAL_TIM_Base_MspInit+0x78>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	201c      	movs	r0, #28
 8001148:	f000 ffe9 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800114c:	201c      	movs	r0, #28
 800114e:	f001 f802 	bl	8002156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001152:	e018      	b.n	8001186 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <HAL_TIM_Base_MspInit+0x7c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d113      	bne.n	8001186 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <HAL_TIM_Base_MspInit+0x78>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <HAL_TIM_Base_MspInit+0x78>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <HAL_TIM_Base_MspInit+0x78>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	201d      	movs	r0, #29
 800117c:	f000 ffcf 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001180:	201d      	movs	r0, #29
 8001182:	f000 ffe8 	bl	8002156 <HAL_NVIC_EnableIRQ>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	40000400 	.word	0x40000400

08001198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <HAL_UART_MspInit+0x88>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d12f      	bne.n	8001218 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <HAL_UART_MspInit+0x8c>)
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	4a19      	ldr	r2, [pc, #100]	@ (8001224 <HAL_UART_MspInit+0x8c>)
 80011be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c2:	61d3      	str	r3, [r2, #28]
 80011c4:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <HAL_UART_MspInit+0x8c>)
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <HAL_UART_MspInit+0x8c>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <HAL_UART_MspInit+0x8c>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_UART_MspInit+0x8c>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011e8:	2304      	movs	r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	480b      	ldr	r0, [pc, #44]	@ (8001228 <HAL_UART_MspInit+0x90>)
 80011fc:	f000 ffc6 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001200:	2308      	movs	r3, #8
 8001202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	4805      	ldr	r0, [pc, #20]	@ (8001228 <HAL_UART_MspInit+0x90>)
 8001214:	f000 ffba 	bl	800218c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40004400 	.word	0x40004400
 8001224:	40021000 	.word	0x40021000
 8001228:	40010800 	.word	0x40010800

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <MemManage_Handler+0x4>

08001244 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <UsageFault_Handler+0x4>

08001254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127c:	f000 fe38 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <TIM2_IRQHandler+0x10>)
 800128a:	f003 f9f1 	bl	8004670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000009c 	.word	0x2000009c

08001298 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <TIM3_IRQHandler+0x10>)
 800129e:	f003 f9e7 	bl	8004670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200000e4 	.word	0x200000e4

080012ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012b4:	f001 f91e 	bl	80024f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <itoa>:
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
    return ch;
}

/***********************************************/
char* itoa(int i, char b[]) {
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	@ 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
/***********************************************/

	char const digit[] = "0123456789";
 80012d2:	4a28      	ldr	r2, [pc, #160]	@ (8001374 <itoa+0xac>)
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80012da:	c303      	stmia	r3!, {r0, r1}
 80012dc:	801a      	strh	r2, [r3, #0]
 80012de:	3302      	adds	r3, #2
 80012e0:	0c12      	lsrs	r2, r2, #16
 80012e2:	701a      	strb	r2, [r3, #0]
	char *p = b;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	61fb      	str	r3, [r7, #28]
	if (i < 0) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	da07      	bge.n	80012fe <itoa+0x36>
		*p++ = '-';
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	61fa      	str	r2, [r7, #28]
 80012f4:	222d      	movs	r2, #45	@ 0x2d
 80012f6:	701a      	strb	r2, [r3, #0]
		i *= -1;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	425b      	negs	r3, r3
 80012fc:	607b      	str	r3, [r7, #4]
	}
	int shifter = i;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	61bb      	str	r3, [r7, #24]
	do { //Move to where representation ends
		++p;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
		shifter = shifter / 10;
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	4a1b      	ldr	r2, [pc, #108]	@ (8001378 <itoa+0xb0>)
 800130c:	fb82 1203 	smull	r1, r2, r2, r3
 8001310:	1092      	asrs	r2, r2, #2
 8001312:	17db      	asrs	r3, r3, #31
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	61bb      	str	r3, [r7, #24]
	} while (shifter);
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f1      	bne.n	8001302 <itoa+0x3a>
	*p = '\0';
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
	do { //Move back, inserting digits as u go
		*--p = digit[i % 10];
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <itoa+0xb0>)
 8001328:	fb83 2301 	smull	r2, r3, r3, r1
 800132c:	109a      	asrs	r2, r3, #2
 800132e:	17cb      	asrs	r3, r1, #31
 8001330:	1ad2      	subs	r2, r2, r3
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	1aca      	subs	r2, r1, r3
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	3b01      	subs	r3, #1
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	f102 0320 	add.w	r3, r2, #32
 8001346:	443b      	add	r3, r7
 8001348:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	701a      	strb	r2, [r3, #0]
		i = i / 10;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a09      	ldr	r2, [pc, #36]	@ (8001378 <itoa+0xb0>)
 8001354:	fb82 1203 	smull	r1, r2, r2, r3
 8001358:	1092      	asrs	r2, r2, #2
 800135a:	17db      	asrs	r3, r3, #31
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	607b      	str	r3, [r7, #4]
	} while (i);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1de      	bne.n	8001324 <itoa+0x5c>
	return b;
 8001366:	683b      	ldr	r3, [r7, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3724      	adds	r7, #36	@ 0x24
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	08004f3c 	.word	0x08004f3c
 8001378:	66666667 	.word	0x66666667

0800137c <showDateAndTime>:

/***********************************************/
void showDateAndTime() {
 800137c:	b580      	push	{r7, lr}
 800137e:	b096      	sub	sp, #88	@ 0x58
 8001380:	af00      	add	r7, sp, #0
/***********************************************/

	//  --------RTC CLOCK------  //
	RTC_TimeTypeDef TempsTime = { 0 };
 8001382:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001386:	2100      	movs	r1, #0
 8001388:	460a      	mov	r2, r1
 800138a:	801a      	strh	r2, [r3, #0]
 800138c:	460a      	mov	r2, r1
 800138e:	709a      	strb	r2, [r3, #2]
	int8_t Tsec;
	char tempHours[10];
	char tempMin[10];
	char tempSec[10];
	//  --------RTC DATE-------  //
	RTC_DateTypeDef TempDateToUpdate = { 0 };
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
	char tempYear[10];
	char tempMonth[10];
	char tempDate[10];


	HAL_RTC_GetTime(&hrtc, &TempsTime, RTC_FORMAT_BIN);
 8001394:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001398:	2200      	movs	r2, #0
 800139a:	4619      	mov	r1, r3
 800139c:	487c      	ldr	r0, [pc, #496]	@ (8001590 <showDateAndTime+0x214>)
 800139e:	f002 fc13 	bl	8003bc8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &TempDateToUpdate, RTC_FORMAT_BIN);
 80013a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	4879      	ldr	r0, [pc, #484]	@ (8001590 <showDateAndTime+0x214>)
 80013ac:	f002 fd9a 	bl	8003ee4 <HAL_RTC_GetDate>

	// ---- Time ---- //
	// Hours
	// -------------- //
	Thours = TempsTime.Hours;
 80013b0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80013b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	itoa(Thours, tempHours);
 80013b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80013bc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff80 	bl	80012c8 <itoa>
	if (Thours < 10) {
 80013c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80013cc:	2b09      	cmp	r3, #9
 80013ce:	dc0e      	bgt.n	80013ee <showDateAndTime+0x72>
		lcd_send_cmd(0x80 | 0x00);
 80013d0:	2080      	movs	r0, #128	@ 0x80
 80013d2:	f7fe febb 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 80013d6:	486f      	ldr	r0, [pc, #444]	@ (8001594 <showDateAndTime+0x218>)
 80013d8:	f7fe ff69 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80 | 0x01);
 80013dc:	2081      	movs	r0, #129	@ 0x81
 80013de:	f7fe feb5 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempHours);
 80013e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe ff61 	bl	80002ae <lcd_send_string>
 80013ec:	e007      	b.n	80013fe <showDateAndTime+0x82>
	} else {
		lcd_send_cmd(0x80 | 0x00);
 80013ee:	2080      	movs	r0, #128	@ 0x80
 80013f0:	f7fe feac 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempHours);
 80013f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7fe ff58 	bl	80002ae <lcd_send_string>
	}
	lcd_send_cmd(0x80 | 0x02);
 80013fe:	2082      	movs	r0, #130	@ 0x82
 8001400:	f7fe fea4 	bl	800014c <lcd_send_cmd>
	lcd_send_string(":");
 8001404:	4864      	ldr	r0, [pc, #400]	@ (8001598 <showDateAndTime+0x21c>)
 8001406:	f7fe ff52 	bl	80002ae <lcd_send_string>
	// Minute
	// -------------- //
	Tmin = TempsTime.Minutes;
 800140a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800140e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	itoa(Tmin, tempMin);
 8001412:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 8001416:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff53 	bl	80012c8 <itoa>
	if (Tmin < 10) {
 8001422:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 8001426:	2b09      	cmp	r3, #9
 8001428:	dc0e      	bgt.n	8001448 <showDateAndTime+0xcc>
		lcd_send_cmd(0x80 | 0x03);
 800142a:	2083      	movs	r0, #131	@ 0x83
 800142c:	f7fe fe8e 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 8001430:	4858      	ldr	r0, [pc, #352]	@ (8001594 <showDateAndTime+0x218>)
 8001432:	f7fe ff3c 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80 | 0x04);
 8001436:	2084      	movs	r0, #132	@ 0x84
 8001438:	f7fe fe88 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempMin);
 800143c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe ff34 	bl	80002ae <lcd_send_string>
 8001446:	e007      	b.n	8001458 <showDateAndTime+0xdc>
	} else {
		lcd_send_cmd(0x80 | 0x03);
 8001448:	2083      	movs	r0, #131	@ 0x83
 800144a:	f7fe fe7f 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempMin);
 800144e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe ff2b 	bl	80002ae <lcd_send_string>
	}
	lcd_send_cmd(0x80 | 0x05);
 8001458:	2085      	movs	r0, #133	@ 0x85
 800145a:	f7fe fe77 	bl	800014c <lcd_send_cmd>
	lcd_send_string(":");
 800145e:	484e      	ldr	r0, [pc, #312]	@ (8001598 <showDateAndTime+0x21c>)
 8001460:	f7fe ff25 	bl	80002ae <lcd_send_string>
	// Second
	// -------------- //
	Tsec = TempsTime.Seconds;
 8001464:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001468:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	itoa(Tsec, tempSec);
 800146c:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 8001470:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff26 	bl	80012c8 <itoa>
	if (Tsec < 10) {
 800147c:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 8001480:	2b09      	cmp	r3, #9
 8001482:	dc0e      	bgt.n	80014a2 <showDateAndTime+0x126>
		lcd_send_cmd(0x80 | 0x06);
 8001484:	2086      	movs	r0, #134	@ 0x86
 8001486:	f7fe fe61 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 800148a:	4842      	ldr	r0, [pc, #264]	@ (8001594 <showDateAndTime+0x218>)
 800148c:	f7fe ff0f 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80 | 0x07);
 8001490:	2087      	movs	r0, #135	@ 0x87
 8001492:	f7fe fe5b 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempSec);
 8001496:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ff07 	bl	80002ae <lcd_send_string>
 80014a0:	e007      	b.n	80014b2 <showDateAndTime+0x136>
	} else {
		lcd_send_cmd(0x80 | 0x06);
 80014a2:	2086      	movs	r0, #134	@ 0x86
 80014a4:	f7fe fe52 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempSec);
 80014a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe fefe 	bl	80002ae <lcd_send_string>
	}
	// -------------- //
	// ---- date ---- //
	// -------------- //
	Tdate = TempDateToUpdate.Date;
 80014b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014b6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	itoa(Tdate, tempDate);
 80014ba:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 80014be:	463a      	mov	r2, r7
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff00 	bl	80012c8 <itoa>
	if (Tdate < 10) {
 80014c8:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 80014cc:	2b09      	cmp	r3, #9
 80014ce:	dc0d      	bgt.n	80014ec <showDateAndTime+0x170>
		lcd_send_cmd(0x80 | 0x0C);
 80014d0:	208c      	movs	r0, #140	@ 0x8c
 80014d2:	f7fe fe3b 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 80014d6:	482f      	ldr	r0, [pc, #188]	@ (8001594 <showDateAndTime+0x218>)
 80014d8:	f7fe fee9 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80 | 0x0D);
 80014dc:	208d      	movs	r0, #141	@ 0x8d
 80014de:	f7fe fe35 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempDate);
 80014e2:	463b      	mov	r3, r7
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe fee2 	bl	80002ae <lcd_send_string>
 80014ea:	e006      	b.n	80014fa <showDateAndTime+0x17e>
	} else {
		lcd_send_cmd(0x80 | 0x0C);
 80014ec:	208c      	movs	r0, #140	@ 0x8c
 80014ee:	f7fe fe2d 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempDate);
 80014f2:	463b      	mov	r3, r7
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe feda 	bl	80002ae <lcd_send_string>
	}
	lcd_send_cmd(0x80 | 0x0E);
 80014fa:	208e      	movs	r0, #142	@ 0x8e
 80014fc:	f7fe fe26 	bl	800014c <lcd_send_cmd>
	lcd_send_string("/");
 8001500:	4826      	ldr	r0, [pc, #152]	@ (800159c <showDateAndTime+0x220>)
 8001502:	f7fe fed4 	bl	80002ae <lcd_send_string>
	// month
	// -------------- //
	Tmonth = TempDateToUpdate.Month;
 8001506:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800150a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	itoa(Tmonth, tempMonth);
 800150e:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8001512:	f107 020c 	add.w	r2, r7, #12
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fed5 	bl	80012c8 <itoa>
	if (Tmonth < 10) {
 800151e:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8001522:	2b09      	cmp	r3, #9
 8001524:	dc0e      	bgt.n	8001544 <showDateAndTime+0x1c8>
		lcd_send_cmd(0x80 | 0x0F);
 8001526:	208f      	movs	r0, #143	@ 0x8f
 8001528:	f7fe fe10 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 800152c:	4819      	ldr	r0, [pc, #100]	@ (8001594 <showDateAndTime+0x218>)
 800152e:	f7fe febe 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80 | 0x10);
 8001532:	2090      	movs	r0, #144	@ 0x90
 8001534:	f7fe fe0a 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempMonth);
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe feb6 	bl	80002ae <lcd_send_string>
 8001542:	e007      	b.n	8001554 <showDateAndTime+0x1d8>
	} else {
		lcd_send_cmd(0x80 | 0x0F);
 8001544:	208f      	movs	r0, #143	@ 0x8f
 8001546:	f7fe fe01 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempMonth);
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fead 	bl	80002ae <lcd_send_string>
	}
	lcd_send_cmd(0x80 | 0x11);
 8001554:	2091      	movs	r0, #145	@ 0x91
 8001556:	f7fe fdf9 	bl	800014c <lcd_send_cmd>
	lcd_send_string("/");
 800155a:	4810      	ldr	r0, [pc, #64]	@ (800159c <showDateAndTime+0x220>)
 800155c:	f7fe fea7 	bl	80002ae <lcd_send_string>
	// year
	// -------------- //
	Tyear = TempDateToUpdate.Year;
 8001560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001564:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	itoa(Tyear, tempYear);
 8001568:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 800156c:	f107 0218 	add.w	r2, r7, #24
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fea8 	bl	80012c8 <itoa>
	lcd_send_cmd(0x80 | 0x12);
 8001578:	2092      	movs	r0, #146	@ 0x92
 800157a:	f7fe fde7 	bl	800014c <lcd_send_cmd>
	lcd_send_string(tempYear);
 800157e:	f107 0318 	add.w	r3, r7, #24
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe fe93 	bl	80002ae <lcd_send_string>
}
 8001588:	bf00      	nop
 800158a:	3758      	adds	r7, #88	@ 0x58
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000088 	.word	0x20000088
 8001594:	08004f48 	.word	0x08004f48
 8001598:	08004f4c 	.word	0x08004f4c
 800159c:	08004f50 	.word	0x08004f50

080015a0 <handleLCDMonitor>:
		handle_event(ENTER_BUTTON_PRESSED_EVENT);
	}
}

/***********************************************/
void handleLCDMonitor() {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
/***********************************************/
	if(lastState != currentState) {
 80015a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001658 <handleLCDMonitor+0xb8>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <handleLCDMonitor+0xbc>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <handleLCDMonitor+0x14>
		lcd_clear();
 80015b0:	f7fe fe2c 	bl	800020c <lcd_clear>
	}
	lastState = currentState;
 80015b4:	4b29      	ldr	r3, [pc, #164]	@ (800165c <handleLCDMonitor+0xbc>)
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <handleLCDMonitor+0xb8>)
 80015ba:	701a      	strb	r2, [r3, #0]

	showDateAndTime();
 80015bc:	f7ff fede 	bl	800137c <showDateAndTime>
	switch(currentState) {
 80015c0:	4b26      	ldr	r3, [pc, #152]	@ (800165c <handleLCDMonitor+0xbc>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	d844      	bhi.n	8001652 <handleLCDMonitor+0xb2>
 80015c8:	a201      	add	r2, pc, #4	@ (adr r2, 80015d0 <handleLCDMonitor+0x30>)
 80015ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ce:	bf00      	nop
 80015d0:	08001605 	.word	0x08001605
 80015d4:	0800160b 	.word	0x0800160b
 80015d8:	08001611 	.word	0x08001611
 80015dc:	08001617 	.word	0x08001617
 80015e0:	0800161d 	.word	0x0800161d
 80015e4:	08001623 	.word	0x08001623
 80015e8:	08001629 	.word	0x08001629
 80015ec:	0800162f 	.word	0x0800162f
 80015f0:	08001635 	.word	0x08001635
 80015f4:	08001647 	.word	0x08001647
 80015f8:	08001641 	.word	0x08001641
 80015fc:	0800163b 	.word	0x0800163b
 8001600:	0800164d 	.word	0x0800164d

		case IDLE_STATE:
			handleIdleLCDMonitor();
 8001604:	f000 f82c 	bl	8001660 <handleIdleLCDMonitor>
			break;
 8001608:	e024      	b.n	8001654 <handleLCDMonitor+0xb4>

		case FEED_STATE:
			handleFeedLCDMonitor();
 800160a:	f000 f8bb 	bl	8001784 <handleFeedLCDMonitor>
			break;
 800160e:	e021      	b.n	8001654 <handleLCDMonitor+0xb4>

		case MAIN_MANU_STATE:
			handleMainManuLCDMonitor();
 8001610:	f000 f8d4 	bl	80017bc <handleMainManuLCDMonitor>
			break;
 8001614:	e01e      	b.n	8001654 <handleLCDMonitor+0xb4>

		case SET_HOUR_FEED_STATE:
			handleFeedHourLCDMonitor();
 8001616:	f000 f8ed 	bl	80017f4 <handleFeedHourLCDMonitor>
			break;
 800161a:	e01b      	b.n	8001654 <handleLCDMonitor+0xb4>

		case SET_MINUTE_FEED_STATE:
			handleFeedMinuteLCDMonitor();
 800161c:	f000 f900 	bl	8001820 <handleFeedMinuteLCDMonitor>
			break;
 8001620:	e018      	b.n	8001654 <handleLCDMonitor+0xb4>

		case SET_SECOND_FEED_STATE:
			handleFeedSecondLCDMonitor();
 8001622:	f000 f913 	bl	800184c <handleFeedSecondLCDMonitor>
			break;
 8001626:	e015      	b.n	8001654 <handleLCDMonitor+0xb4>

		case SET_HOUR_TIME_STATE:
			handleTimeHourLCDMonitor();
 8001628:	f000 f926 	bl	8001878 <handleTimeHourLCDMonitor>
			break;
 800162c:	e012      	b.n	8001654 <handleLCDMonitor+0xb4>

		case SET_MINUTE_TIME_STATE:
			handleTimeMinuteLCDMonitor();
 800162e:	f000 f939 	bl	80018a4 <handleTimeMinuteLCDMonitor>
			break;
 8001632:	e00f      	b.n	8001654 <handleLCDMonitor+0xb4>

		case SET_SECOND_TIME_STATE:
			handleTimeSecondLCDMonitor();
 8001634:	f000 f94c 	bl	80018d0 <handleTimeSecondLCDMonitor>
			break;
 8001638:	e00c      	b.n	8001654 <handleLCDMonitor+0xb4>

		case SET_DAY_STATE:
			handleDayLCDMonitor();
 800163a:	f000 f9f3 	bl	8001a24 <handleDayLCDMonitor>
			break;
 800163e:	e009      	b.n	8001654 <handleLCDMonitor+0xb4>

		case SET_MONTH_STATE:
			handleMonthLCDMonitor();
 8001640:	f000 f9da 	bl	80019f8 <handleMonthLCDMonitor>
			break;
 8001644:	e006      	b.n	8001654 <handleLCDMonitor+0xb4>

		case SET_YEAR_STATE:
			handleYearLCDMonitor();
 8001646:	f000 f9c1 	bl	80019cc <handleYearLCDMonitor>
			break;
 800164a:	e003      	b.n	8001654 <handleLCDMonitor+0xb4>

		case SET_FEED_PERIOD_STATE:
			handleFeedPeriodLCDMonitor();
 800164c:	f000 f956 	bl	80018fc <handleFeedPeriodLCDMonitor>
			break;
 8001650:	e000      	b.n	8001654 <handleLCDMonitor+0xb4>

		default:

			break;
 8001652:	bf00      	nop
	}
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2000017d 	.word	0x2000017d
 800165c:	2000017c 	.word	0x2000017c

08001660 <handleIdleLCDMonitor>:

/***********************************************/
void handleIdleLCDMonitor()
/***********************************************/
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	static char temp[20] = "\0";
	lcd_send_cmd(0x80|0x41);
 8001664:	20c1      	movs	r0, #193	@ 0xc1
 8001666:	f7fe fd71 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Milka & Tinkerbell");
 800166a:	483d      	ldr	r0, [pc, #244]	@ (8001760 <handleIdleLCDMonitor+0x100>)
 800166c:	f7fe fe1f 	bl	80002ae <lcd_send_string>
	lcd_send_cmd(0x80|0x1B);
 8001670:	209b      	movs	r0, #155	@ 0x9b
 8001672:	f7fe fd6b 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Feeder");
 8001676:	483b      	ldr	r0, [pc, #236]	@ (8001764 <handleIdleLCDMonitor+0x104>)
 8001678:	f7fe fe19 	bl	80002ae <lcd_send_string>

	lcd_send_cmd(0x80|0x54);
 800167c:	20d4      	movs	r0, #212	@ 0xd4
 800167e:	f7fe fd65 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Next Feed:");
 8001682:	4839      	ldr	r0, [pc, #228]	@ (8001768 <handleIdleLCDMonitor+0x108>)
 8001684:	f7fe fe13 	bl	80002ae <lcd_send_string>

	itoa(selectedFeedHour, temp);
 8001688:	4b38      	ldr	r3, [pc, #224]	@ (800176c <handleIdleLCDMonitor+0x10c>)
 800168a:	f993 3000 	ldrsb.w	r3, [r3]
 800168e:	4938      	ldr	r1, [pc, #224]	@ (8001770 <handleIdleLCDMonitor+0x110>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe19 	bl	80012c8 <itoa>
	if(selectedFeedHour<10){
 8001696:	4b35      	ldr	r3, [pc, #212]	@ (800176c <handleIdleLCDMonitor+0x10c>)
 8001698:	f993 3000 	ldrsb.w	r3, [r3]
 800169c:	2b09      	cmp	r3, #9
 800169e:	dc0c      	bgt.n	80016ba <handleIdleLCDMonitor+0x5a>
		lcd_send_cmd(0x80|0x5F);
 80016a0:	20df      	movs	r0, #223	@ 0xdf
 80016a2:	f7fe fd53 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 80016a6:	4833      	ldr	r0, [pc, #204]	@ (8001774 <handleIdleLCDMonitor+0x114>)
 80016a8:	f7fe fe01 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80|0x60);
 80016ac:	20e0      	movs	r0, #224	@ 0xe0
 80016ae:	f7fe fd4d 	bl	800014c <lcd_send_cmd>
		lcd_send_string(temp);
 80016b2:	482f      	ldr	r0, [pc, #188]	@ (8001770 <handleIdleLCDMonitor+0x110>)
 80016b4:	f7fe fdfb 	bl	80002ae <lcd_send_string>
 80016b8:	e005      	b.n	80016c6 <handleIdleLCDMonitor+0x66>
	}
	else{
		lcd_send_cmd(0x80|0x5F);
 80016ba:	20df      	movs	r0, #223	@ 0xdf
 80016bc:	f7fe fd46 	bl	800014c <lcd_send_cmd>
		lcd_send_string(temp);
 80016c0:	482b      	ldr	r0, [pc, #172]	@ (8001770 <handleIdleLCDMonitor+0x110>)
 80016c2:	f7fe fdf4 	bl	80002ae <lcd_send_string>
	}
	lcd_send_cmd(0x80|0x61);
 80016c6:	20e1      	movs	r0, #225	@ 0xe1
 80016c8:	f7fe fd40 	bl	800014c <lcd_send_cmd>
	lcd_send_string(":");
 80016cc:	482a      	ldr	r0, [pc, #168]	@ (8001778 <handleIdleLCDMonitor+0x118>)
 80016ce:	f7fe fdee 	bl	80002ae <lcd_send_string>

	itoa(selectedFeedMinute, temp);
 80016d2:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <handleIdleLCDMonitor+0x11c>)
 80016d4:	f993 3000 	ldrsb.w	r3, [r3]
 80016d8:	4925      	ldr	r1, [pc, #148]	@ (8001770 <handleIdleLCDMonitor+0x110>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fdf4 	bl	80012c8 <itoa>
	if(selectedFeedMinute<10){
 80016e0:	4b26      	ldr	r3, [pc, #152]	@ (800177c <handleIdleLCDMonitor+0x11c>)
 80016e2:	f993 3000 	ldrsb.w	r3, [r3]
 80016e6:	2b09      	cmp	r3, #9
 80016e8:	dc0c      	bgt.n	8001704 <handleIdleLCDMonitor+0xa4>
		lcd_send_cmd(0x80|0x62);
 80016ea:	20e2      	movs	r0, #226	@ 0xe2
 80016ec:	f7fe fd2e 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 80016f0:	4820      	ldr	r0, [pc, #128]	@ (8001774 <handleIdleLCDMonitor+0x114>)
 80016f2:	f7fe fddc 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80|0x63);
 80016f6:	20e3      	movs	r0, #227	@ 0xe3
 80016f8:	f7fe fd28 	bl	800014c <lcd_send_cmd>
		lcd_send_string(temp);
 80016fc:	481c      	ldr	r0, [pc, #112]	@ (8001770 <handleIdleLCDMonitor+0x110>)
 80016fe:	f7fe fdd6 	bl	80002ae <lcd_send_string>
 8001702:	e005      	b.n	8001710 <handleIdleLCDMonitor+0xb0>
	}
	else{
		lcd_send_cmd(0x80|0x62);
 8001704:	20e2      	movs	r0, #226	@ 0xe2
 8001706:	f7fe fd21 	bl	800014c <lcd_send_cmd>
		lcd_send_string(temp);
 800170a:	4819      	ldr	r0, [pc, #100]	@ (8001770 <handleIdleLCDMonitor+0x110>)
 800170c:	f7fe fdcf 	bl	80002ae <lcd_send_string>
	}
	lcd_send_cmd(0x80|0x64);
 8001710:	20e4      	movs	r0, #228	@ 0xe4
 8001712:	f7fe fd1b 	bl	800014c <lcd_send_cmd>
	lcd_send_string(":");
 8001716:	4818      	ldr	r0, [pc, #96]	@ (8001778 <handleIdleLCDMonitor+0x118>)
 8001718:	f7fe fdc9 	bl	80002ae <lcd_send_string>

	itoa(selectedFeedSecond, temp);
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <handleIdleLCDMonitor+0x120>)
 800171e:	f993 3000 	ldrsb.w	r3, [r3]
 8001722:	4913      	ldr	r1, [pc, #76]	@ (8001770 <handleIdleLCDMonitor+0x110>)
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fdcf 	bl	80012c8 <itoa>
	if(selectedFeedSecond<10){
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <handleIdleLCDMonitor+0x120>)
 800172c:	f993 3000 	ldrsb.w	r3, [r3]
 8001730:	2b09      	cmp	r3, #9
 8001732:	dc0c      	bgt.n	800174e <handleIdleLCDMonitor+0xee>
		lcd_send_cmd(0x80|0x65);
 8001734:	20e5      	movs	r0, #229	@ 0xe5
 8001736:	f7fe fd09 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 800173a:	480e      	ldr	r0, [pc, #56]	@ (8001774 <handleIdleLCDMonitor+0x114>)
 800173c:	f7fe fdb7 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80|0x66);
 8001740:	20e6      	movs	r0, #230	@ 0xe6
 8001742:	f7fe fd03 	bl	800014c <lcd_send_cmd>
		lcd_send_string(temp);
 8001746:	480a      	ldr	r0, [pc, #40]	@ (8001770 <handleIdleLCDMonitor+0x110>)
 8001748:	f7fe fdb1 	bl	80002ae <lcd_send_string>
	}
	else{
		lcd_send_cmd(0x80|0x65);
		lcd_send_string(temp);
	}
}
 800174c:	e005      	b.n	800175a <handleIdleLCDMonitor+0xfa>
		lcd_send_cmd(0x80|0x65);
 800174e:	20e5      	movs	r0, #229	@ 0xe5
 8001750:	f7fe fcfc 	bl	800014c <lcd_send_cmd>
		lcd_send_string(temp);
 8001754:	4806      	ldr	r0, [pc, #24]	@ (8001770 <handleIdleLCDMonitor+0x110>)
 8001756:	f7fe fdaa 	bl	80002ae <lcd_send_string>
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	08004f54 	.word	0x08004f54
 8001764:	08004f68 	.word	0x08004f68
 8001768:	08004f70 	.word	0x08004f70
 800176c:	20000006 	.word	0x20000006
 8001770:	20000188 	.word	0x20000188
 8001774:	08004f48 	.word	0x08004f48
 8001778:	08004f4c 	.word	0x08004f4c
 800177c:	20000007 	.word	0x20000007
 8001780:	20000008 	.word	0x20000008

08001784 <handleFeedLCDMonitor>:

/***********************************************/
void handleFeedLCDMonitor()
/***********************************************/
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x40);
 8001788:	20c0      	movs	r0, #192	@ 0xc0
 800178a:	f7fe fcdf 	bl	800014c <lcd_send_cmd>
	lcd_send_string("*   Feeding Now    *");
 800178e:	4808      	ldr	r0, [pc, #32]	@ (80017b0 <handleFeedLCDMonitor+0x2c>)
 8001790:	f7fe fd8d 	bl	80002ae <lcd_send_string>
	lcd_send_cmd(0x80 | 0x14);
 8001794:	2094      	movs	r0, #148	@ 0x94
 8001796:	f7fe fcd9 	bl	800014c <lcd_send_cmd>
	lcd_send_string("*    (=^'.'^=)     *");
 800179a:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <handleFeedLCDMonitor+0x30>)
 800179c:	f7fe fd87 	bl	80002ae <lcd_send_string>
	lcd_send_cmd(0x80 | 0x54);
 80017a0:	20d4      	movs	r0, #212	@ 0xd4
 80017a2:	f7fe fcd3 	bl	800014c <lcd_send_cmd>
	lcd_send_string("********************");
 80017a6:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <handleFeedLCDMonitor+0x34>)
 80017a8:	f7fe fd81 	bl	80002ae <lcd_send_string>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	08004f7c 	.word	0x08004f7c
 80017b4:	08004f94 	.word	0x08004f94
 80017b8:	08004fac 	.word	0x08004fac

080017bc <handleMainManuLCDMonitor>:

/***********************************************/
void handleMainManuLCDMonitor()
/***********************************************/
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 80017c0:	20c0      	movs	r0, #192	@ 0xc0
 80017c2:	f7fe fcc3 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Down - Set Time");
 80017c6:	4808      	ldr	r0, [pc, #32]	@ (80017e8 <handleMainManuLCDMonitor+0x2c>)
 80017c8:	f7fe fd71 	bl	80002ae <lcd_send_string>
	lcd_send_cmd(0x80|0x14);
 80017cc:	2094      	movs	r0, #148	@ 0x94
 80017ce:	f7fe fcbd 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Up   - Set Feed Time");
 80017d2:	4806      	ldr	r0, [pc, #24]	@ (80017ec <handleMainManuLCDMonitor+0x30>)
 80017d4:	f7fe fd6b 	bl	80002ae <lcd_send_string>
	lcd_send_cmd(0x80|0x54);
 80017d8:	20d4      	movs	r0, #212	@ 0xd4
 80017da:	f7fe fcb7 	bl	800014c <lcd_send_cmd>
	lcd_send_string("ENT  - Feed Duration");
 80017de:	4804      	ldr	r0, [pc, #16]	@ (80017f0 <handleMainManuLCDMonitor+0x34>)
 80017e0:	f7fe fd65 	bl	80002ae <lcd_send_string>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	08004fc4 	.word	0x08004fc4
 80017ec:	08004fd4 	.word	0x08004fd4
 80017f0:	08004fec 	.word	0x08004fec

080017f4 <handleFeedHourLCDMonitor>:

/***********************************************/
void handleFeedHourLCDMonitor()
/***********************************************/
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 80017f8:	20c0      	movs	r0, #192	@ 0xc0
 80017fa:	f7fe fca7 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Choose Feed Hour");
 80017fe:	4806      	ldr	r0, [pc, #24]	@ (8001818 <handleFeedHourLCDMonitor+0x24>)
 8001800:	f7fe fd55 	bl	80002ae <lcd_send_string>

	showSelectedFeedTime();
 8001804:	f000 f9aa 	bl	8001b5c <showSelectedFeedTime>

	lcd_send_cmd(0x80|0x54);
 8001808:	20d4      	movs	r0, #212	@ 0xd4
 800180a:	f7fe fc9f 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 800180e:	4803      	ldr	r0, [pc, #12]	@ (800181c <handleFeedHourLCDMonitor+0x28>)
 8001810:	f7fe fd4d 	bl	80002ae <lcd_send_string>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	08005004 	.word	0x08005004
 800181c:	08005018 	.word	0x08005018

08001820 <handleFeedMinuteLCDMonitor>:

/***********************************************/
void handleFeedMinuteLCDMonitor()
/***********************************************/
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001824:	20c0      	movs	r0, #192	@ 0xc0
 8001826:	f7fe fc91 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Choose Feed Minute");
 800182a:	4806      	ldr	r0, [pc, #24]	@ (8001844 <handleFeedMinuteLCDMonitor+0x24>)
 800182c:	f7fe fd3f 	bl	80002ae <lcd_send_string>

	showSelectedFeedTime();
 8001830:	f000 f994 	bl	8001b5c <showSelectedFeedTime>

	lcd_send_cmd(0x80|0x54);
 8001834:	20d4      	movs	r0, #212	@ 0xd4
 8001836:	f7fe fc89 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 800183a:	4803      	ldr	r0, [pc, #12]	@ (8001848 <handleFeedMinuteLCDMonitor+0x28>)
 800183c:	f7fe fd37 	bl	80002ae <lcd_send_string>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	0800502c 	.word	0x0800502c
 8001848:	08005018 	.word	0x08005018

0800184c <handleFeedSecondLCDMonitor>:

/***********************************************/
void handleFeedSecondLCDMonitor()
/***********************************************/
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001850:	20c0      	movs	r0, #192	@ 0xc0
 8001852:	f7fe fc7b 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Choose Feed Second");
 8001856:	4806      	ldr	r0, [pc, #24]	@ (8001870 <handleFeedSecondLCDMonitor+0x24>)
 8001858:	f7fe fd29 	bl	80002ae <lcd_send_string>

	showSelectedFeedTime();
 800185c:	f000 f97e 	bl	8001b5c <showSelectedFeedTime>

	lcd_send_cmd(0x80|0x54);
 8001860:	20d4      	movs	r0, #212	@ 0xd4
 8001862:	f7fe fc73 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001866:	4803      	ldr	r0, [pc, #12]	@ (8001874 <handleFeedSecondLCDMonitor+0x28>)
 8001868:	f7fe fd21 	bl	80002ae <lcd_send_string>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	08005040 	.word	0x08005040
 8001874:	08005018 	.word	0x08005018

08001878 <handleTimeHourLCDMonitor>:

/***********************************************/
void handleTimeHourLCDMonitor()
/***********************************************/
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 800187c:	20c0      	movs	r0, #192	@ 0xc0
 800187e:	f7fe fc65 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Choose Hour");
 8001882:	4806      	ldr	r0, [pc, #24]	@ (800189c <handleTimeHourLCDMonitor+0x24>)
 8001884:	f7fe fd13 	bl	80002ae <lcd_send_string>

	showSelectedTime();
 8001888:	f000 f8e2 	bl	8001a50 <showSelectedTime>

	lcd_send_cmd(0x80|0x54);
 800188c:	20d4      	movs	r0, #212	@ 0xd4
 800188e:	f7fe fc5d 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001892:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <handleTimeHourLCDMonitor+0x28>)
 8001894:	f7fe fd0b 	bl	80002ae <lcd_send_string>
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	08005054 	.word	0x08005054
 80018a0:	08005018 	.word	0x08005018

080018a4 <handleTimeMinuteLCDMonitor>:

/***********************************************/
void handleTimeMinuteLCDMonitor()
/***********************************************/
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 80018a8:	20c0      	movs	r0, #192	@ 0xc0
 80018aa:	f7fe fc4f 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Choose Minute");
 80018ae:	4806      	ldr	r0, [pc, #24]	@ (80018c8 <handleTimeMinuteLCDMonitor+0x24>)
 80018b0:	f7fe fcfd 	bl	80002ae <lcd_send_string>

	showSelectedTime();
 80018b4:	f000 f8cc 	bl	8001a50 <showSelectedTime>

	lcd_send_cmd(0x80|0x54);
 80018b8:	20d4      	movs	r0, #212	@ 0xd4
 80018ba:	f7fe fc47 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 80018be:	4803      	ldr	r0, [pc, #12]	@ (80018cc <handleTimeMinuteLCDMonitor+0x28>)
 80018c0:	f7fe fcf5 	bl	80002ae <lcd_send_string>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	08005060 	.word	0x08005060
 80018cc:	08005018 	.word	0x08005018

080018d0 <handleTimeSecondLCDMonitor>:

/***********************************************/
void handleTimeSecondLCDMonitor()
/***********************************************/
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 80018d4:	20c0      	movs	r0, #192	@ 0xc0
 80018d6:	f7fe fc39 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Choose Second");
 80018da:	4806      	ldr	r0, [pc, #24]	@ (80018f4 <handleTimeSecondLCDMonitor+0x24>)
 80018dc:	f7fe fce7 	bl	80002ae <lcd_send_string>

	showSelectedTime();
 80018e0:	f000 f8b6 	bl	8001a50 <showSelectedTime>

	lcd_send_cmd(0x80|0x54);
 80018e4:	20d4      	movs	r0, #212	@ 0xd4
 80018e6:	f7fe fc31 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 80018ea:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <handleTimeSecondLCDMonitor+0x28>)
 80018ec:	f7fe fcdf 	bl	80002ae <lcd_send_string>
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	08005070 	.word	0x08005070
 80018f8:	08005018 	.word	0x08005018

080018fc <handleFeedPeriodLCDMonitor>:

/***********************************************/
void handleFeedPeriodLCDMonitor()
/***********************************************/
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
	char tempc [10];

	lcd_send_cmd(0x80|0x40);
 8001902:	20c0      	movs	r0, #192	@ 0xc0
 8001904:	f7fe fc22 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Choose Feed Duration");
 8001908:	4829      	ldr	r0, [pc, #164]	@ (80019b0 <handleFeedPeriodLCDMonitor+0xb4>)
 800190a:	f7fe fcd0 	bl	80002ae <lcd_send_string>

	itoa(feedDuration/1000, tempc);
 800190e:	4b29      	ldr	r3, [pc, #164]	@ (80019b4 <handleFeedPeriodLCDMonitor+0xb8>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	4a28      	ldr	r2, [pc, #160]	@ (80019b8 <handleFeedPeriodLCDMonitor+0xbc>)
 8001916:	fb82 1203 	smull	r1, r2, r2, r3
 800191a:	1192      	asrs	r2, r2, #6
 800191c:	17db      	asrs	r3, r3, #31
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	b21b      	sxth	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	4619      	mov	r1, r3
 8001928:	4610      	mov	r0, r2
 800192a:	f7ff fccd 	bl	80012c8 <itoa>

	lcd_send_cmd(0x80|0x19);
 800192e:	2099      	movs	r0, #153	@ 0x99
 8001930:	f7fe fc0c 	bl	800014c <lcd_send_cmd>
	lcd_send_string(tempc);
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fcb9 	bl	80002ae <lcd_send_string>

	lcd_send_cmd(0x80|0x1A);
 800193c:	209a      	movs	r0, #154	@ 0x9a
 800193e:	f7fe fc05 	bl	800014c <lcd_send_cmd>
	lcd_send_string(".");
 8001942:	481e      	ldr	r0, [pc, #120]	@ (80019bc <handleFeedPeriodLCDMonitor+0xc0>)
 8001944:	f7fe fcb3 	bl	80002ae <lcd_send_string>

	itoa((feedDuration%1000) / 100, tempc);
 8001948:	4b1a      	ldr	r3, [pc, #104]	@ (80019b4 <handleFeedPeriodLCDMonitor+0xb8>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	4a1a      	ldr	r2, [pc, #104]	@ (80019b8 <handleFeedPeriodLCDMonitor+0xbc>)
 8001950:	fb82 1203 	smull	r1, r2, r2, r3
 8001954:	1191      	asrs	r1, r2, #6
 8001956:	17da      	asrs	r2, r3, #31
 8001958:	1a8a      	subs	r2, r1, r2
 800195a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800195e:	fb01 f202 	mul.w	r2, r1, r2
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	b21b      	sxth	r3, r3
 8001966:	4a16      	ldr	r2, [pc, #88]	@ (80019c0 <handleFeedPeriodLCDMonitor+0xc4>)
 8001968:	fb82 1203 	smull	r1, r2, r2, r3
 800196c:	1152      	asrs	r2, r2, #5
 800196e:	17db      	asrs	r3, r3, #31
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	b21b      	sxth	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	4619      	mov	r1, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f7ff fca4 	bl	80012c8 <itoa>

	lcd_send_cmd(0x80|0x1B);
 8001980:	209b      	movs	r0, #155	@ 0x9b
 8001982:	f7fe fbe3 	bl	800014c <lcd_send_cmd>
	lcd_send_string(tempc);
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fc90 	bl	80002ae <lcd_send_string>

	lcd_send_cmd(0x80|0x1D);
 800198e:	209d      	movs	r0, #157	@ 0x9d
 8001990:	f7fe fbdc 	bl	800014c <lcd_send_cmd>
	lcd_send_string("[ms]");
 8001994:	480b      	ldr	r0, [pc, #44]	@ (80019c4 <handleFeedPeriodLCDMonitor+0xc8>)
 8001996:	f7fe fc8a 	bl	80002ae <lcd_send_string>

	lcd_send_cmd(0x80|0x54);
 800199a:	20d4      	movs	r0, #212	@ 0xd4
 800199c:	f7fe fbd6 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 80019a0:	4809      	ldr	r0, [pc, #36]	@ (80019c8 <handleFeedPeriodLCDMonitor+0xcc>)
 80019a2:	f7fe fc84 	bl	80002ae <lcd_send_string>
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	08005080 	.word	0x08005080
 80019b4:	2000000a 	.word	0x2000000a
 80019b8:	10624dd3 	.word	0x10624dd3
 80019bc:	08005098 	.word	0x08005098
 80019c0:	51eb851f 	.word	0x51eb851f
 80019c4:	0800509c 	.word	0x0800509c
 80019c8:	08005018 	.word	0x08005018

080019cc <handleYearLCDMonitor>:

/***********************************************/
void handleYearLCDMonitor()
/***********************************************/
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 80019d0:	20c0      	movs	r0, #192	@ 0xc0
 80019d2:	f7fe fbbb 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Choose Year");
 80019d6:	4806      	ldr	r0, [pc, #24]	@ (80019f0 <handleYearLCDMonitor+0x24>)
 80019d8:	f7fe fc69 	bl	80002ae <lcd_send_string>

	showSelectedDate();
 80019dc:	f000 f944 	bl	8001c68 <showSelectedDate>

	lcd_send_cmd(0x80|0x54);
 80019e0:	20d4      	movs	r0, #212	@ 0xd4
 80019e2:	f7fe fbb3 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 80019e6:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <handleYearLCDMonitor+0x28>)
 80019e8:	f7fe fc61 	bl	80002ae <lcd_send_string>
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	080050a4 	.word	0x080050a4
 80019f4:	08005018 	.word	0x08005018

080019f8 <handleMonthLCDMonitor>:

/***********************************************/
void handleMonthLCDMonitor()
/***********************************************/
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 80019fc:	20c0      	movs	r0, #192	@ 0xc0
 80019fe:	f7fe fba5 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Choose Month");
 8001a02:	4806      	ldr	r0, [pc, #24]	@ (8001a1c <handleMonthLCDMonitor+0x24>)
 8001a04:	f7fe fc53 	bl	80002ae <lcd_send_string>

	showSelectedDate();
 8001a08:	f000 f92e 	bl	8001c68 <showSelectedDate>

	lcd_send_cmd(0x80|0x54);
 8001a0c:	20d4      	movs	r0, #212	@ 0xd4
 8001a0e:	f7fe fb9d 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <handleMonthLCDMonitor+0x28>)
 8001a14:	f7fe fc4b 	bl	80002ae <lcd_send_string>
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	080050b0 	.word	0x080050b0
 8001a20:	08005018 	.word	0x08005018

08001a24 <handleDayLCDMonitor>:

/***********************************************/
void handleDayLCDMonitor()
/***********************************************/
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x40);
 8001a28:	20c0      	movs	r0, #192	@ 0xc0
 8001a2a:	f7fe fb8f 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Choose Day");
 8001a2e:	4806      	ldr	r0, [pc, #24]	@ (8001a48 <handleDayLCDMonitor+0x24>)
 8001a30:	f7fe fc3d 	bl	80002ae <lcd_send_string>

	showSelectedDate();
 8001a34:	f000 f918 	bl	8001c68 <showSelectedDate>

	lcd_send_cmd(0x80|0x54);
 8001a38:	20d4      	movs	r0, #212	@ 0xd4
 8001a3a:	f7fe fb87 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Use Up/Down Buttons");
 8001a3e:	4803      	ldr	r0, [pc, #12]	@ (8001a4c <handleDayLCDMonitor+0x28>)
 8001a40:	f7fe fc35 	bl	80002ae <lcd_send_string>
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	080050c0 	.word	0x080050c0
 8001a4c:	08005018 	.word	0x08005018

08001a50 <showSelectedTime>:

/***********************************************/
void showSelectedTime() {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
/***********************************************/
	char tempc [10];
	itoa(selectedHour, tempc);
 8001a56:	4b3c      	ldr	r3, [pc, #240]	@ (8001b48 <showSelectedTime+0xf8>)
 8001a58:	f993 3000 	ldrsb.w	r3, [r3]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	f7ff fc30 	bl	80012c8 <itoa>

	if(selectedHour < 10) {
 8001a68:	4b37      	ldr	r3, [pc, #220]	@ (8001b48 <showSelectedTime+0xf8>)
 8001a6a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a6e:	2b09      	cmp	r3, #9
 8001a70:	dc0d      	bgt.n	8001a8e <showSelectedTime+0x3e>
		lcd_send_cmd(0x80|0x1A);
 8001a72:	209a      	movs	r0, #154	@ 0x9a
 8001a74:	f7fe fb6a 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 8001a78:	4834      	ldr	r0, [pc, #208]	@ (8001b4c <showSelectedTime+0xfc>)
 8001a7a:	f7fe fc18 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80|0x1B);
 8001a7e:	209b      	movs	r0, #155	@ 0x9b
 8001a80:	f7fe fb64 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fc11 	bl	80002ae <lcd_send_string>
 8001a8c:	e006      	b.n	8001a9c <showSelectedTime+0x4c>
	}
	else {
		lcd_send_cmd(0x80|0x1A);
 8001a8e:	209a      	movs	r0, #154	@ 0x9a
 8001a90:	f7fe fb5c 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fc09 	bl	80002ae <lcd_send_string>
	}

	lcd_send_cmd(0x80|0x1C);
 8001a9c:	209c      	movs	r0, #156	@ 0x9c
 8001a9e:	f7fe fb55 	bl	800014c <lcd_send_cmd>
	lcd_send_string(":");
 8001aa2:	482b      	ldr	r0, [pc, #172]	@ (8001b50 <showSelectedTime+0x100>)
 8001aa4:	f7fe fc03 	bl	80002ae <lcd_send_string>

	itoa(selectedMinute, tempc);
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <showSelectedTime+0x104>)
 8001aaa:	f993 3000 	ldrsb.w	r3, [r3]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	f7ff fc07 	bl	80012c8 <itoa>
	if(selectedMinute < 10) {
 8001aba:	4b26      	ldr	r3, [pc, #152]	@ (8001b54 <showSelectedTime+0x104>)
 8001abc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac0:	2b09      	cmp	r3, #9
 8001ac2:	dc0d      	bgt.n	8001ae0 <showSelectedTime+0x90>
		lcd_send_cmd(0x80|0x1D);
 8001ac4:	209d      	movs	r0, #157	@ 0x9d
 8001ac6:	f7fe fb41 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 8001aca:	4820      	ldr	r0, [pc, #128]	@ (8001b4c <showSelectedTime+0xfc>)
 8001acc:	f7fe fbef 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80|0x1E);
 8001ad0:	209e      	movs	r0, #158	@ 0x9e
 8001ad2:	f7fe fb3b 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fbe8 	bl	80002ae <lcd_send_string>
 8001ade:	e006      	b.n	8001aee <showSelectedTime+0x9e>
	}
	else {
		lcd_send_cmd(0x80|0x1D);
 8001ae0:	209d      	movs	r0, #157	@ 0x9d
 8001ae2:	f7fe fb33 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fbe0 	bl	80002ae <lcd_send_string>
	}

	lcd_send_cmd(0x80|0x1F);
 8001aee:	209f      	movs	r0, #159	@ 0x9f
 8001af0:	f7fe fb2c 	bl	800014c <lcd_send_cmd>
	lcd_send_string(":");
 8001af4:	4816      	ldr	r0, [pc, #88]	@ (8001b50 <showSelectedTime+0x100>)
 8001af6:	f7fe fbda 	bl	80002ae <lcd_send_string>

	itoa(selectedSecond, tempc);
 8001afa:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <showSelectedTime+0x108>)
 8001afc:	f993 3000 	ldrsb.w	r3, [r3]
 8001b00:	461a      	mov	r2, r3
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f7ff fbde 	bl	80012c8 <itoa>
	if(selectedSecond < 10) {
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <showSelectedTime+0x108>)
 8001b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b12:	2b09      	cmp	r3, #9
 8001b14:	dc0d      	bgt.n	8001b32 <showSelectedTime+0xe2>
		lcd_send_cmd(0x80|0x20);
 8001b16:	20a0      	movs	r0, #160	@ 0xa0
 8001b18:	f7fe fb18 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 8001b1c:	480b      	ldr	r0, [pc, #44]	@ (8001b4c <showSelectedTime+0xfc>)
 8001b1e:	f7fe fbc6 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80|0x21);
 8001b22:	20a1      	movs	r0, #161	@ 0xa1
 8001b24:	f7fe fb12 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fbbf 	bl	80002ae <lcd_send_string>
	}
	else {
		lcd_send_cmd(0x80|0x20);
		lcd_send_string(tempc);
	}
}
 8001b30:	e006      	b.n	8001b40 <showSelectedTime+0xf0>
		lcd_send_cmd(0x80|0x20);
 8001b32:	20a0      	movs	r0, #160	@ 0xa0
 8001b34:	f7fe fb0a 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fbb7 	bl	80002ae <lcd_send_string>
}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	08004f48 	.word	0x08004f48
 8001b50:	08004f4c 	.word	0x08004f4c
 8001b54:	20000001 	.word	0x20000001
 8001b58:	20000002 	.word	0x20000002

08001b5c <showSelectedFeedTime>:

/***********************************************/
void showSelectedFeedTime() {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
/***********************************************/
	char tempc [10];
	itoa(selectedFeedHour, tempc);
 8001b62:	4b3c      	ldr	r3, [pc, #240]	@ (8001c54 <showSelectedFeedTime+0xf8>)
 8001b64:	f993 3000 	ldrsb.w	r3, [r3]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f7ff fbaa 	bl	80012c8 <itoa>

	if(selectedFeedHour < 10) {
 8001b74:	4b37      	ldr	r3, [pc, #220]	@ (8001c54 <showSelectedFeedTime+0xf8>)
 8001b76:	f993 3000 	ldrsb.w	r3, [r3]
 8001b7a:	2b09      	cmp	r3, #9
 8001b7c:	dc0d      	bgt.n	8001b9a <showSelectedFeedTime+0x3e>
		lcd_send_cmd(0x80|0x1A);
 8001b7e:	209a      	movs	r0, #154	@ 0x9a
 8001b80:	f7fe fae4 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 8001b84:	4834      	ldr	r0, [pc, #208]	@ (8001c58 <showSelectedFeedTime+0xfc>)
 8001b86:	f7fe fb92 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80|0x1B);
 8001b8a:	209b      	movs	r0, #155	@ 0x9b
 8001b8c:	f7fe fade 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fb8b 	bl	80002ae <lcd_send_string>
 8001b98:	e006      	b.n	8001ba8 <showSelectedFeedTime+0x4c>
	}
	else {
		lcd_send_cmd(0x80|0x1A);
 8001b9a:	209a      	movs	r0, #154	@ 0x9a
 8001b9c:	f7fe fad6 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fb83 	bl	80002ae <lcd_send_string>
	}

	lcd_send_cmd(0x80|0x1C);
 8001ba8:	209c      	movs	r0, #156	@ 0x9c
 8001baa:	f7fe facf 	bl	800014c <lcd_send_cmd>
	lcd_send_string(":");
 8001bae:	482b      	ldr	r0, [pc, #172]	@ (8001c5c <showSelectedFeedTime+0x100>)
 8001bb0:	f7fe fb7d 	bl	80002ae <lcd_send_string>

	itoa(selectedFeedMinute, tempc);
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <showSelectedFeedTime+0x104>)
 8001bb6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	f7ff fb81 	bl	80012c8 <itoa>
	if(selectedFeedMinute < 10) {
 8001bc6:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <showSelectedFeedTime+0x104>)
 8001bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bcc:	2b09      	cmp	r3, #9
 8001bce:	dc0d      	bgt.n	8001bec <showSelectedFeedTime+0x90>
		lcd_send_cmd(0x80|0x1D);
 8001bd0:	209d      	movs	r0, #157	@ 0x9d
 8001bd2:	f7fe fabb 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 8001bd6:	4820      	ldr	r0, [pc, #128]	@ (8001c58 <showSelectedFeedTime+0xfc>)
 8001bd8:	f7fe fb69 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80|0x1E);
 8001bdc:	209e      	movs	r0, #158	@ 0x9e
 8001bde:	f7fe fab5 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fb62 	bl	80002ae <lcd_send_string>
 8001bea:	e006      	b.n	8001bfa <showSelectedFeedTime+0x9e>
	}
	else {
		lcd_send_cmd(0x80|0x1D);
 8001bec:	209d      	movs	r0, #157	@ 0x9d
 8001bee:	f7fe faad 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fb5a 	bl	80002ae <lcd_send_string>
	}

	lcd_send_cmd(0x80|0x1F);
 8001bfa:	209f      	movs	r0, #159	@ 0x9f
 8001bfc:	f7fe faa6 	bl	800014c <lcd_send_cmd>
	lcd_send_string(":");
 8001c00:	4816      	ldr	r0, [pc, #88]	@ (8001c5c <showSelectedFeedTime+0x100>)
 8001c02:	f7fe fb54 	bl	80002ae <lcd_send_string>

	itoa(selectedFeedSecond, tempc);
 8001c06:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <showSelectedFeedTime+0x108>)
 8001c08:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4610      	mov	r0, r2
 8001c14:	f7ff fb58 	bl	80012c8 <itoa>
	if(selectedFeedSecond < 10) {
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <showSelectedFeedTime+0x108>)
 8001c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c1e:	2b09      	cmp	r3, #9
 8001c20:	dc0d      	bgt.n	8001c3e <showSelectedFeedTime+0xe2>
		lcd_send_cmd(0x80|0x20);
 8001c22:	20a0      	movs	r0, #160	@ 0xa0
 8001c24:	f7fe fa92 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 8001c28:	480b      	ldr	r0, [pc, #44]	@ (8001c58 <showSelectedFeedTime+0xfc>)
 8001c2a:	f7fe fb40 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80|0x21);
 8001c2e:	20a1      	movs	r0, #161	@ 0xa1
 8001c30:	f7fe fa8c 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fb39 	bl	80002ae <lcd_send_string>
	}
	else {
		lcd_send_cmd(0x80|0x20);
		lcd_send_string(tempc);
	}
}
 8001c3c:	e006      	b.n	8001c4c <showSelectedFeedTime+0xf0>
		lcd_send_cmd(0x80|0x20);
 8001c3e:	20a0      	movs	r0, #160	@ 0xa0
 8001c40:	f7fe fa84 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fb31 	bl	80002ae <lcd_send_string>
}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000006 	.word	0x20000006
 8001c58:	08004f48 	.word	0x08004f48
 8001c5c:	08004f4c 	.word	0x08004f4c
 8001c60:	20000007 	.word	0x20000007
 8001c64:	20000008 	.word	0x20000008

08001c68 <showSelectedDate>:

/***********************************************/
void showSelectedDate() {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
/***********************************************/
	char tempc [10];
	itoa(selectedDay, tempc);
 8001c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d60 <showSelectedDate+0xf8>)
 8001c70:	f993 3000 	ldrsb.w	r3, [r3]
 8001c74:	461a      	mov	r2, r3
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f7ff fb24 	bl	80012c8 <itoa>

	if(selectedDay < 10) {
 8001c80:	4b37      	ldr	r3, [pc, #220]	@ (8001d60 <showSelectedDate+0xf8>)
 8001c82:	f993 3000 	ldrsb.w	r3, [r3]
 8001c86:	2b09      	cmp	r3, #9
 8001c88:	dc0d      	bgt.n	8001ca6 <showSelectedDate+0x3e>
		lcd_send_cmd(0x80|0x1A);
 8001c8a:	209a      	movs	r0, #154	@ 0x9a
 8001c8c:	f7fe fa5e 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 8001c90:	4834      	ldr	r0, [pc, #208]	@ (8001d64 <showSelectedDate+0xfc>)
 8001c92:	f7fe fb0c 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80|0x1B);
 8001c96:	209b      	movs	r0, #155	@ 0x9b
 8001c98:	f7fe fa58 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fb05 	bl	80002ae <lcd_send_string>
 8001ca4:	e006      	b.n	8001cb4 <showSelectedDate+0x4c>
	}
	else {
		lcd_send_cmd(0x80|0x1A);
 8001ca6:	209a      	movs	r0, #154	@ 0x9a
 8001ca8:	f7fe fa50 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fafd 	bl	80002ae <lcd_send_string>
	}

	lcd_send_cmd(0x80|0x1C);
 8001cb4:	209c      	movs	r0, #156	@ 0x9c
 8001cb6:	f7fe fa49 	bl	800014c <lcd_send_cmd>
	lcd_send_string("/");
 8001cba:	482b      	ldr	r0, [pc, #172]	@ (8001d68 <showSelectedDate+0x100>)
 8001cbc:	f7fe faf7 	bl	80002ae <lcd_send_string>

	itoa(selectedMonth, tempc);
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <showSelectedDate+0x104>)
 8001cc2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f7ff fafb 	bl	80012c8 <itoa>
	if(selectedMonth < 10) {
 8001cd2:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <showSelectedDate+0x104>)
 8001cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	dc0d      	bgt.n	8001cf8 <showSelectedDate+0x90>
		lcd_send_cmd(0x80|0x1D);
 8001cdc:	209d      	movs	r0, #157	@ 0x9d
 8001cde:	f7fe fa35 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 8001ce2:	4820      	ldr	r0, [pc, #128]	@ (8001d64 <showSelectedDate+0xfc>)
 8001ce4:	f7fe fae3 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80|0x1E);
 8001ce8:	209e      	movs	r0, #158	@ 0x9e
 8001cea:	f7fe fa2f 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fadc 	bl	80002ae <lcd_send_string>
 8001cf6:	e006      	b.n	8001d06 <showSelectedDate+0x9e>
	}
	else {
		lcd_send_cmd(0x80|0x1D);
 8001cf8:	209d      	movs	r0, #157	@ 0x9d
 8001cfa:	f7fe fa27 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fad4 	bl	80002ae <lcd_send_string>
	}

	lcd_send_cmd(0x80|0x1F);
 8001d06:	209f      	movs	r0, #159	@ 0x9f
 8001d08:	f7fe fa20 	bl	800014c <lcd_send_cmd>
	lcd_send_string("/");
 8001d0c:	4816      	ldr	r0, [pc, #88]	@ (8001d68 <showSelectedDate+0x100>)
 8001d0e:	f7fe face 	bl	80002ae <lcd_send_string>

	itoa(selectedYear, tempc);
 8001d12:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <showSelectedDate+0x108>)
 8001d14:	f993 3000 	ldrsb.w	r3, [r3]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f7ff fad2 	bl	80012c8 <itoa>
	if(selectedYear < 10) {
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <showSelectedDate+0x108>)
 8001d26:	f993 3000 	ldrsb.w	r3, [r3]
 8001d2a:	2b09      	cmp	r3, #9
 8001d2c:	dc0d      	bgt.n	8001d4a <showSelectedDate+0xe2>
		lcd_send_cmd(0x80|0x20);
 8001d2e:	20a0      	movs	r0, #160	@ 0xa0
 8001d30:	f7fe fa0c 	bl	800014c <lcd_send_cmd>
		lcd_send_string("0");
 8001d34:	480b      	ldr	r0, [pc, #44]	@ (8001d64 <showSelectedDate+0xfc>)
 8001d36:	f7fe faba 	bl	80002ae <lcd_send_string>
		lcd_send_cmd(0x80|0x21);
 8001d3a:	20a1      	movs	r0, #161	@ 0xa1
 8001d3c:	f7fe fa06 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fab3 	bl	80002ae <lcd_send_string>
	}
	else {
		lcd_send_cmd(0x80|0x20);
		lcd_send_string(tempc);
	}
}
 8001d48:	e006      	b.n	8001d58 <showSelectedDate+0xf0>
		lcd_send_cmd(0x80|0x20);
 8001d4a:	20a0      	movs	r0, #160	@ 0xa0
 8001d4c:	f7fe f9fe 	bl	800014c <lcd_send_cmd>
		lcd_send_string(tempc);
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe faab 	bl	80002ae <lcd_send_string>
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000005 	.word	0x20000005
 8001d64:	08004f48 	.word	0x08004f48
 8001d68:	08004f50 	.word	0x08004f50
 8001d6c:	20000004 	.word	0x20000004
 8001d70:	20000003 	.word	0x20000003

08001d74 <checkIfIsTimeToFeed>:

/***********************************************/
void checkIfIsTimeToFeed() {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
/***********************************************/
	RTC_TimeTypeDef TempsTime = { 0 };
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	460a      	mov	r2, r1
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	460a      	mov	r2, r1
 8001d84:	709a      	strb	r2, [r3, #2]

	HAL_RTC_GetTime(&hrtc, &TempsTime, RTC_FORMAT_BIN);
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4810      	ldr	r0, [pc, #64]	@ (8001dd0 <checkIfIsTimeToFeed+0x5c>)
 8001d8e:	f001 ff1b 	bl	8003bc8 <HAL_RTC_GetTime>
	if(TempsTime.Hours == selectedFeedHour && TempsTime.Minutes == selectedFeedMinute && TempsTime.Seconds == selectedFeedSecond) {
 8001d92:	793b      	ldrb	r3, [r7, #4]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <checkIfIsTimeToFeed+0x60>)
 8001d98:	f993 3000 	ldrsb.w	r3, [r3]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d112      	bne.n	8001dc6 <checkIfIsTimeToFeed+0x52>
 8001da0:	797b      	ldrb	r3, [r7, #5]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <checkIfIsTimeToFeed+0x64>)
 8001da6:	f993 3000 	ldrsb.w	r3, [r3]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d10b      	bne.n	8001dc6 <checkIfIsTimeToFeed+0x52>
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <checkIfIsTimeToFeed+0x68>)
 8001db4:	f993 3000 	ldrsb.w	r3, [r3]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d104      	bne.n	8001dc6 <checkIfIsTimeToFeed+0x52>
		handle_event(FEED_TIME_EVENT);
 8001dbc:	2005      	movs	r0, #5
 8001dbe:	f7fe fd87 	bl	80008d0 <handle_event>
		startFeeding();
 8001dc2:	f000 f80d 	bl	8001de0 <startFeeding>
	}
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000088 	.word	0x20000088
 8001dd4:	20000006 	.word	0x20000006
 8001dd8:	20000007 	.word	0x20000007
 8001ddc:	20000008 	.word	0x20000008

08001de0 <startFeeding>:

/***********************************************/
void startFeeding() {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
/***********************************************/
	triggerOnce();
 8001de4:	f7fe fca0 	bl	8000728 <triggerOnce>
	HAL_GPIO_WritePin(MOTOR_Enable_GPIO_Port, MOTOR_Enable_Pin, GPIO_PIN_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	2101      	movs	r1, #1
 8001dec:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <startFeeding+0x18>)
 8001dee:	f000 fb68 	bl	80024c2 <HAL_GPIO_WritePin>
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40010800 	.word	0x40010800

08001dfc <stopFeeding>:

/***********************************************/
void stopFeeding() {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
/***********************************************/
	HAL_GPIO_WritePin(MOTOR_Enable_GPIO_Port, MOTOR_Enable_Pin, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2101      	movs	r1, #1
 8001e04:	4803      	ldr	r0, [pc, #12]	@ (8001e14 <stopFeeding+0x18>)
 8001e06:	f000 fb5c 	bl	80024c2 <HAL_GPIO_WritePin>
	handle_event(END_FEED_TIME_EVENT);
 8001e0a:	2006      	movs	r0, #6
 8001e0c:	f7fe fd60 	bl	80008d0 <handle_event>
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40010800 	.word	0x40010800

08001e18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e18:	f7ff fa50 	bl	80012bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e1c:	480b      	ldr	r0, [pc, #44]	@ (8001e4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e1e:	490c      	ldr	r1, [pc, #48]	@ (8001e50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e20:	4a0c      	ldr	r2, [pc, #48]	@ (8001e54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a09      	ldr	r2, [pc, #36]	@ (8001e58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e34:	4c09      	ldr	r4, [pc, #36]	@ (8001e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e42:	f003 f84b 	bl	8004edc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e46:	f7fe fa47 	bl	80002d8 <main>
  bx lr
 8001e4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e50:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001e54:	08005114 	.word	0x08005114
  ldr r2, =_sbss
 8001e58:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001e5c:	200001a0 	.word	0x200001a0

08001e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <ADC1_2_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <HAL_Init+0x28>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	@ (8001e8c <HAL_Init+0x28>)
 8001e6e:	f043 0310 	orr.w	r3, r3, #16
 8001e72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f947 	bl	8002108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff f8a4 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40022000 	.word	0x40022000

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f95f 	bl	8002172 <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f000 f927 	bl	800211e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	@ (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000000c 	.word	0x2000000c
 8001ee8:	20000014 	.word	0x20000014
 8001eec:	20000010 	.word	0x20000010

08001ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <HAL_IncTick+0x1c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_IncTick+0x20>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a03      	ldr	r2, [pc, #12]	@ (8001f10 <HAL_IncTick+0x20>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	20000014 	.word	0x20000014
 8001f10:	2000019c 	.word	0x2000019c

08001f14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b02      	ldr	r3, [pc, #8]	@ (8001f24 <HAL_GetTick+0x10>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	2000019c 	.word	0x2000019c

08001f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff fff0 	bl	8001f14 <HAL_GetTick>
 8001f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d005      	beq.n	8001f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_Delay+0x44>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4e:	bf00      	nop
 8001f50:	f7ff ffe0 	bl	8001f14 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d8f7      	bhi.n	8001f50 <HAL_Delay+0x28>
  {
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000014 	.word	0x20000014

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa2:	4a04      	ldr	r2, [pc, #16]	@ (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60d3      	str	r3, [r2, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	@ (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0b      	blt.n	8001ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	4906      	ldr	r1, [pc, #24]	@ (8002008 <__NVIC_EnableIRQ+0x34>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	@ (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	@ (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	@ 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	@ 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020d4:	d301      	bcc.n	80020da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00f      	b.n	80020fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020da:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <SysTick_Config+0x40>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e2:	210f      	movs	r1, #15
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f7ff ff90 	bl	800200c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <SysTick_Config+0x40>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f2:	4b04      	ldr	r3, [pc, #16]	@ (8002104 <SysTick_Config+0x40>)
 80020f4:	2207      	movs	r2, #7
 80020f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	e000e010 	.word	0xe000e010

08002108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff2d 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002130:	f7ff ff42 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 8002134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff ff90 	bl	8002060 <NVIC_EncodePriority>
 8002140:	4602      	mov	r2, r0
 8002142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff5f 	bl	800200c <__NVIC_SetPriority>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff35 	bl	8001fd4 <__NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffa2 	bl	80020c4 <SysTick_Config>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b08b      	sub	sp, #44	@ 0x2c
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219e:	e169      	b.n	8002474 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021a0:	2201      	movs	r2, #1
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	f040 8158 	bne.w	800246e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4a9a      	ldr	r2, [pc, #616]	@ (800242c <HAL_GPIO_Init+0x2a0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d05e      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021c8:	4a98      	ldr	r2, [pc, #608]	@ (800242c <HAL_GPIO_Init+0x2a0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d875      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021ce:	4a98      	ldr	r2, [pc, #608]	@ (8002430 <HAL_GPIO_Init+0x2a4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d058      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021d4:	4a96      	ldr	r2, [pc, #600]	@ (8002430 <HAL_GPIO_Init+0x2a4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d86f      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021da:	4a96      	ldr	r2, [pc, #600]	@ (8002434 <HAL_GPIO_Init+0x2a8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d052      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021e0:	4a94      	ldr	r2, [pc, #592]	@ (8002434 <HAL_GPIO_Init+0x2a8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d869      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021e6:	4a94      	ldr	r2, [pc, #592]	@ (8002438 <HAL_GPIO_Init+0x2ac>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d04c      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021ec:	4a92      	ldr	r2, [pc, #584]	@ (8002438 <HAL_GPIO_Init+0x2ac>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d863      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021f2:	4a92      	ldr	r2, [pc, #584]	@ (800243c <HAL_GPIO_Init+0x2b0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d046      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021f8:	4a90      	ldr	r2, [pc, #576]	@ (800243c <HAL_GPIO_Init+0x2b0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d85d      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021fe:	2b12      	cmp	r3, #18
 8002200:	d82a      	bhi.n	8002258 <HAL_GPIO_Init+0xcc>
 8002202:	2b12      	cmp	r3, #18
 8002204:	d859      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 8002206:	a201      	add	r2, pc, #4	@ (adr r2, 800220c <HAL_GPIO_Init+0x80>)
 8002208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220c:	08002287 	.word	0x08002287
 8002210:	08002261 	.word	0x08002261
 8002214:	08002273 	.word	0x08002273
 8002218:	080022b5 	.word	0x080022b5
 800221c:	080022bb 	.word	0x080022bb
 8002220:	080022bb 	.word	0x080022bb
 8002224:	080022bb 	.word	0x080022bb
 8002228:	080022bb 	.word	0x080022bb
 800222c:	080022bb 	.word	0x080022bb
 8002230:	080022bb 	.word	0x080022bb
 8002234:	080022bb 	.word	0x080022bb
 8002238:	080022bb 	.word	0x080022bb
 800223c:	080022bb 	.word	0x080022bb
 8002240:	080022bb 	.word	0x080022bb
 8002244:	080022bb 	.word	0x080022bb
 8002248:	080022bb 	.word	0x080022bb
 800224c:	080022bb 	.word	0x080022bb
 8002250:	08002269 	.word	0x08002269
 8002254:	0800227d 	.word	0x0800227d
 8002258:	4a79      	ldr	r2, [pc, #484]	@ (8002440 <HAL_GPIO_Init+0x2b4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800225e:	e02c      	b.n	80022ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	623b      	str	r3, [r7, #32]
          break;
 8002266:	e029      	b.n	80022bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	3304      	adds	r3, #4
 800226e:	623b      	str	r3, [r7, #32]
          break;
 8002270:	e024      	b.n	80022bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	3308      	adds	r3, #8
 8002278:	623b      	str	r3, [r7, #32]
          break;
 800227a:	e01f      	b.n	80022bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	330c      	adds	r3, #12
 8002282:	623b      	str	r3, [r7, #32]
          break;
 8002284:	e01a      	b.n	80022bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800228e:	2304      	movs	r3, #4
 8002290:	623b      	str	r3, [r7, #32]
          break;
 8002292:	e013      	b.n	80022bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d105      	bne.n	80022a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800229c:	2308      	movs	r3, #8
 800229e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	611a      	str	r2, [r3, #16]
          break;
 80022a6:	e009      	b.n	80022bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a8:	2308      	movs	r3, #8
 80022aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	615a      	str	r2, [r3, #20]
          break;
 80022b2:	e003      	b.n	80022bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
          break;
 80022b8:	e000      	b.n	80022bc <HAL_GPIO_Init+0x130>
          break;
 80022ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2bff      	cmp	r3, #255	@ 0xff
 80022c0:	d801      	bhi.n	80022c6 <HAL_GPIO_Init+0x13a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	e001      	b.n	80022ca <HAL_GPIO_Init+0x13e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3304      	adds	r3, #4
 80022ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2bff      	cmp	r3, #255	@ 0xff
 80022d0:	d802      	bhi.n	80022d8 <HAL_GPIO_Init+0x14c>
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	e002      	b.n	80022de <HAL_GPIO_Init+0x152>
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	3b08      	subs	r3, #8
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	210f      	movs	r1, #15
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	6a39      	ldr	r1, [r7, #32]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	431a      	orrs	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80b1 	beq.w	800246e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800230c:	4b4d      	ldr	r3, [pc, #308]	@ (8002444 <HAL_GPIO_Init+0x2b8>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a4c      	ldr	r2, [pc, #304]	@ (8002444 <HAL_GPIO_Init+0x2b8>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b4a      	ldr	r3, [pc, #296]	@ (8002444 <HAL_GPIO_Init+0x2b8>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002324:	4a48      	ldr	r2, [pc, #288]	@ (8002448 <HAL_GPIO_Init+0x2bc>)
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002330:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	220f      	movs	r2, #15
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4013      	ands	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a40      	ldr	r2, [pc, #256]	@ (800244c <HAL_GPIO_Init+0x2c0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d013      	beq.n	8002378 <HAL_GPIO_Init+0x1ec>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3f      	ldr	r2, [pc, #252]	@ (8002450 <HAL_GPIO_Init+0x2c4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d00d      	beq.n	8002374 <HAL_GPIO_Init+0x1e8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a3e      	ldr	r2, [pc, #248]	@ (8002454 <HAL_GPIO_Init+0x2c8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <HAL_GPIO_Init+0x1e4>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3d      	ldr	r2, [pc, #244]	@ (8002458 <HAL_GPIO_Init+0x2cc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_GPIO_Init+0x1e0>
 8002368:	2303      	movs	r3, #3
 800236a:	e006      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 800236c:	2304      	movs	r3, #4
 800236e:	e004      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002370:	2302      	movs	r3, #2
 8002372:	e002      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002378:	2300      	movs	r3, #0
 800237a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800237c:	f002 0203 	and.w	r2, r2, #3
 8002380:	0092      	lsls	r2, r2, #2
 8002382:	4093      	lsls	r3, r2
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800238a:	492f      	ldr	r1, [pc, #188]	@ (8002448 <HAL_GPIO_Init+0x2bc>)
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023a4:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	492c      	ldr	r1, [pc, #176]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4928      	ldr	r1, [pc, #160]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 80023bc:	4013      	ands	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023cc:	4b23      	ldr	r3, [pc, #140]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	4922      	ldr	r1, [pc, #136]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60cb      	str	r3, [r1, #12]
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023da:	4b20      	ldr	r3, [pc, #128]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	491e      	ldr	r1, [pc, #120]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023f4:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4918      	ldr	r1, [pc, #96]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002402:	4b16      	ldr	r3, [pc, #88]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	43db      	mvns	r3, r3
 800240a:	4914      	ldr	r1, [pc, #80]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 800240c:	4013      	ands	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d021      	beq.n	8002460 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800241c:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	490e      	ldr	r1, [pc, #56]	@ (800245c <HAL_GPIO_Init+0x2d0>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e021      	b.n	800246e <HAL_GPIO_Init+0x2e2>
 800242a:	bf00      	nop
 800242c:	10320000 	.word	0x10320000
 8002430:	10310000 	.word	0x10310000
 8002434:	10220000 	.word	0x10220000
 8002438:	10210000 	.word	0x10210000
 800243c:	10120000 	.word	0x10120000
 8002440:	10110000 	.word	0x10110000
 8002444:	40021000 	.word	0x40021000
 8002448:	40010000 	.word	0x40010000
 800244c:	40010800 	.word	0x40010800
 8002450:	40010c00 	.word	0x40010c00
 8002454:	40011000 	.word	0x40011000
 8002458:	40011400 	.word	0x40011400
 800245c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_GPIO_Init+0x304>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	43db      	mvns	r3, r3
 8002468:	4909      	ldr	r1, [pc, #36]	@ (8002490 <HAL_GPIO_Init+0x304>)
 800246a:	4013      	ands	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	3301      	adds	r3, #1
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	fa22 f303 	lsr.w	r3, r2, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	f47f ae8e 	bne.w	80021a0 <HAL_GPIO_Init+0x14>
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	372c      	adds	r7, #44	@ 0x2c
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	40010400 	.word	0x40010400

08002494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	e001      	b.n	80024b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	807b      	strh	r3, [r7, #2]
 80024ce:	4613      	mov	r3, r2
 80024d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d2:	787b      	ldrb	r3, [r7, #1]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d8:	887a      	ldrh	r2, [r7, #2]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024de:	e003      	b.n	80024e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024e0:	887b      	ldrh	r3, [r7, #2]
 80024e2:	041a      	lsls	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	611a      	str	r2, [r3, #16]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
	...

080024f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024fe:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800250a:	4a05      	ldr	r2, [pc, #20]	@ (8002520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f806 	bl	8002524 <HAL_GPIO_EXTI_Callback>
  }
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40010400 	.word	0x40010400

08002524 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e12b      	b.n	80027a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe fd66 	bl	8001030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2224      	movs	r2, #36	@ 0x24
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800258a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800259a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800259c:	f001 f83e 	bl	800361c <HAL_RCC_GetPCLK1Freq>
 80025a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4a81      	ldr	r2, [pc, #516]	@ (80027ac <HAL_I2C_Init+0x274>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d807      	bhi.n	80025bc <HAL_I2C_Init+0x84>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4a80      	ldr	r2, [pc, #512]	@ (80027b0 <HAL_I2C_Init+0x278>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	bf94      	ite	ls
 80025b4:	2301      	movls	r3, #1
 80025b6:	2300      	movhi	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	e006      	b.n	80025ca <HAL_I2C_Init+0x92>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a7d      	ldr	r2, [pc, #500]	@ (80027b4 <HAL_I2C_Init+0x27c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	bf94      	ite	ls
 80025c4:	2301      	movls	r3, #1
 80025c6:	2300      	movhi	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0e7      	b.n	80027a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4a78      	ldr	r2, [pc, #480]	@ (80027b8 <HAL_I2C_Init+0x280>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0c9b      	lsrs	r3, r3, #18
 80025dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a6a      	ldr	r2, [pc, #424]	@ (80027ac <HAL_I2C_Init+0x274>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d802      	bhi.n	800260c <HAL_I2C_Init+0xd4>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3301      	adds	r3, #1
 800260a:	e009      	b.n	8002620 <HAL_I2C_Init+0xe8>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	4a69      	ldr	r2, [pc, #420]	@ (80027bc <HAL_I2C_Init+0x284>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	099b      	lsrs	r3, r3, #6
 800261e:	3301      	adds	r3, #1
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	430b      	orrs	r3, r1
 8002626:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002632:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	495c      	ldr	r1, [pc, #368]	@ (80027ac <HAL_I2C_Init+0x274>)
 800263c:	428b      	cmp	r3, r1
 800263e:	d819      	bhi.n	8002674 <HAL_I2C_Init+0x13c>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e59      	subs	r1, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fbb1 f3f3 	udiv	r3, r1, r3
 800264e:	1c59      	adds	r1, r3, #1
 8002650:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002654:	400b      	ands	r3, r1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_I2C_Init+0x138>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1e59      	subs	r1, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fbb1 f3f3 	udiv	r3, r1, r3
 8002668:	3301      	adds	r3, #1
 800266a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266e:	e051      	b.n	8002714 <HAL_I2C_Init+0x1dc>
 8002670:	2304      	movs	r3, #4
 8002672:	e04f      	b.n	8002714 <HAL_I2C_Init+0x1dc>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d111      	bne.n	80026a0 <HAL_I2C_Init+0x168>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1e58      	subs	r0, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	440b      	add	r3, r1
 800268a:	fbb0 f3f3 	udiv	r3, r0, r3
 800268e:	3301      	adds	r3, #1
 8002690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e012      	b.n	80026c6 <HAL_I2C_Init+0x18e>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1e58      	subs	r0, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	0099      	lsls	r1, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Init+0x196>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e022      	b.n	8002714 <HAL_I2C_Init+0x1dc>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10e      	bne.n	80026f4 <HAL_I2C_Init+0x1bc>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1e58      	subs	r0, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6859      	ldr	r1, [r3, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	440b      	add	r3, r1
 80026e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e8:	3301      	adds	r3, #1
 80026ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026f2:	e00f      	b.n	8002714 <HAL_I2C_Init+0x1dc>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e58      	subs	r0, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	0099      	lsls	r1, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	fbb0 f3f3 	udiv	r3, r0, r3
 800270a:	3301      	adds	r3, #1
 800270c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002710:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	6809      	ldr	r1, [r1, #0]
 8002718:	4313      	orrs	r3, r2
 800271a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002742:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6911      	ldr	r1, [r2, #16]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68d2      	ldr	r2, [r2, #12]
 800274e:	4311      	orrs	r1, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	430b      	orrs	r3, r1
 8002756:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	000186a0 	.word	0x000186a0
 80027b0:	001e847f 	.word	0x001e847f
 80027b4:	003d08ff 	.word	0x003d08ff
 80027b8:	431bde83 	.word	0x431bde83
 80027bc:	10624dd3 	.word	0x10624dd3

080027c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	461a      	mov	r2, r3
 80027cc:	460b      	mov	r3, r1
 80027ce:	817b      	strh	r3, [r7, #10]
 80027d0:	4613      	mov	r3, r2
 80027d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff fb9e 	bl	8001f14 <HAL_GetTick>
 80027d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	f040 80e0 	bne.w	80029a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2319      	movs	r3, #25
 80027ee:	2201      	movs	r2, #1
 80027f0:	4970      	ldr	r1, [pc, #448]	@ (80029b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f964 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027fe:	2302      	movs	r3, #2
 8002800:	e0d3      	b.n	80029aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_I2C_Master_Transmit+0x50>
 800280c:	2302      	movs	r3, #2
 800280e:	e0cc      	b.n	80029aa <HAL_I2C_Master_Transmit+0x1ea>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b01      	cmp	r3, #1
 8002824:	d007      	beq.n	8002836 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002844:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2221      	movs	r2, #33	@ 0x21
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2210      	movs	r2, #16
 8002852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	893a      	ldrh	r2, [r7, #8]
 8002866:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4a50      	ldr	r2, [pc, #320]	@ (80029b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002876:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002878:	8979      	ldrh	r1, [r7, #10]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	6a3a      	ldr	r2, [r7, #32]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f89c 	bl	80029bc <I2C_MasterRequestWrite>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e08d      	b.n	80029aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028a4:	e066      	b.n	8002974 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	6a39      	ldr	r1, [r7, #32]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fa22 	bl	8002cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d107      	bne.n	80028ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e06b      	b.n	80029aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	781a      	ldrb	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b04      	cmp	r3, #4
 800290e:	d11b      	bne.n	8002948 <HAL_I2C_Master_Transmit+0x188>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d017      	beq.n	8002948 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	6a39      	ldr	r1, [r7, #32]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fa19 	bl	8002d84 <I2C_WaitOnBTFFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00d      	beq.n	8002974 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	2b04      	cmp	r3, #4
 800295e:	d107      	bne.n	8002970 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e01a      	b.n	80029aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	d194      	bne.n	80028a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800298a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e000      	b.n	80029aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029a8:	2302      	movs	r3, #2
  }
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	00100002 	.word	0x00100002
 80029b8:	ffff0000 	.word	0xffff0000

080029bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	460b      	mov	r3, r1
 80029ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d006      	beq.n	80029e6 <I2C_MasterRequestWrite+0x2a>
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d003      	beq.n	80029e6 <I2C_MasterRequestWrite+0x2a>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029e4:	d108      	bne.n	80029f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e00b      	b.n	8002a10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fc:	2b12      	cmp	r3, #18
 80029fe:	d107      	bne.n	8002a10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f84f 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a36:	d103      	bne.n	8002a40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e035      	b.n	8002ab0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a4c:	d108      	bne.n	8002a60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a4e:	897b      	ldrh	r3, [r7, #10]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a5c:	611a      	str	r2, [r3, #16]
 8002a5e:	e01b      	b.n	8002a98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a60:	897b      	ldrh	r3, [r7, #10]
 8002a62:	11db      	asrs	r3, r3, #7
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f003 0306 	and.w	r3, r3, #6
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f063 030f 	orn	r3, r3, #15
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	490e      	ldr	r1, [pc, #56]	@ (8002ab8 <I2C_MasterRequestWrite+0xfc>)
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f898 	bl	8002bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e010      	b.n	8002ab0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a8e:	897b      	ldrh	r3, [r7, #10]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4907      	ldr	r1, [pc, #28]	@ (8002abc <I2C_MasterRequestWrite+0x100>)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f888 	bl	8002bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	00010008 	.word	0x00010008
 8002abc:	00010002 	.word	0x00010002

08002ac0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ad0:	e048      	b.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d044      	beq.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ada:	f7ff fa1b 	bl	8001f14 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d302      	bcc.n	8002af0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d139      	bne.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	0c1b      	lsrs	r3, r3, #16
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10d      	bne.n	8002b16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	43da      	mvns	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4013      	ands	r3, r2
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	e00c      	b.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4013      	ands	r3, r2
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d116      	bne.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e023      	b.n	8002bac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	0c1b      	lsrs	r3, r3, #16
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d10d      	bne.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	43da      	mvns	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	e00c      	b.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	43da      	mvns	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4013      	ands	r3, r2
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d093      	beq.n	8002ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bc2:	e071      	b.n	8002ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bd2:	d123      	bne.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	f043 0204 	orr.w	r2, r3, #4
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e067      	b.n	8002cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c22:	d041      	beq.n	8002ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7ff f976 	bl	8001f14 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d136      	bne.n	8002ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d10c      	bne.n	8002c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	43da      	mvns	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf14      	ite	ne
 8002c56:	2301      	movne	r3, #1
 8002c58:	2300      	moveq	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	e00b      	b.n	8002c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	43da      	mvns	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf14      	ite	ne
 8002c70:	2301      	movne	r3, #1
 8002c72:	2300      	moveq	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d016      	beq.n	8002ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e021      	b.n	8002cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	0c1b      	lsrs	r3, r3, #16
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d10c      	bne.n	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	43da      	mvns	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e00b      	b.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	bf14      	ite	ne
 8002cde:	2301      	movne	r3, #1
 8002ce0:	2300      	moveq	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f af6d 	bne.w	8002bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d00:	e034      	b.n	8002d6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f886 	bl	8002e14 <I2C_IsAcknowledgeFailed>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e034      	b.n	8002d7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d028      	beq.n	8002d6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1a:	f7ff f8fb 	bl	8001f14 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d302      	bcc.n	8002d30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d11d      	bne.n	8002d6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3a:	2b80      	cmp	r3, #128	@ 0x80
 8002d3c:	d016      	beq.n	8002d6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e007      	b.n	8002d7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d76:	2b80      	cmp	r3, #128	@ 0x80
 8002d78:	d1c3      	bne.n	8002d02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d90:	e034      	b.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f83e 	bl	8002e14 <I2C_IsAcknowledgeFailed>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e034      	b.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d028      	beq.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7ff f8b3 	bl	8001f14 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d11d      	bne.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d016      	beq.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e007      	b.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d1c3      	bne.n	8002d92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e2a:	d11b      	bne.n	8002e64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	f043 0204 	orr.w	r2, r3, #4
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002e74:	4b03      	ldr	r3, [pc, #12]	@ (8002e84 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	420e0020 	.word	0x420e0020

08002e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e272      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8087 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ea8:	4b92      	ldr	r3, [pc, #584]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d00c      	beq.n	8002ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eb4:	4b8f      	ldr	r3, [pc, #572]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d112      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5e>
 8002ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ece:	4b89      	ldr	r3, [pc, #548]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d06c      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x12c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d168      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e24c      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x76>
 8002ef0:	4b80      	ldr	r3, [pc, #512]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a7f      	ldr	r2, [pc, #508]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	e02e      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x98>
 8002f06:	4b7b      	ldr	r3, [pc, #492]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a7a      	ldr	r2, [pc, #488]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b78      	ldr	r3, [pc, #480]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a77      	ldr	r2, [pc, #476]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e01d      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0xbc>
 8002f2a:	4b72      	ldr	r3, [pc, #456]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a71      	ldr	r2, [pc, #452]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b6f      	ldr	r3, [pc, #444]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6e      	ldr	r2, [pc, #440]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e00b      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002f44:	4b6b      	ldr	r3, [pc, #428]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a6a      	ldr	r2, [pc, #424]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b68      	ldr	r3, [pc, #416]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a67      	ldr	r2, [pc, #412]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe ffd6 	bl	8001f14 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe ffd2 	bl	8001f14 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	@ 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e200      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0xe4>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fe ffc2 	bl	8001f14 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f94:	f7fe ffbe 	bl	8001f14 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	@ 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e1ec      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	4b53      	ldr	r3, [pc, #332]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x10c>
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d063      	beq.n	800308a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fce:	4b49      	ldr	r3, [pc, #292]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d11c      	bne.n	8003014 <HAL_RCC_OscConfig+0x18c>
 8002fda:	4b46      	ldr	r3, [pc, #280]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d116      	bne.n	8003014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	4b43      	ldr	r3, [pc, #268]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x176>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e1c0      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4939      	ldr	r1, [pc, #228]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	e03a      	b.n	800308a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301c:	4b36      	ldr	r3, [pc, #216]	@ (80030f8 <HAL_RCC_OscConfig+0x270>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe ff77 	bl	8001f14 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302a:	f7fe ff73 	bl	8001f14 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1a1      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	4b2d      	ldr	r3, [pc, #180]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b2a      	ldr	r3, [pc, #168]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4927      	ldr	r1, [pc, #156]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	e015      	b.n	800308a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b26      	ldr	r3, [pc, #152]	@ (80030f8 <HAL_RCC_OscConfig+0x270>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe ff56 	bl	8001f14 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306c:	f7fe ff52 	bl	8001f14 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e180      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	4b1d      	ldr	r3, [pc, #116]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d03a      	beq.n	800310c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d019      	beq.n	80030d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309e:	4b17      	ldr	r3, [pc, #92]	@ (80030fc <HAL_RCC_OscConfig+0x274>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a4:	f7fe ff36 	bl	8001f14 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fe ff32 	bl	8001f14 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e160      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f000 face 	bl	800366c <RCC_Delay>
 80030d0:	e01c      	b.n	800310c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d2:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <HAL_RCC_OscConfig+0x274>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d8:	f7fe ff1c 	bl	8001f14 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030de:	e00f      	b.n	8003100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fe ff18 	bl	8001f14 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d908      	bls.n	8003100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e146      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	42420000 	.word	0x42420000
 80030fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	4b92      	ldr	r3, [pc, #584]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e9      	bne.n	80030e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a6 	beq.w	8003266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b8b      	ldr	r3, [pc, #556]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4b88      	ldr	r3, [pc, #544]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4a87      	ldr	r2, [pc, #540]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003134:	61d3      	str	r3, [r2, #28]
 8003136:	4b85      	ldr	r3, [pc, #532]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	4b82      	ldr	r3, [pc, #520]	@ (8003350 <HAL_RCC_OscConfig+0x4c8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d118      	bne.n	8003184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003152:	4b7f      	ldr	r3, [pc, #508]	@ (8003350 <HAL_RCC_OscConfig+0x4c8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a7e      	ldr	r2, [pc, #504]	@ (8003350 <HAL_RCC_OscConfig+0x4c8>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315e:	f7fe fed9 	bl	8001f14 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003166:	f7fe fed5 	bl	8001f14 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b64      	cmp	r3, #100	@ 0x64
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e103      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	4b75      	ldr	r3, [pc, #468]	@ (8003350 <HAL_RCC_OscConfig+0x4c8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x312>
 800318c:	4b6f      	ldr	r3, [pc, #444]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4a6e      	ldr	r2, [pc, #440]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	e02d      	b.n	80031f6 <HAL_RCC_OscConfig+0x36e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0x334>
 80031a2:	4b6a      	ldr	r3, [pc, #424]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4a69      	ldr	r2, [pc, #420]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6213      	str	r3, [r2, #32]
 80031ae:	4b67      	ldr	r3, [pc, #412]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4a66      	ldr	r2, [pc, #408]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	f023 0304 	bic.w	r3, r3, #4
 80031b8:	6213      	str	r3, [r2, #32]
 80031ba:	e01c      	b.n	80031f6 <HAL_RCC_OscConfig+0x36e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d10c      	bne.n	80031de <HAL_RCC_OscConfig+0x356>
 80031c4:	4b61      	ldr	r3, [pc, #388]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4a60      	ldr	r2, [pc, #384]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	6213      	str	r3, [r2, #32]
 80031d0:	4b5e      	ldr	r3, [pc, #376]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a5d      	ldr	r2, [pc, #372]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	e00b      	b.n	80031f6 <HAL_RCC_OscConfig+0x36e>
 80031de:	4b5b      	ldr	r3, [pc, #364]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a5a      	ldr	r2, [pc, #360]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	4b58      	ldr	r3, [pc, #352]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a57      	ldr	r2, [pc, #348]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d015      	beq.n	800322a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fe:	f7fe fe89 	bl	8001f14 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fe fe85 	bl	8001f14 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0b1      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321c:	4b4b      	ldr	r3, [pc, #300]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ee      	beq.n	8003206 <HAL_RCC_OscConfig+0x37e>
 8003228:	e014      	b.n	8003254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7fe fe73 	bl	8001f14 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fe6f 	bl	8001f14 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e09b      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003248:	4b40      	ldr	r3, [pc, #256]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ee      	bne.n	8003232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d105      	bne.n	8003266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325a:	4b3c      	ldr	r3, [pc, #240]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4a3b      	ldr	r2, [pc, #236]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8087 	beq.w	800337e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003270:	4b36      	ldr	r3, [pc, #216]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	d061      	beq.n	8003340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d146      	bne.n	8003312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003284:	4b33      	ldr	r3, [pc, #204]	@ (8003354 <HAL_RCC_OscConfig+0x4cc>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe fe43 	bl	8001f14 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe fe3f 	bl	8001f14 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e06d      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a4:	4b29      	ldr	r3, [pc, #164]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b8:	d108      	bne.n	80032cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ba:	4b24      	ldr	r3, [pc, #144]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	4921      	ldr	r1, [pc, #132]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032cc:	4b1f      	ldr	r3, [pc, #124]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a19      	ldr	r1, [r3, #32]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	430b      	orrs	r3, r1
 80032de:	491b      	ldr	r1, [pc, #108]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <HAL_RCC_OscConfig+0x4cc>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7fe fe13 	bl	8001f14 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fe fe0f 	bl	8001f14 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e03d      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003304:	4b11      	ldr	r3, [pc, #68]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x46a>
 8003310:	e035      	b.n	800337e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003312:	4b10      	ldr	r3, [pc, #64]	@ (8003354 <HAL_RCC_OscConfig+0x4cc>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7fe fdfc 	bl	8001f14 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7fe fdf8 	bl	8001f14 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e026      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003332:	4b06      	ldr	r3, [pc, #24]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x498>
 800333e:	e01e      	b.n	800337e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e019      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
 800334c:	40021000 	.word	0x40021000
 8003350:	40007000 	.word	0x40007000
 8003354:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003358:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <HAL_RCC_OscConfig+0x500>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	429a      	cmp	r2, r3
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000

0800338c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0d0      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a0:	4b6a      	ldr	r3, [pc, #424]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d910      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b67      	ldr	r3, [pc, #412]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 0207 	bic.w	r2, r3, #7
 80033b6:	4965      	ldr	r1, [pc, #404]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b63      	ldr	r3, [pc, #396]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0b8      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d020      	beq.n	800341e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e8:	4b59      	ldr	r3, [pc, #356]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a58      	ldr	r2, [pc, #352]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003400:	4b53      	ldr	r3, [pc, #332]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4a52      	ldr	r2, [pc, #328]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800340a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340c:	4b50      	ldr	r3, [pc, #320]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	494d      	ldr	r1, [pc, #308]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d040      	beq.n	80034ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	4b47      	ldr	r3, [pc, #284]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d115      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e07f      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344a:	4b41      	ldr	r3, [pc, #260]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e073      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345a:	4b3d      	ldr	r3, [pc, #244]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e06b      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346a:	4b39      	ldr	r3, [pc, #228]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f023 0203 	bic.w	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4936      	ldr	r1, [pc, #216]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800347c:	f7fe fd4a 	bl	8001f14 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	e00a      	b.n	800349a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003484:	f7fe fd46 	bl	8001f14 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e053      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	4b2d      	ldr	r3, [pc, #180]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 020c 	and.w	r2, r3, #12
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d1eb      	bne.n	8003484 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ac:	4b27      	ldr	r3, [pc, #156]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d210      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ba:	4b24      	ldr	r3, [pc, #144]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 0207 	bic.w	r2, r3, #7
 80034c2:	4922      	ldr	r1, [pc, #136]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b20      	ldr	r3, [pc, #128]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e032      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e8:	4b19      	ldr	r3, [pc, #100]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4916      	ldr	r1, [pc, #88]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003506:	4b12      	ldr	r3, [pc, #72]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	490e      	ldr	r1, [pc, #56]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800351a:	f000 f821 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 800351e:	4602      	mov	r2, r0
 8003520:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	490a      	ldr	r1, [pc, #40]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	5ccb      	ldrb	r3, [r1, r3]
 800352e:	fa22 f303 	lsr.w	r3, r2, r3
 8003532:	4a09      	ldr	r2, [pc, #36]	@ (8003558 <HAL_RCC_ClockConfig+0x1cc>)
 8003534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003536:	4b09      	ldr	r3, [pc, #36]	@ (800355c <HAL_RCC_ClockConfig+0x1d0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe fca8 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40022000 	.word	0x40022000
 8003550:	40021000 	.word	0x40021000
 8003554:	080050cc 	.word	0x080050cc
 8003558:	2000000c 	.word	0x2000000c
 800355c:	20000010 	.word	0x20000010

08003560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800357a:	4b1e      	ldr	r3, [pc, #120]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b04      	cmp	r3, #4
 8003588:	d002      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x30>
 800358a:	2b08      	cmp	r3, #8
 800358c:	d003      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x36>
 800358e:	e027      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003590:	4b19      	ldr	r3, [pc, #100]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003592:	613b      	str	r3, [r7, #16]
      break;
 8003594:	e027      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	0c9b      	lsrs	r3, r3, #18
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	4a17      	ldr	r2, [pc, #92]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80035a0:	5cd3      	ldrb	r3, [r2, r3]
 80035a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d010      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035ae:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	0c5b      	lsrs	r3, r3, #17
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	4a11      	ldr	r2, [pc, #68]	@ (8003600 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035ba:	5cd3      	ldrb	r3, [r2, r3]
 80035bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a0d      	ldr	r2, [pc, #52]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80035c2:	fb03 f202 	mul.w	r2, r3, r2
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e004      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003604 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	613b      	str	r3, [r7, #16]
      break;
 80035de:	e002      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035e0:	4b05      	ldr	r3, [pc, #20]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80035e2:	613b      	str	r3, [r7, #16]
      break;
 80035e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e6:	693b      	ldr	r3, [r7, #16]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	007a1200 	.word	0x007a1200
 80035fc:	080050e4 	.word	0x080050e4
 8003600:	080050f4 	.word	0x080050f4
 8003604:	003d0900 	.word	0x003d0900

08003608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800360c:	4b02      	ldr	r3, [pc, #8]	@ (8003618 <HAL_RCC_GetHCLKFreq+0x10>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	2000000c 	.word	0x2000000c

0800361c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003620:	f7ff fff2 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8003624:	4602      	mov	r2, r0
 8003626:	4b05      	ldr	r3, [pc, #20]	@ (800363c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	4903      	ldr	r1, [pc, #12]	@ (8003640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	080050dc 	.word	0x080050dc

08003644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003648:	f7ff ffde 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0adb      	lsrs	r3, r3, #11
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4903      	ldr	r1, [pc, #12]	@ (8003668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	080050dc 	.word	0x080050dc

0800366c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003674:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <RCC_Delay+0x34>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0a      	ldr	r2, [pc, #40]	@ (80036a4 <RCC_Delay+0x38>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0a5b      	lsrs	r3, r3, #9
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003688:	bf00      	nop
  }
  while (Delay --);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1e5a      	subs	r2, r3, #1
 800368e:	60fa      	str	r2, [r7, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f9      	bne.n	8003688 <RCC_Delay+0x1c>
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	2000000c 	.word	0x2000000c
 80036a4:	10624dd3 	.word	0x10624dd3

080036a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d07d      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036c4:	2300      	movs	r3, #0
 80036c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10d      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036de:	61d3      	str	r3, [r2, #28]
 80036e0:	4b49      	ldr	r3, [pc, #292]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f0:	4b46      	ldr	r3, [pc, #280]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d118      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036fc:	4b43      	ldr	r3, [pc, #268]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a42      	ldr	r2, [pc, #264]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003706:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003708:	f7fe fc04 	bl	8001f14 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	e008      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003710:	f7fe fc00 	bl	8001f14 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	@ 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e06d      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003722:	4b3a      	ldr	r3, [pc, #232]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800372e:	4b36      	ldr	r3, [pc, #216]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003736:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d02e      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	429a      	cmp	r2, r3
 800374a:	d027      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800374c:	4b2e      	ldr	r3, [pc, #184]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003754:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003756:	4b2e      	ldr	r3, [pc, #184]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800375c:	4b2c      	ldr	r3, [pc, #176]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003762:	4a29      	ldr	r2, [pc, #164]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d014      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fe fbcf 	bl	8001f14 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	e00a      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fe fbcb 	bl	8001f14 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e036      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003790:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ee      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800379c:	4b1a      	ldr	r3, [pc, #104]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4917      	ldr	r1, [pc, #92]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b4:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4a13      	ldr	r2, [pc, #76]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	490b      	ldr	r1, [pc, #44]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037ea:	4b07      	ldr	r3, [pc, #28]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	4904      	ldr	r1, [pc, #16]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	40007000 	.word	0x40007000
 8003810:	42420440 	.word	0x42420440

08003814 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	2300      	movs	r3, #0
 8003826:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b10      	cmp	r3, #16
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b10      	cmp	r3, #16
 800383a:	f200 808a 	bhi.w	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d045      	beq.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d075      	beq.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800384a:	e082      	b.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800384c:	4b46      	ldr	r3, [pc, #280]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003852:	4b45      	ldr	r3, [pc, #276]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d07b      	beq.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	0c9b      	lsrs	r3, r3, #18
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	4a41      	ldr	r2, [pc, #260]	@ (800396c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003868:	5cd3      	ldrb	r3, [r2, r3]
 800386a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d015      	beq.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003876:	4b3c      	ldr	r3, [pc, #240]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	0c5b      	lsrs	r3, r3, #17
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	4a3b      	ldr	r2, [pc, #236]	@ (8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003882:	5cd3      	ldrb	r3, [r2, r3]
 8003884:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00d      	beq.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003890:	4a38      	ldr	r2, [pc, #224]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	fbb2 f2f3 	udiv	r2, r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	e004      	b.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4a34      	ldr	r2, [pc, #208]	@ (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80038ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b8:	d102      	bne.n	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	61bb      	str	r3, [r7, #24]
      break;
 80038be:	e04a      	b.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4a2d      	ldr	r2, [pc, #180]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	61bb      	str	r3, [r7, #24]
      break;
 80038ce:	e042      	b.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80038d0:	4b25      	ldr	r3, [pc, #148]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038e0:	d108      	bne.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80038ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	e01f      	b.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038fe:	d109      	bne.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003900:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800390c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e00f      	b.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800391a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800391e:	d11c      	bne.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003920:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d016      	beq.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800392c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003930:	61bb      	str	r3, [r7, #24]
      break;
 8003932:	e012      	b.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003934:	e011      	b.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003936:	f7ff fe85 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 800393a:	4602      	mov	r2, r0
 800393c:	4b0a      	ldr	r3, [pc, #40]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0b9b      	lsrs	r3, r3, #14
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	3301      	adds	r3, #1
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	61bb      	str	r3, [r7, #24]
      break;
 8003950:	e004      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003952:	bf00      	nop
 8003954:	e002      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003956:	bf00      	nop
 8003958:	e000      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800395a:	bf00      	nop
    }
  }
  return (frequency);
 800395c:	69bb      	ldr	r3, [r7, #24]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	080050f8 	.word	0x080050f8
 8003970:	08005108 	.word	0x08005108
 8003974:	007a1200 	.word	0x007a1200
 8003978:	003d0900 	.word	0x003d0900
 800397c:	aaaaaaab 	.word	0xaaaaaaab

08003980 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e07a      	b.n	8003a8c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7c5b      	ldrb	r3, [r3, #17]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fb92 	bl	80010d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 faea 	bl	8003f8c <HAL_RTC_WaitForSynchro>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2204      	movs	r2, #4
 80039c2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e061      	b.n	8003a8c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fba3 	bl	8004114 <RTC_EnterInitMode>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2204      	movs	r2, #4
 80039d8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e056      	b.n	8003a8c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0207 	bic.w	r2, r2, #7
 80039ec:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80039f6:	4b27      	ldr	r3, [pc, #156]	@ (8003a94 <HAL_RTC_Init+0x114>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	4a26      	ldr	r2, [pc, #152]	@ (8003a94 <HAL_RTC_Init+0x114>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003a02:	4b24      	ldr	r3, [pc, #144]	@ (8003a94 <HAL_RTC_Init+0x114>)
 8003a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a06:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	4921      	ldr	r1, [pc, #132]	@ (8003a94 <HAL_RTC_Init+0x114>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d003      	beq.n	8003a26 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e00e      	b.n	8003a44 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003a26:	2001      	movs	r0, #1
 8003a28:	f7ff fef4 	bl	8003814 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a2c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2204      	movs	r2, #4
 8003a38:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e026      	b.n	8003a8c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	0c1a      	lsrs	r2, r3, #16
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f002 020f 	and.w	r2, r2, #15
 8003a50:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	b292      	uxth	r2, r2
 8003a5a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fb81 	bl	8004164 <RTC_ExitInitMode>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e00c      	b.n	8003a8c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40006c00 	.word	0x40006c00

08003a98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_RTC_SetTime+0x20>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e080      	b.n	8003bbe <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	7c1b      	ldrb	r3, [r3, #16]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RTC_SetTime+0x30>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e07a      	b.n	8003bbe <HAL_RTC_SetTime+0x126>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d113      	bne.n	8003b02 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003ae4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	785b      	ldrb	r3, [r3, #1]
 8003aec:	4619      	mov	r1, r3
 8003aee:	460b      	mov	r3, r1
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a5b      	subs	r3, r3, r1
 8003af4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003af6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003afc:	4413      	add	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	e01e      	b.n	8003b40 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fb71 	bl	80041ee <RTC_Bcd2ToByte>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003b14:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	785b      	ldrb	r3, [r3, #1]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fb66 	bl	80041ee <RTC_Bcd2ToByte>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461a      	mov	r2, r3
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b2e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	789b      	ldrb	r3, [r3, #2]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fb5a 	bl	80041ee <RTC_Bcd2ToByte>
 8003b3a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b3c:	4423      	add	r3, r4
 8003b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003b40:	6979      	ldr	r1, [r7, #20]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fa7f 	bl	8004046 <RTC_WriteTimeCounter>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2204      	movs	r2, #4
 8003b52:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e02f      	b.n	8003bbe <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0205 	bic.w	r2, r2, #5
 8003b6c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fa90 	bl	8004094 <RTC_ReadAlarmCounter>
 8003b74:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d018      	beq.n	8003bb0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d214      	bcs.n	8003bb0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003b8c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003b90:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003b92:	6939      	ldr	r1, [r7, #16]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fa96 	bl	80040c6 <RTC_WriteAlarmCounter>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e006      	b.n	8003bbe <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd90      	pop	{r4, r7, pc}
	...

08003bc8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <HAL_RTC_GetTime+0x28>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0b5      	b.n	8003d60 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0ac      	b.n	8003d60 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f9ed 	bl	8003fe6 <RTC_ReadTimeCounter>
 8003c0c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	4a55      	ldr	r2, [pc, #340]	@ (8003d68 <HAL_RTC_GetTime+0x1a0>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	0adb      	lsrs	r3, r3, #11
 8003c18:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4b52      	ldr	r3, [pc, #328]	@ (8003d68 <HAL_RTC_GetTime+0x1a0>)
 8003c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c22:	0adb      	lsrs	r3, r3, #11
 8003c24:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	4a4f      	ldr	r2, [pc, #316]	@ (8003d6c <HAL_RTC_GetTime+0x1a4>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8003d68 <HAL_RTC_GetTime+0x1a0>)
 8003c40:	fba2 1203 	umull	r1, r2, r2, r3
 8003c44:	0ad2      	lsrs	r2, r2, #11
 8003c46:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003c4a:	fb01 f202 	mul.w	r2, r1, r2
 8003c4e:	1a9a      	subs	r2, r3, r2
 8003c50:	4b46      	ldr	r3, [pc, #280]	@ (8003d6c <HAL_RTC_GetTime+0x1a4>)
 8003c52:	fba3 1302 	umull	r1, r3, r3, r2
 8003c56:	0959      	lsrs	r1, r3, #5
 8003c58:	460b      	mov	r3, r1
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a5b      	subs	r3, r3, r1
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	1ad1      	subs	r1, r2, r3
 8003c62:	b2ca      	uxtb	r2, r1
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b17      	cmp	r3, #23
 8003c6c:	d955      	bls.n	8003d1a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4a3f      	ldr	r2, [pc, #252]	@ (8003d70 <HAL_RTC_GetTime+0x1a8>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003c7a:	6939      	ldr	r1, [r7, #16]
 8003c7c:	4b3c      	ldr	r3, [pc, #240]	@ (8003d70 <HAL_RTC_GetTime+0x1a8>)
 8003c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c82:	091a      	lsrs	r2, r3, #4
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	1aca      	subs	r2, r1, r3
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f9fd 	bl	8004094 <RTC_ReadAlarmCounter>
 8003c9a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RTC_GetTime+0xee>
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d904      	bls.n	8003cb6 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	e002      	b.n	8003cbc <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cba:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8003d74 <HAL_RTC_GetTime+0x1ac>)
 8003cc0:	fb02 f303 	mul.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003cca:	69b9      	ldr	r1, [r7, #24]
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f9ba 	bl	8004046 <RTC_WriteTimeCounter>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e041      	b.n	8003d60 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce2:	d00c      	beq.n	8003cfe <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	4413      	add	r3, r2
 8003cea:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003cec:	69f9      	ldr	r1, [r7, #28]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f9e9 	bl	80040c6 <RTC_WriteAlarmCounter>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e030      	b.n	8003d60 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003cfe:	69f9      	ldr	r1, [r7, #28]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f9e0 	bl	80040c6 <RTC_WriteAlarmCounter>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e027      	b.n	8003d60 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003d10:	6979      	ldr	r1, [r7, #20]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fa88 	bl	8004228 <RTC_DateUpdate>
 8003d18:	e003      	b.n	8003d22 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01a      	beq.n	8003d5e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fa41 	bl	80041b4 <RTC_ByteToBcd2>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	785b      	ldrb	r3, [r3, #1]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fa38 	bl	80041b4 <RTC_ByteToBcd2>
 8003d44:	4603      	mov	r3, r0
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	789b      	ldrb	r3, [r3, #2]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fa2f 	bl	80041b4 <RTC_ByteToBcd2>
 8003d56:	4603      	mov	r3, r0
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	91a2b3c5 	.word	0x91a2b3c5
 8003d6c:	88888889 	.word	0x88888889
 8003d70:	aaaaaaab 	.word	0xaaaaaaab
 8003d74:	00015180 	.word	0x00015180

08003d78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61bb      	str	r3, [r7, #24]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_RTC_SetDate+0x24>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e097      	b.n	8003ed0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	7c1b      	ldrb	r3, [r3, #16]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_RTC_SetDate+0x34>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e091      	b.n	8003ed0 <HAL_RTC_SetDate+0x158>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2202      	movs	r2, #2
 8003db6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	78da      	ldrb	r2, [r3, #3]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	785a      	ldrb	r2, [r3, #1]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	789a      	ldrb	r2, [r3, #2]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	739a      	strb	r2, [r3, #14]
 8003dd6:	e01a      	b.n	8003e0e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	78db      	ldrb	r3, [r3, #3]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fa06 	bl	80041ee <RTC_Bcd2ToByte>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	785b      	ldrb	r3, [r3, #1]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f9fd 	bl	80041ee <RTC_Bcd2ToByte>
 8003df4:	4603      	mov	r3, r0
 8003df6:	461a      	mov	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	789b      	ldrb	r3, [r3, #2]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 f9f4 	bl	80041ee <RTC_Bcd2ToByte>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	7bdb      	ldrb	r3, [r3, #15]
 8003e12:	4618      	mov	r0, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	7b59      	ldrb	r1, [r3, #13]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	7b9b      	ldrb	r3, [r3, #14]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f000 fadf 	bl	80043e0 <RTC_WeekDayNum>
 8003e22:	4603      	mov	r3, r0
 8003e24:	461a      	mov	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	7b1a      	ldrb	r2, [r3, #12]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f8d7 	bl	8003fe6 <RTC_ReadTimeCounter>
 8003e38:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	4a26      	ldr	r2, [pc, #152]	@ (8003ed8 <HAL_RTC_SetDate+0x160>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	0adb      	lsrs	r3, r3, #11
 8003e44:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b18      	cmp	r3, #24
 8003e4a:	d93a      	bls.n	8003ec2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4a23      	ldr	r2, [pc, #140]	@ (8003edc <HAL_RTC_SetDate+0x164>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	4a22      	ldr	r2, [pc, #136]	@ (8003ee0 <HAL_RTC_SetDate+0x168>)
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003e62:	69f9      	ldr	r1, [r7, #28]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f8ee 	bl	8004046 <RTC_WriteTimeCounter>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2204      	movs	r2, #4
 8003e74:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e027      	b.n	8003ed0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f907 	bl	8004094 <RTC_ReadAlarmCounter>
 8003e86:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8e:	d018      	beq.n	8003ec2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d214      	bcs.n	8003ec2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003e9e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003ea2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003ea4:	69b9      	ldr	r1, [r7, #24]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f90d 	bl	80040c6 <RTC_WriteAlarmCounter>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e006      	b.n	8003ed0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3720      	adds	r7, #32
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	91a2b3c5 	.word	0x91a2b3c5
 8003edc:	aaaaaaab 	.word	0xaaaaaaab
 8003ee0:	00015180 	.word	0x00015180

08003ee4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	460a      	mov	r2, r1
 8003ef8:	801a      	strh	r2, [r3, #0]
 8003efa:	460a      	mov	r2, r1
 8003efc:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_RTC_GetDate+0x26>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e03a      	b.n	8003f84 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003f0e:	f107 0314 	add.w	r3, r7, #20
 8003f12:	2200      	movs	r2, #0
 8003f14:	4619      	mov	r1, r3
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff fe56 	bl	8003bc8 <HAL_RTC_GetTime>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e02e      	b.n	8003f84 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	7b1a      	ldrb	r2, [r3, #12]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	7bda      	ldrb	r2, [r3, #15]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	7b5a      	ldrb	r2, [r3, #13]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	7b9a      	ldrb	r2, [r3, #14]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01a      	beq.n	8003f82 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	78db      	ldrb	r3, [r3, #3]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 f92f 	bl	80041b4 <RTC_ByteToBcd2>
 8003f56:	4603      	mov	r3, r0
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	785b      	ldrb	r3, [r3, #1]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f926 	bl	80041b4 <RTC_ByteToBcd2>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	789b      	ldrb	r3, [r3, #2]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 f91d 	bl	80041b4 <RTC_ByteToBcd2>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e01d      	b.n	8003fde <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0208 	bic.w	r2, r2, #8
 8003fb0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003fb2:	f7fd ffaf 	bl	8001f14 <HAL_GetTick>
 8003fb6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003fb8:	e009      	b.n	8003fce <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003fba:	f7fd ffab 	bl	8001f14 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fc8:	d901      	bls.n	8003fce <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e007      	b.n	8003fde <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0ee      	beq.n	8003fba <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b087      	sub	sp, #28
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	827b      	strh	r3, [r7, #18]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	823b      	strh	r3, [r7, #16]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004016:	8a7a      	ldrh	r2, [r7, #18]
 8004018:	8a3b      	ldrh	r3, [r7, #16]
 800401a:	429a      	cmp	r2, r3
 800401c:	d008      	beq.n	8004030 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800401e:	8a3b      	ldrh	r3, [r7, #16]
 8004020:	041a      	lsls	r2, r3, #16
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	b29b      	uxth	r3, r3
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e004      	b.n	800403a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004030:	8a7b      	ldrh	r3, [r7, #18]
 8004032:	041a      	lsls	r2, r3, #16
 8004034:	89fb      	ldrh	r3, [r7, #14]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800403a:	697b      	ldr	r3, [r7, #20]
}
 800403c:	4618      	mov	r0, r3
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f85d 	bl	8004114 <RTC_EnterInitMode>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
 8004064:	e011      	b.n	800408a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	0c12      	lsrs	r2, r2, #16
 800406e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	b292      	uxth	r2, r2
 8004078:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f872 	bl	8004164 <RTC_ExitInitMode>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800408a:	7bfb      	ldrb	r3, [r7, #15]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	81fb      	strh	r3, [r7, #14]
 80040a0:	2300      	movs	r3, #0
 80040a2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80040b4:	89fb      	ldrh	r3, [r7, #14]
 80040b6:	041a      	lsls	r2, r3, #16
 80040b8:	89bb      	ldrh	r3, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f81d 	bl	8004114 <RTC_EnterInitMode>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
 80040e4:	e011      	b.n	800410a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	0c12      	lsrs	r2, r2, #16
 80040ee:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	b292      	uxth	r2, r2
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f832 	bl	8004164 <RTC_ExitInitMode>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800410a:	7bfb      	ldrb	r3, [r7, #15]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004120:	f7fd fef8 	bl	8001f14 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004126:	e009      	b.n	800413c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004128:	f7fd fef4 	bl	8001f14 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004136:	d901      	bls.n	800413c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e00f      	b.n	800415c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0ee      	beq.n	8004128 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0210 	orr.w	r2, r2, #16
 8004158:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0210 	bic.w	r2, r2, #16
 800417e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004180:	f7fd fec8 	bl	8001f14 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004186:	e009      	b.n	800419c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004188:	f7fd fec4 	bl	8001f14 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004196:	d901      	bls.n	800419c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e007      	b.n	80041ac <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0ee      	beq.n	8004188 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80041c2:	e005      	b.n	80041d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3301      	adds	r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	3b0a      	subs	r3, #10
 80041ce:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	2b09      	cmp	r3, #9
 80041d4:	d8f6      	bhi.n	80041c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	b2db      	uxtb	r3, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	4603      	mov	r3, r0
 80041f6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	b2da      	uxtb	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	4413      	add	r3, r2
 800421c:	b2db      	uxtb	r3, r3
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	7bdb      	ldrb	r3, [r3, #15]
 8004246:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7b5b      	ldrb	r3, [r3, #13]
 800424c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	7b9b      	ldrb	r3, [r3, #14]
 8004252:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004254:	2300      	movs	r3, #0
 8004256:	60bb      	str	r3, [r7, #8]
 8004258:	e06f      	b.n	800433a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d011      	beq.n	8004284 <RTC_DateUpdate+0x5c>
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d00e      	beq.n	8004284 <RTC_DateUpdate+0x5c>
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b05      	cmp	r3, #5
 800426a:	d00b      	beq.n	8004284 <RTC_DateUpdate+0x5c>
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b07      	cmp	r3, #7
 8004270:	d008      	beq.n	8004284 <RTC_DateUpdate+0x5c>
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d005      	beq.n	8004284 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b0a      	cmp	r3, #10
 800427c:	d002      	beq.n	8004284 <RTC_DateUpdate+0x5c>
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b0c      	cmp	r3, #12
 8004282:	d117      	bne.n	80042b4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b1e      	cmp	r3, #30
 8004288:	d803      	bhi.n	8004292 <RTC_DateUpdate+0x6a>
      {
        day++;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3301      	adds	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004290:	e050      	b.n	8004334 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b0c      	cmp	r3, #12
 8004296:	d005      	beq.n	80042a4 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	3301      	adds	r3, #1
 800429c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800429e:	2301      	movs	r3, #1
 80042a0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80042a2:	e047      	b.n	8004334 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80042a4:	2301      	movs	r3, #1
 80042a6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80042a8:	2301      	movs	r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]
          year++;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	3301      	adds	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80042b2:	e03f      	b.n	8004334 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d008      	beq.n	80042cc <RTC_DateUpdate+0xa4>
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b06      	cmp	r3, #6
 80042be:	d005      	beq.n	80042cc <RTC_DateUpdate+0xa4>
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b09      	cmp	r3, #9
 80042c4:	d002      	beq.n	80042cc <RTC_DateUpdate+0xa4>
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b0b      	cmp	r3, #11
 80042ca:	d10c      	bne.n	80042e6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b1d      	cmp	r3, #29
 80042d0:	d803      	bhi.n	80042da <RTC_DateUpdate+0xb2>
      {
        day++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3301      	adds	r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80042d8:	e02c      	b.n	8004334 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	3301      	adds	r3, #1
 80042de:	613b      	str	r3, [r7, #16]
        day = 1U;
 80042e0:	2301      	movs	r3, #1
 80042e2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80042e4:	e026      	b.n	8004334 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d123      	bne.n	8004334 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b1b      	cmp	r3, #27
 80042f0:	d803      	bhi.n	80042fa <RTC_DateUpdate+0xd2>
      {
        day++;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3301      	adds	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e01c      	b.n	8004334 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b1c      	cmp	r3, #28
 80042fe:	d111      	bne.n	8004324 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	b29b      	uxth	r3, r3
 8004304:	4618      	mov	r0, r3
 8004306:	f000 f839 	bl	800437c <RTC_IsLeapYear>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3301      	adds	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	e00d      	b.n	8004334 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	3301      	adds	r3, #1
 800431c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800431e:	2301      	movs	r3, #1
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	e007      	b.n	8004334 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b1d      	cmp	r3, #29
 8004328:	d104      	bne.n	8004334 <RTC_DateUpdate+0x10c>
      {
        month++;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	3301      	adds	r3, #1
 800432e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004330:	2301      	movs	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	3301      	adds	r3, #1
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d38b      	bcc.n	800425a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	b2da      	uxtb	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	4619      	mov	r1, r3
 8004364:	6978      	ldr	r0, [r7, #20]
 8004366:	f000 f83b 	bl	80043e0 <RTC_WeekDayNum>
 800436a:	4603      	mov	r3, r0
 800436c:	461a      	mov	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	731a      	strb	r2, [r3, #12]
}
 8004372:	bf00      	nop
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	e01d      	b.n	80043d2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	4a10      	ldr	r2, [pc, #64]	@ (80043dc <RTC_IsLeapYear+0x60>)
 800439a:	fba2 1203 	umull	r1, r2, r2, r3
 800439e:	0952      	lsrs	r2, r2, #5
 80043a0:	2164      	movs	r1, #100	@ 0x64
 80043a2:	fb01 f202 	mul.w	r2, r1, r2
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e00f      	b.n	80043d2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	4a09      	ldr	r2, [pc, #36]	@ (80043dc <RTC_IsLeapYear+0x60>)
 80043b6:	fba2 1203 	umull	r1, r2, r2, r3
 80043ba:	09d2      	lsrs	r2, r2, #7
 80043bc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80043c0:	fb01 f202 	mul.w	r2, r1, r2
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80043d0:	2300      	movs	r3, #0
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr
 80043dc:	51eb851f 	.word	0x51eb851f

080043e0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
 80043ec:	4613      	mov	r3, r2
 80043ee:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80043fe:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d82d      	bhi.n	8004462 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	4613      	mov	r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	4413      	add	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	4a2c      	ldr	r2, [pc, #176]	@ (80044c4 <RTC_WeekDayNum+0xe4>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	085a      	lsrs	r2, r3, #1
 800441a:	78bb      	ldrb	r3, [r7, #2]
 800441c:	441a      	add	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	441a      	add	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	3b01      	subs	r3, #1
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	441a      	add	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	3b01      	subs	r3, #1
 800442e:	4926      	ldr	r1, [pc, #152]	@ (80044c8 <RTC_WeekDayNum+0xe8>)
 8004430:	fba1 1303 	umull	r1, r3, r1, r3
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	1ad2      	subs	r2, r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	3b01      	subs	r3, #1
 800443c:	4922      	ldr	r1, [pc, #136]	@ (80044c8 <RTC_WeekDayNum+0xe8>)
 800443e:	fba1 1303 	umull	r1, r3, r1, r3
 8004442:	09db      	lsrs	r3, r3, #7
 8004444:	4413      	add	r3, r2
 8004446:	1d1a      	adds	r2, r3, #4
 8004448:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <RTC_WeekDayNum+0xec>)
 800444a:	fba3 1302 	umull	r1, r3, r3, r2
 800444e:	1ad1      	subs	r1, r2, r3
 8004450:	0849      	lsrs	r1, r1, #1
 8004452:	440b      	add	r3, r1
 8004454:	0899      	lsrs	r1, r3, #2
 8004456:	460b      	mov	r3, r1
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	1a5b      	subs	r3, r3, r1
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	e029      	b.n	80044b6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004462:	78fa      	ldrb	r2, [r7, #3]
 8004464:	4613      	mov	r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	4413      	add	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	4a15      	ldr	r2, [pc, #84]	@ (80044c4 <RTC_WeekDayNum+0xe4>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	085a      	lsrs	r2, r3, #1
 8004476:	78bb      	ldrb	r3, [r7, #2]
 8004478:	441a      	add	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	441a      	add	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	441a      	add	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4910      	ldr	r1, [pc, #64]	@ (80044c8 <RTC_WeekDayNum+0xe8>)
 8004488:	fba1 1303 	umull	r1, r3, r1, r3
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	1ad2      	subs	r2, r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	490d      	ldr	r1, [pc, #52]	@ (80044c8 <RTC_WeekDayNum+0xe8>)
 8004494:	fba1 1303 	umull	r1, r3, r1, r3
 8004498:	09db      	lsrs	r3, r3, #7
 800449a:	4413      	add	r3, r2
 800449c:	1c9a      	adds	r2, r3, #2
 800449e:	4b0b      	ldr	r3, [pc, #44]	@ (80044cc <RTC_WeekDayNum+0xec>)
 80044a0:	fba3 1302 	umull	r1, r3, r3, r2
 80044a4:	1ad1      	subs	r1, r2, r3
 80044a6:	0849      	lsrs	r1, r1, #1
 80044a8:	440b      	add	r3, r1
 80044aa:	0899      	lsrs	r1, r3, #2
 80044ac:	460b      	mov	r3, r1
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	1a5b      	subs	r3, r3, r1
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	b2db      	uxtb	r3, r3
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	38e38e39 	.word	0x38e38e39
 80044c8:	51eb851f 	.word	0x51eb851f
 80044cc:	24924925 	.word	0x24924925

080044d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e041      	b.n	8004566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fc fe0e 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3304      	adds	r3, #4
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f000 fa8a 	bl	8004a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d001      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e03a      	b.n	80045fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a18      	ldr	r2, [pc, #96]	@ (8004608 <HAL_TIM_Base_Start_IT+0x98>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00e      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x58>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b2:	d009      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x58>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a14      	ldr	r2, [pc, #80]	@ (800460c <HAL_TIM_Base_Start_IT+0x9c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x58>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a13      	ldr	r2, [pc, #76]	@ (8004610 <HAL_TIM_Base_Start_IT+0xa0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d111      	bne.n	80045ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d010      	beq.n	80045fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ea:	e007      	b.n	80045fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40000400 	.word	0x40000400
 8004610:	40000800 	.word	0x40000800

08004614 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0201 	bic.w	r2, r2, #1
 800462a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6a1a      	ldr	r2, [r3, #32]
 8004632:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10f      	bne.n	800465c <HAL_TIM_Base_Stop_IT+0x48>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6a1a      	ldr	r2, [r3, #32]
 8004642:	f240 4344 	movw	r3, #1092	@ 0x444
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d107      	bne.n	800465c <HAL_TIM_Base_Stop_IT+0x48>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d020      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01b      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0202 	mvn.w	r2, #2
 80046a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f998 	bl	80049f0 <HAL_TIM_IC_CaptureCallback>
 80046c0:	e005      	b.n	80046ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f98b 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f99a 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d020      	beq.n	8004720 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01b      	beq.n	8004720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0204 	mvn.w	r2, #4
 80046f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f972 	bl	80049f0 <HAL_TIM_IC_CaptureCallback>
 800470c:	e005      	b.n	800471a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f965 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f974 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d020      	beq.n	800476c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01b      	beq.n	800476c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0208 	mvn.w	r2, #8
 800473c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2204      	movs	r2, #4
 8004742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f94c 	bl	80049f0 <HAL_TIM_IC_CaptureCallback>
 8004758:	e005      	b.n	8004766 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f93f 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f94e 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	d020      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01b      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0210 	mvn.w	r2, #16
 8004788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2208      	movs	r2, #8
 800478e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f926 	bl	80049f0 <HAL_TIM_IC_CaptureCallback>
 80047a4:	e005      	b.n	80047b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f919 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f928 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0201 	mvn.w	r2, #1
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fb ffda 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00c      	beq.n	8004800 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fa7f 	bl	8004cfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00c      	beq.n	8004824 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800481c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f8f8 	bl	8004a14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00c      	beq.n	8004848 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0220 	mvn.w	r2, #32
 8004840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa52 	bl	8004cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_TIM_ConfigClockSource+0x1c>
 8004868:	2302      	movs	r3, #2
 800486a:	e0b4      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x186>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800488a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048a4:	d03e      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0xd4>
 80048a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048aa:	f200 8087 	bhi.w	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b2:	f000 8086 	beq.w	80049c2 <HAL_TIM_ConfigClockSource+0x172>
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ba:	d87f      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048bc:	2b70      	cmp	r3, #112	@ 0x70
 80048be:	d01a      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0xa6>
 80048c0:	2b70      	cmp	r3, #112	@ 0x70
 80048c2:	d87b      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048c4:	2b60      	cmp	r3, #96	@ 0x60
 80048c6:	d050      	beq.n	800496a <HAL_TIM_ConfigClockSource+0x11a>
 80048c8:	2b60      	cmp	r3, #96	@ 0x60
 80048ca:	d877      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048cc:	2b50      	cmp	r3, #80	@ 0x50
 80048ce:	d03c      	beq.n	800494a <HAL_TIM_ConfigClockSource+0xfa>
 80048d0:	2b50      	cmp	r3, #80	@ 0x50
 80048d2:	d873      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048d4:	2b40      	cmp	r3, #64	@ 0x40
 80048d6:	d058      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x13a>
 80048d8:	2b40      	cmp	r3, #64	@ 0x40
 80048da:	d86f      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b30      	cmp	r3, #48	@ 0x30
 80048de:	d064      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15a>
 80048e0:	2b30      	cmp	r3, #48	@ 0x30
 80048e2:	d86b      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d060      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15a>
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d867      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d05c      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15a>
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d05a      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15a>
 80048f4:	e062      	b.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004906:	f000 f974 	bl	8004bf2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	609a      	str	r2, [r3, #8]
      break;
 8004922:	e04f      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004934:	f000 f95d 	bl	8004bf2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004946:	609a      	str	r2, [r3, #8]
      break;
 8004948:	e03c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004956:	461a      	mov	r2, r3
 8004958:	f000 f8d4 	bl	8004b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2150      	movs	r1, #80	@ 0x50
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f92b 	bl	8004bbe <TIM_ITRx_SetConfig>
      break;
 8004968:	e02c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004976:	461a      	mov	r2, r3
 8004978:	f000 f8f2 	bl	8004b60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2160      	movs	r1, #96	@ 0x60
 8004982:	4618      	mov	r0, r3
 8004984:	f000 f91b 	bl	8004bbe <TIM_ITRx_SetConfig>
      break;
 8004988:	e01c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004996:	461a      	mov	r2, r3
 8004998:	f000 f8b4 	bl	8004b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2140      	movs	r1, #64	@ 0x40
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f90b 	bl	8004bbe <TIM_ITRx_SetConfig>
      break;
 80049a8:	e00c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f000 f902 	bl	8004bbe <TIM_ITRx_SetConfig>
      break;
 80049ba:	e003      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      break;
 80049c0:	e000      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr
	...

08004a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004af8 <TIM_Base_SetConfig+0xd0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00b      	beq.n	8004a58 <TIM_Base_SetConfig+0x30>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a46:	d007      	beq.n	8004a58 <TIM_Base_SetConfig+0x30>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004afc <TIM_Base_SetConfig+0xd4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0x30>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2b      	ldr	r2, [pc, #172]	@ (8004b00 <TIM_Base_SetConfig+0xd8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d108      	bne.n	8004a6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a22      	ldr	r2, [pc, #136]	@ (8004af8 <TIM_Base_SetConfig+0xd0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a78:	d007      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004afc <TIM_Base_SetConfig+0xd4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1e      	ldr	r2, [pc, #120]	@ (8004b00 <TIM_Base_SetConfig+0xd8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d108      	bne.n	8004a9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8004af8 <TIM_Base_SetConfig+0xd0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d103      	bne.n	8004ad0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f023 0201 	bic.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	611a      	str	r2, [r3, #16]
  }
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800

08004b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f023 0201 	bic.w	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f023 030a 	bic.w	r3, r3, #10
 8004b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr

08004b60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 0210 	bic.w	r2, r3, #16
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	031b      	lsls	r3, r3, #12
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	621a      	str	r2, [r3, #32]
}
 8004bb4:	bf00      	nop
 8004bb6:	371c      	adds	r7, #28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr

08004bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f043 0307 	orr.w	r3, r3, #7
 8004be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	609a      	str	r2, [r3, #8]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr

08004bf2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b087      	sub	sp, #28
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	021a      	lsls	r2, r3, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	609a      	str	r2, [r3, #8]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e046      	b.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a16      	ldr	r2, [pc, #88]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c94:	d009      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a10      	ldr	r2, [pc, #64]	@ (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr
 8004ce0:	40012c00 	.word	0x40012c00
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800

08004cec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e042      	b.n	8004da8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fc fa2e 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2224      	movs	r2, #36	@ 0x24
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f82b 	bl	8004db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004dea:	f023 030c 	bic.w	r3, r3, #12
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	430b      	orrs	r3, r1
 8004df6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec4 <UART_SetConfig+0x114>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d103      	bne.n	8004e20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e18:	f7fe fc14 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	e002      	b.n	8004e26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e20:	f7fe fbfc 	bl	800361c <HAL_RCC_GetPCLK1Freq>
 8004e24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009a      	lsls	r2, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	4a22      	ldr	r2, [pc, #136]	@ (8004ec8 <UART_SetConfig+0x118>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	0119      	lsls	r1, r3, #4
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009a      	lsls	r2, r3, #2
 8004e50:	441a      	add	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <UART_SetConfig+0x118>)
 8004e5e:	fba3 0302 	umull	r0, r3, r3, r2
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	2064      	movs	r0, #100	@ 0x64
 8004e66:	fb00 f303 	mul.w	r3, r0, r3
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	3332      	adds	r3, #50	@ 0x32
 8004e70:	4a15      	ldr	r2, [pc, #84]	@ (8004ec8 <UART_SetConfig+0x118>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e7c:	4419      	add	r1, r3
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	009a      	lsls	r2, r3, #2
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <UART_SetConfig+0x118>)
 8004e96:	fba3 0302 	umull	r0, r3, r3, r2
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	2064      	movs	r0, #100	@ 0x64
 8004e9e:	fb00 f303 	mul.w	r3, r0, r3
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	3332      	adds	r3, #50	@ 0x32
 8004ea8:	4a07      	ldr	r2, [pc, #28]	@ (8004ec8 <UART_SetConfig+0x118>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	f003 020f 	and.w	r2, r3, #15
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	440a      	add	r2, r1
 8004eba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40013800 	.word	0x40013800
 8004ec8:	51eb851f 	.word	0x51eb851f

08004ecc <memset>:
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4402      	add	r2, r0
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d100      	bne.n	8004ed6 <memset+0xa>
 8004ed4:	4770      	bx	lr
 8004ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eda:	e7f9      	b.n	8004ed0 <memset+0x4>

08004edc <__libc_init_array>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	2600      	movs	r6, #0
 8004ee0:	4d0c      	ldr	r5, [pc, #48]	@ (8004f14 <__libc_init_array+0x38>)
 8004ee2:	4c0d      	ldr	r4, [pc, #52]	@ (8004f18 <__libc_init_array+0x3c>)
 8004ee4:	1b64      	subs	r4, r4, r5
 8004ee6:	10a4      	asrs	r4, r4, #2
 8004ee8:	42a6      	cmp	r6, r4
 8004eea:	d109      	bne.n	8004f00 <__libc_init_array+0x24>
 8004eec:	f000 f81a 	bl	8004f24 <_init>
 8004ef0:	2600      	movs	r6, #0
 8004ef2:	4d0a      	ldr	r5, [pc, #40]	@ (8004f1c <__libc_init_array+0x40>)
 8004ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8004f20 <__libc_init_array+0x44>)
 8004ef6:	1b64      	subs	r4, r4, r5
 8004ef8:	10a4      	asrs	r4, r4, #2
 8004efa:	42a6      	cmp	r6, r4
 8004efc:	d105      	bne.n	8004f0a <__libc_init_array+0x2e>
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f04:	4798      	blx	r3
 8004f06:	3601      	adds	r6, #1
 8004f08:	e7ee      	b.n	8004ee8 <__libc_init_array+0xc>
 8004f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0e:	4798      	blx	r3
 8004f10:	3601      	adds	r6, #1
 8004f12:	e7f2      	b.n	8004efa <__libc_init_array+0x1e>
 8004f14:	0800510c 	.word	0x0800510c
 8004f18:	0800510c 	.word	0x0800510c
 8004f1c:	0800510c 	.word	0x0800510c
 8004f20:	08005110 	.word	0x08005110

08004f24 <_init>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr

08004f30 <_fini>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	bf00      	nop
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr
